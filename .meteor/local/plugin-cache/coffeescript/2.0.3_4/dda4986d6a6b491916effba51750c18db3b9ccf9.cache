{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar BasicTestCase, MyCollection, TestDataCollection;\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function (obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function (selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function (selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function (divisor, remainder) {\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: (id, fields) => {\n        return this.added('testDataCollection', id, fields);\n      },\n      changed: (id, fields) => {\n        return this.changed('testDataCollection', id, fields);\n      },\n      removed: id => {\n        return this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(() => {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n\n  Meteor.publish('searchDocuments', function (search) {\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: {\n        [`score_${this._subscriptionId}`]: {\n          $meta: 'textScore'\n        }\n      },\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = function () {\n  class BasicTestCase extends ClassyTestCase {\n    setUpServer() {\n      TestDataCollection.remove({});\n      MyCollection.remove({});\n      MyCollection.insert({\n        subject: \"foo bar test string\"\n      });\n      MyCollection.insert({\n        subject: \"lorem ipsum test string\"\n      });\n      return MyCollection.insert({\n        subject: \"lorem ipsum dolor sit amet\"\n      });\n    }\n\n  }\n\n  ;\n  BasicTestCase.testName = 'subscription-data - basic';\n  BasicTestCase.prototype.testClientBasic = [function () {\n    this.subscription1 = this.assertSubscribeSuccessful('testDataPublish', 2, 0, this.expect());\n    this.subscription2 = this.assertSubscribeSuccessful('testDataPublish', 2, 1, this.expect());\n    this.subscription3 = this.assertSubscribeSuccessful('testDataPublish', 6, 0, this.expect());\n    return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish', 3, 0, this.expect());\n  }, function () {\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.documents = [];\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect((error, documentId) => {\n        this.assertFalse(error, error);\n        return this.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 3 === 0;\n    }));\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect((error, documentId) => {\n        this.assertFalse(error, error);\n        return this.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 3 === 0;\n    }));\n    this.subscription2.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var fields;\n    fields = {\n      _id: 0,\n      i: 1\n    };\n    fields[`_sub_${this.subscription1.subscriptionId}`] = 1;\n    fields[`_sub_${this.subscription2.subscriptionId}`] = 1;\n    fields[`_sub_${this.subscription3.subscriptionId}`] = 1;\n    fields[`_sub_${this.subscription4.subscriptionId}`] = 1;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 3 === 0;\n    }));\n    this.subscription3.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function ({\n      i\n    }) {\n      return i % 3 === 0;\n    }));\n  }];\n  BasicTestCase.prototype.testClientSearch = [function () {\n    return this.subscription = this.assertSubscribeSuccessful('searchDocuments', \"lorem\", this.expect());\n  }, function () {\n    return this.assertEqual(MyCollection.find({}, {\n      sort: {\n        [`score_${this.subscription.subscriptionId}`]: -1\n      },\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [{\n      [`score_${this.subscription.subscriptionId}`]: 0.625,\n      subject: \"lorem ipsum test string\"\n    }, {\n      [`score_${this.subscription.subscriptionId}`]: 0.6,\n      subject: \"lorem ipsum dolor sit amet\"\n    }]);\n  }, BasicTestCase.runOnServer(function () {\n    return MyCollection.insert({\n      subject: \"lorem ipsum\"\n    });\n  }), function () {\n    // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n    return Meteor.setTimeout(this.expect(), 1100); // ms\n  }, function () {\n    this.assertEqual(MyCollection.find({}, {\n      sort: {\n        [`score_${this.subscription.subscriptionId}`]: -1\n      },\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [{\n      [`score_${this.subscription.subscriptionId}`]: 0.75,\n      subject: \"lorem ipsum\"\n    }, {\n      [`score_${this.subscription.subscriptionId}`]: 0.625,\n      subject: \"lorem ipsum test string\"\n    }, {\n      [`score_${this.subscription.subscriptionId}`]: 0.6,\n      subject: \"lorem ipsum dolor sit amet\"\n    }]);\n    return this.subscription.stop();\n  }];\n  return BasicTestCase;\n}();\n\nClassyTestCase.addTest(new BasicTestCase());","sourceMap":{"version":3,"sources":["/packages/peerlibrary_subscription-scope/tests.coffee","/tests.coffee"],"names":["BasicTestCase","MyCollection","TestDataCollection","Mongo","Collection","Meteor","isServer","methods","insertTest","obj","insert","updateTest","selector","query","update","removeTest","remove","publish","divisor","remainder","handle","enableScope","find","i","$mod","observeChanges","added","id","fields","changed","removed","onStop","stop","ready","_ensureIndex","subject","search","options","$text","$search","_subscriptionId","$meta","pollingIntervalMs","ClassyTestCase","setUpServer","testName","prototype","testClientBasic","subscription1","assertSubscribeSuccessful","expect","subscription2","subscription3","subscription4","doc","j","assertEqual","_id","sort","fetch","scopeQuery","documents","push","call","error","documentId","assertFalse","assertTrue","_","sortBy","setTimeout","filter","subscriptionId","testClientSearch","subscription","runOnServer","addTest"],"mappings":"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","file":"packages/peerlibrary:subscription-scope/tests.coffee.map","sourcesContent":["MyCollection = new Mongo.Collection 'MyCollection'\n\nif Meteor.isServer\n  TestDataCollection = new Mongo.Collection null\n\n  Meteor.methods\n    insertTest: (obj) ->\n      TestDataCollection.insert obj\n\n    updateTest: (selector, query) ->\n      TestDataCollection.update selector, query\n\n    removeTest: (selector) ->\n      TestDataCollection.remove selector\n\n  Meteor.publish 'testDataPublish', (divisor, remainder) ->\n    @enableScope()\n\n    handle = TestDataCollection.find({i: $mod: [divisor, remainder]}).observeChanges\n      added: (id, fields) =>\n        @added 'testDataCollection', id, fields\n      changed: (id, fields) =>\n        @changed 'testDataCollection', id, fields\n      removed: (id) =>\n        @removed 'testDataCollection', id\n\n    @onStop =>\n      handle.stop()\n\n    @ready()\n\n  MyCollection._ensureIndex\n    subject: 'text'\n\n  Meteor.publish 'searchDocuments', (search) ->\n    @enableScope()\n\n    query =\n      $text:\n        $search: search\n\n    options =\n      fields:\n        \"score_#{@_subscriptionId}\":\n          $meta: 'textScore'\n      pollingIntervalMs: 1000\n\n    MyCollection.find query, options\n\nelse\n  TestDataCollection = new Mongo.Collection 'testDataCollection'\n\nclass BasicTestCase extends ClassyTestCase\n  @testName: 'subscription-data - basic'\n\n  setUpServer: ->\n    TestDataCollection.remove {}\n    MyCollection.remove {}\n\n    MyCollection.insert\n      subject: \"foo bar test string\"\n    MyCollection.insert\n      subject: \"lorem ipsum test string\"\n    MyCollection.insert\n      subject: \"lorem ipsum dolor sit amet\"\n\n  testClientBasic: [\n    ->\n      @subscription1 = @assertSubscribeSuccessful 'testDataPublish', 2, 0, @expect()\n      @subscription2 = @assertSubscribeSuccessful 'testDataPublish', 2, 1, @expect()\n      @subscription3 = @assertSubscribeSuccessful 'testDataPublish', 6, 0, @expect()\n      @subscription4 = @assertSubscribeSuccessful 'testDataPublish', 3, 0, @expect()\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n\n      @documents = []\n\n      for i in [0...10]\n        doc = {i: i}\n        @documents.push doc\n        Meteor.call 'insertTest', doc, @expect (error, documentId) =>\n          @assertFalse error, error\n          @assertTrue documentId\n\n      @documents = _.sortBy @documents, 'i'\n  ,\n    ->\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), @documents\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 1\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      for i in [0...10]\n        doc = {i: i}\n        @documents.push doc\n        Meteor.call 'insertTest', doc, @expect (error, documentId) =>\n          @assertFalse error, error\n          @assertTrue documentId\n\n      @documents = _.sortBy @documents, 'i'\n  ,\n    ->\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), @documents\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 1\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      @subscription2.stop()\n\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      fields = {_id: 0, i: 1}\n      fields[\"_sub_#{@subscription1.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription2.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription3.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription4.subscriptionId}\"] = 1\n\n      @assertEqual TestDataCollection.find({}, {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0 or i % 6 is 0 or i % 3 is 0\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      @subscription3.stop()\n\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0 or i % 3 is 0\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n  ]\n\n  testClientSearch: [\n    ->\n      @subscription = @assertSubscribeSuccessful 'searchDocuments', \"lorem\", @expect()\n  ,\n    ->\n      @assertEqual MyCollection.find(\n        {}\n      ,\n        sort:\n          \"score_#{@subscription.subscriptionId}\": -1\n        fields:\n          _id: 0\n      ).fetch(), [\n        \"score_#{@subscription.subscriptionId}\": 0.625\n        subject: \"lorem ipsum test string\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.6\n        subject: \"lorem ipsum dolor sit amet\"\n      ]\n  ,\n    @runOnServer ->\n      MyCollection.insert\n        subject: \"lorem ipsum\"\n  ,\n    ->\n      # To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n      Meteor.setTimeout @expect(), 1100 # ms\n  ,\n    ->\n      @assertEqual MyCollection.find(\n        {}\n      ,\n        sort:\n          \"score_#{@subscription.subscriptionId}\": -1\n        fields:\n          _id: 0\n      ).fetch(), [\n        \"score_#{@subscription.subscriptionId}\": 0.75\n        subject: \"lorem ipsum\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.625\n        subject: \"lorem ipsum test string\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.6\n        subject: \"lorem ipsum dolor sit amet\"\n      ]\n\n      @subscription.stop()\n  ]\n\nClassyTestCase.addTest new BasicTestCase()\n","var BasicTestCase, MyCollection, TestDataCollection;\n\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function(obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function(selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function(selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function(divisor, remainder) {\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: (id, fields) => {\n        return this.added('testDataCollection', id, fields);\n      },\n      changed: (id, fields) => {\n        return this.changed('testDataCollection', id, fields);\n      },\n      removed: (id) => {\n        return this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(() => {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n  Meteor.publish('searchDocuments', function(search) {\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: {\n        [`score_${this._subscriptionId}`]: {\n          $meta: 'textScore'\n        }\n      },\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = (function() {\n  class BasicTestCase extends ClassyTestCase {\n    setUpServer() {\n      TestDataCollection.remove({});\n      MyCollection.remove({});\n      MyCollection.insert({\n        subject: \"foo bar test string\"\n      });\n      MyCollection.insert({\n        subject: \"lorem ipsum test string\"\n      });\n      return MyCollection.insert({\n        subject: \"lorem ipsum dolor sit amet\"\n      });\n    }\n\n  };\n\n  BasicTestCase.testName = 'subscription-data - basic';\n\n  BasicTestCase.prototype.testClientBasic = [\n    function() {\n      this.subscription1 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    0,\n    this.expect());\n      this.subscription2 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    1,\n    this.expect());\n      this.subscription3 = this.assertSubscribeSuccessful('testDataPublish',\n    6,\n    0,\n    this.expect());\n      return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish',\n    3,\n    0,\n    this.expect());\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.documents = [];\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription2.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var fields;\n      fields = {\n        _id: 0,\n        i: 1\n      };\n      fields[`_sub_${this.subscription1.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription2.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription3.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription4.subscriptionId}`] = 1;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription3.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n    }\n  ];\n\n  BasicTestCase.prototype.testClientSearch = [\n    function() {\n      return this.subscription = this.assertSubscribeSuccessful('searchDocuments',\n    \"lorem\",\n    this.expect());\n    },\n    function() {\n      return this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n    },\n    BasicTestCase.runOnServer(function() {\n      return MyCollection.insert({\n        subject: \"lorem ipsum\"\n      });\n    }),\n    function() {\n      // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n      return Meteor.setTimeout(this.expect(),\n    1100); // ms\n    },\n    function() {\n      this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.75,\n          subject: \"lorem ipsum\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n      return this.subscription.stop();\n    }\n  ];\n\n  return BasicTestCase;\n\n})();\n\nClassyTestCase.addTest(new BasicTestCase());\n"]}}