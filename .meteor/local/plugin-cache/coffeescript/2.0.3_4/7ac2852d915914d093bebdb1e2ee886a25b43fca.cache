{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nmodule.export({\n  extendPublish: () => extendPublish\n});\n\nvar extendPublish = function (newPublishArguments) {\n  var Server, originalMeteorPublish, originalPublish; // DDP Server constructor.\n\n  Server = Object.getPrototypeOf(Meteor.server).constructor;\n  originalPublish = Server.prototype.publish;\n\n  Server.prototype.publish = function (...args) {\n    var newArgs; // If the first argument is an object, we let the original publish function to traverse it.\n\n    if (_.isObject(args[0])) {\n      originalPublish.apply(this, args);\n      return;\n    }\n\n    newArgs = newPublishArguments.apply(this, args);\n    return originalPublish.apply(this, newArgs);\n  }; // Because Meteor.publish is a bound function it remembers old\n  // prototype method so we have wrap it to directly as well.\n\n\n  originalMeteorPublish = Meteor.publish;\n  return Meteor.publish = function (...args) {\n    var newArgs; // If the first argument is an object, we let the original publish function to traverse it.\n\n    if (_.isObject(args[0])) {\n      originalMeteorPublish.apply(this, args);\n      return;\n    }\n\n    newArgs = newPublishArguments.apply(this, args);\n    return originalMeteorPublish.apply(this, newArgs);\n  };\n};","sourceMap":{"version":3,"sources":["/packages/peerlibrary_extend-publish/server.coffee","/server.coffee"],"names":["module","export","extendPublish","newPublishArguments","Server","originalMeteorPublish","originalPublish","Object","getPrototypeOf","Meteor","server","constructor","prototype","publish","args","newArgs","_","isObject","apply"],"mappings":";AAAAA,OAAAC,MAAA,CAAO;AAAAC,iBAAgB,MAAAA;AAAhB,CAAP;;AAAA,IAAOA,gBAAgB,UAACC,mBAAD,EAAA;AAErB,MAAAC,MAAA,EAAAC,qBAAA,EAAAC,eAAA,CAFqB,CCErB;;ADAAF,WAASG,OAAOC,cAAP,CAAsBC,OAAOC,MAA7B,EAAqCC,WAA9C;AAEAL,oBAAkBF,OAAMQ,SAAN,CAAQC,OAA1B;;AACAT,SAAMQ,SAAN,CAAQC,OAAR,GAAkB,UAAA,GAACC,IAAD,EAAA;AAEhB,QAAAC,OAAA,CAFgB,CCEhB;;ADAA,QAAGC,EAAEC,QAAF,CAAWH,KAAK,CAAL,CAAX,CAAH,EAAA;AACER,sBAAgBY,KAAhB,CAAsB,IAAtB,EAA4BJ,IAA5B;AACA;ACED;;ADADC,cAAUZ,oBAAoBe,KAApB,CAA0B,IAA1B,EAAgCJ,IAAhC,CAAV;ACEA,WDAAR,gBAAgBY,KAAhB,CAAsB,IAAtB,EAA4BH,OAA5B,CCAA;ADRgB,GAAlB,CALqB,CCerB;AACA;;;ADCAV,0BAAwBI,OAAOI,OAA/B;ACCA,SDAAJ,OAAOI,OAAP,GAAiB,UAAA,GAACC,IAAD,EAAA;AAEf,QAAAC,OAAA,CAFe,CCEf;;ADAA,QAAGC,EAAEC,QAAF,CAAWH,KAAK,CAAL,CAAX,CAAH,EAAA;AACET,4BAAsBa,KAAtB,CAA4B,IAA5B,EAAkCJ,IAAlC;AACA;ACED;;ADADC,cAAUZ,oBAAoBe,KAApB,CAA0B,IAA1B,EAAgCJ,IAAhC,CAAV;ACEA,WDAAT,sBAAsBa,KAAtB,CAA4B,IAA5B,EAAkCH,OAAlC,CCAA;ADRe,GCAjB;ADlBqB,CAAvB","file":"packages/peerlibrary:extend-publish/server.coffee.map","sourcesContent":["export extendPublish = (newPublishArguments) ->\n  # DDP Server constructor.\n  Server = Object.getPrototypeOf(Meteor.server).constructor\n\n  originalPublish = Server::publish\n  Server::publish = (args...) ->\n    # If the first argument is an object, we let the original publish function to traverse it.\n    if _.isObject args[0]\n      originalPublish.apply this, args\n      return\n\n    newArgs = newPublishArguments.apply this, args\n\n    originalPublish.apply this, newArgs\n\n  # Because Meteor.publish is a bound function it remembers old\n  # prototype method so we have wrap it to directly as well.\n  originalMeteorPublish = Meteor.publish\n  Meteor.publish = (args...) ->\n    # If the first argument is an object, we let the original publish function to traverse it.\n    if _.isObject args[0]\n      originalMeteorPublish.apply this, args\n      return\n\n    newArgs = newPublishArguments.apply this, args\n\n    originalMeteorPublish.apply this, newArgs\n","export var extendPublish = function(newPublishArguments) {\n  var Server, originalMeteorPublish, originalPublish;\n  // DDP Server constructor.\n  Server = Object.getPrototypeOf(Meteor.server).constructor;\n  originalPublish = Server.prototype.publish;\n  Server.prototype.publish = function(...args) {\n    var newArgs;\n    // If the first argument is an object, we let the original publish function to traverse it.\n    if (_.isObject(args[0])) {\n      originalPublish.apply(this, args);\n      return;\n    }\n    newArgs = newPublishArguments.apply(this, args);\n    return originalPublish.apply(this, newArgs);\n  };\n  // Because Meteor.publish is a bound function it remembers old\n  // prototype method so we have wrap it to directly as well.\n  originalMeteorPublish = Meteor.publish;\n  return Meteor.publish = function(...args) {\n    var newArgs;\n    // If the first argument is an object, we let the original publish function to traverse it.\n    if (_.isObject(args[0])) {\n      originalMeteorPublish.apply(this, args);\n      return;\n    }\n    newArgs = newPublishArguments.apply(this, args);\n    return originalMeteorPublish.apply(this, newArgs);\n  };\n};\n"]}}