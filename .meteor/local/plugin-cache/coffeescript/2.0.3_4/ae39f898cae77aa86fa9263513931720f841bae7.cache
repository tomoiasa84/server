{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar BasicTestCase, MyCollection, TestDataCollection;\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function (obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function (selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function (selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function (divisor, remainder) {\n    var _this = this;\n\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: function (id, fields) {\n        return _this.added('testDataCollection', id, fields);\n      },\n      changed: function (id, fields) {\n        return _this.changed('testDataCollection', id, fields);\n      },\n      removed: function (id) {\n        return _this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(function () {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n\n  Meteor.publish('searchDocuments', function (search) {\n    var _fields;\n\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: (_fields = {}, _fields[\"score_\" + this._subscriptionId] = {\n        $meta: 'textScore'\n      }, _fields),\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = function () {\n  var BasicTestCase = function (_ClassyTestCase) {\n    _inherits(BasicTestCase, _ClassyTestCase);\n\n    function BasicTestCase() {\n      _classCallCheck(this, BasicTestCase);\n\n      return _possibleConstructorReturn(this, _ClassyTestCase.apply(this, arguments));\n    }\n\n    BasicTestCase.prototype.setUpServer = function () {\n      function setUpServer() {\n        TestDataCollection.remove({});\n        MyCollection.remove({});\n        MyCollection.insert({\n          subject: \"foo bar test string\"\n        });\n        MyCollection.insert({\n          subject: \"lorem ipsum test string\"\n        });\n        return MyCollection.insert({\n          subject: \"lorem ipsum dolor sit amet\"\n        });\n      }\n\n      return setUpServer;\n    }();\n\n    return BasicTestCase;\n  }(ClassyTestCase);\n\n  ;\n  BasicTestCase.testName = 'subscription-data - basic';\n  BasicTestCase.prototype.testClientBasic = [function () {\n    this.subscription1 = this.assertSubscribeSuccessful('testDataPublish', 2, 0, this.expect());\n    this.subscription2 = this.assertSubscribeSuccessful('testDataPublish', 2, 1, this.expect());\n    this.subscription3 = this.assertSubscribeSuccessful('testDataPublish', 6, 0, this.expect());\n    return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish', 3, 0, this.expect());\n  }, function () {\n    var _this3 = this;\n\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.documents = [];\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect(function (error, documentId) {\n        _this3.assertFalse(error, error);\n\n        return _this3.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var _this4 = this;\n\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref) {\n      var i = _ref.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref2) {\n      var i = _ref2.i;\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref3) {\n      var i = _ref3.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref4) {\n      var i = _ref4.i;\n      return i % 3 === 0;\n    }));\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect(function (error, documentId) {\n        _this4.assertFalse(error, error);\n\n        return _this4.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref5) {\n      var i = _ref5.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref6) {\n      var i = _ref6.i;\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref7) {\n      var i = _ref7.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref8) {\n      var i = _ref8.i;\n      return i % 3 === 0;\n    }));\n    this.subscription2.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var fields;\n    fields = {\n      _id: 0,\n      i: 1\n    };\n    fields[\"_sub_\" + this.subscription1.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription2.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription3.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription4.subscriptionId] = 1;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref9) {\n      var i = _ref9.i;\n      return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref10) {\n      var i = _ref10.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref11) {\n      var i = _ref11.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref12) {\n      var i = _ref12.i;\n      return i % 3 === 0;\n    }));\n    this.subscription3.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref13) {\n      var i = _ref13.i;\n      return i % 2 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref14) {\n      var i = _ref14.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref15) {\n      var i = _ref15.i;\n      return i % 3 === 0;\n    }));\n  }];\n  BasicTestCase.prototype.testClientSearch = [function () {\n    return this.subscription = this.assertSubscribeSuccessful('searchDocuments', \"lorem\", this.expect());\n  }, function () {\n    var _sort, _ref16, _ref17;\n\n    return this.assertEqual(MyCollection.find({}, {\n      sort: (_sort = {}, _sort[\"score_\" + this.subscription.subscriptionId] = -1, _sort),\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [(_ref16 = {}, _ref16[\"score_\" + this.subscription.subscriptionId] = 0.625, _ref16.subject = \"lorem ipsum test string\", _ref16), (_ref17 = {}, _ref17[\"score_\" + this.subscription.subscriptionId] = 0.6, _ref17.subject = \"lorem ipsum dolor sit amet\", _ref17)]);\n  }, BasicTestCase.runOnServer(function () {\n    return MyCollection.insert({\n      subject: \"lorem ipsum\"\n    });\n  }), function () {\n    // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n    return Meteor.setTimeout(this.expect(), 1100); // ms\n  }, function () {\n    var _sort2, _ref18, _ref19, _ref20;\n\n    this.assertEqual(MyCollection.find({}, {\n      sort: (_sort2 = {}, _sort2[\"score_\" + this.subscription.subscriptionId] = -1, _sort2),\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [(_ref18 = {}, _ref18[\"score_\" + this.subscription.subscriptionId] = 0.75, _ref18.subject = \"lorem ipsum\", _ref18), (_ref19 = {}, _ref19[\"score_\" + this.subscription.subscriptionId] = 0.625, _ref19.subject = \"lorem ipsum test string\", _ref19), (_ref20 = {}, _ref20[\"score_\" + this.subscription.subscriptionId] = 0.6, _ref20.subject = \"lorem ipsum dolor sit amet\", _ref20)]);\n    return this.subscription.stop();\n  }];\n  return BasicTestCase;\n}();\n\nClassyTestCase.addTest(new BasicTestCase());","sourceMap":{"version":3,"sources":["/packages/peerlibrary_subscription-scope/tests.coffee","/tests.coffee"],"names":["BasicTestCase","MyCollection","TestDataCollection","Mongo","Collection","Meteor","isServer","methods","insertTest","obj","insert","updateTest","selector","query","update","removeTest","remove","publish","divisor","remainder","handle","enableScope","find","i","$mod","observeChanges","added","id","fields","changed","removed","onStop","stop","ready","_ensureIndex","subject","search","options","$text","$search","_subscriptionId","$meta","pollingIntervalMs","setUpServer","ClassyTestCase","testName","prototype","testClientBasic","subscription1","assertSubscribeSuccessful","expect","subscription2","subscription3","subscription4","doc","j","assertEqual","_id","sort","fetch","scopeQuery","documents","push","call","error","documentId","assertFalse","assertTrue","_","sortBy","setTimeout","filter","subscriptionId","testClientSearch","subscription","runOnServer","addTest"],"mappings":"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","file":"packages/peerlibrary:subscription-scope/tests.coffee.map","sourcesContent":["MyCollection = new Mongo.Collection 'MyCollection'\n\nif Meteor.isServer\n  TestDataCollection = new Mongo.Collection null\n\n  Meteor.methods\n    insertTest: (obj) ->\n      TestDataCollection.insert obj\n\n    updateTest: (selector, query) ->\n      TestDataCollection.update selector, query\n\n    removeTest: (selector) ->\n      TestDataCollection.remove selector\n\n  Meteor.publish 'testDataPublish', (divisor, remainder) ->\n    @enableScope()\n\n    handle = TestDataCollection.find({i: $mod: [divisor, remainder]}).observeChanges\n      added: (id, fields) =>\n        @added 'testDataCollection', id, fields\n      changed: (id, fields) =>\n        @changed 'testDataCollection', id, fields\n      removed: (id) =>\n        @removed 'testDataCollection', id\n\n    @onStop =>\n      handle.stop()\n\n    @ready()\n\n  MyCollection._ensureIndex\n    subject: 'text'\n\n  Meteor.publish 'searchDocuments', (search) ->\n    @enableScope()\n\n    query =\n      $text:\n        $search: search\n\n    options =\n      fields:\n        \"score_#{@_subscriptionId}\":\n          $meta: 'textScore'\n      pollingIntervalMs: 1000\n\n    MyCollection.find query, options\n\nelse\n  TestDataCollection = new Mongo.Collection 'testDataCollection'\n\nclass BasicTestCase extends ClassyTestCase\n  @testName: 'subscription-data - basic'\n\n  setUpServer: ->\n    TestDataCollection.remove {}\n    MyCollection.remove {}\n\n    MyCollection.insert\n      subject: \"foo bar test string\"\n    MyCollection.insert\n      subject: \"lorem ipsum test string\"\n    MyCollection.insert\n      subject: \"lorem ipsum dolor sit amet\"\n\n  testClientBasic: [\n    ->\n      @subscription1 = @assertSubscribeSuccessful 'testDataPublish', 2, 0, @expect()\n      @subscription2 = @assertSubscribeSuccessful 'testDataPublish', 2, 1, @expect()\n      @subscription3 = @assertSubscribeSuccessful 'testDataPublish', 6, 0, @expect()\n      @subscription4 = @assertSubscribeSuccessful 'testDataPublish', 3, 0, @expect()\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), []\n\n      @documents = []\n\n      for i in [0...10]\n        doc = {i: i}\n        @documents.push doc\n        Meteor.call 'insertTest', doc, @expect (error, documentId) =>\n          @assertFalse error, error\n          @assertTrue documentId\n\n      @documents = _.sortBy @documents, 'i'\n  ,\n    ->\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), @documents\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 1\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      for i in [0...10]\n        doc = {i: i}\n        @documents.push doc\n        Meteor.call 'insertTest', doc, @expect (error, documentId) =>\n          @assertFalse error, error\n          @assertTrue documentId\n\n      @documents = _.sortBy @documents, 'i'\n  ,\n    ->\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0}, sort: {i: 1}}).fetch(), @documents\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 1\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      @subscription2.stop()\n\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      fields = {_id: 0, i: 1}\n      fields[\"_sub_#{@subscription1.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription2.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription3.subscriptionId}\"] = 1\n      fields[\"_sub_#{@subscription4.subscriptionId}\"] = 1\n\n      @assertEqual TestDataCollection.find({}, {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0 or i % 6 is 0 or i % 3 is 0\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 6 is 0\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: fields, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n\n      @subscription3.stop()\n\n      # To wait a bit for change to propagate.\n      Meteor.setTimeout @expect(), 100 # ms\n  ,\n    ->\n      @assertEqual TestDataCollection.find({}, {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0 or i % 3 is 0\n      @assertEqual TestDataCollection.find(@subscription1.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 2 is 0\n      @assertEqual TestDataCollection.find(@subscription2.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription3.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), []\n      @assertEqual TestDataCollection.find(@subscription4.scopeQuery(), {fields: {_id: 0, i: 1}, sort: {i: 1}}).fetch(), _.filter @documents, ({i}) -> i % 3 is 0\n  ]\n\n  testClientSearch: [\n    ->\n      @subscription = @assertSubscribeSuccessful 'searchDocuments', \"lorem\", @expect()\n  ,\n    ->\n      @assertEqual MyCollection.find(\n        {}\n      ,\n        sort:\n          \"score_#{@subscription.subscriptionId}\": -1\n        fields:\n          _id: 0\n      ).fetch(), [\n        \"score_#{@subscription.subscriptionId}\": 0.625\n        subject: \"lorem ipsum test string\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.6\n        subject: \"lorem ipsum dolor sit amet\"\n      ]\n  ,\n    @runOnServer ->\n      MyCollection.insert\n        subject: \"lorem ipsum\"\n  ,\n    ->\n      # To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n      Meteor.setTimeout @expect(), 1100 # ms\n  ,\n    ->\n      @assertEqual MyCollection.find(\n        {}\n      ,\n        sort:\n          \"score_#{@subscription.subscriptionId}\": -1\n        fields:\n          _id: 0\n      ).fetch(), [\n        \"score_#{@subscription.subscriptionId}\": 0.75\n        subject: \"lorem ipsum\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.625\n        subject: \"lorem ipsum test string\"\n      ,\n        \"score_#{@subscription.subscriptionId}\": 0.6\n        subject: \"lorem ipsum dolor sit amet\"\n      ]\n\n      @subscription.stop()\n  ]\n\nClassyTestCase.addTest new BasicTestCase()\n","var BasicTestCase, MyCollection, TestDataCollection;\n\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function(obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function(selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function(selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function(divisor, remainder) {\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: (id, fields) => {\n        return this.added('testDataCollection', id, fields);\n      },\n      changed: (id, fields) => {\n        return this.changed('testDataCollection', id, fields);\n      },\n      removed: (id) => {\n        return this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(() => {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n  Meteor.publish('searchDocuments', function(search) {\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: {\n        [`score_${this._subscriptionId}`]: {\n          $meta: 'textScore'\n        }\n      },\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = (function() {\n  class BasicTestCase extends ClassyTestCase {\n    setUpServer() {\n      TestDataCollection.remove({});\n      MyCollection.remove({});\n      MyCollection.insert({\n        subject: \"foo bar test string\"\n      });\n      MyCollection.insert({\n        subject: \"lorem ipsum test string\"\n      });\n      return MyCollection.insert({\n        subject: \"lorem ipsum dolor sit amet\"\n      });\n    }\n\n  };\n\n  BasicTestCase.testName = 'subscription-data - basic';\n\n  BasicTestCase.prototype.testClientBasic = [\n    function() {\n      this.subscription1 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    0,\n    this.expect());\n      this.subscription2 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    1,\n    this.expect());\n      this.subscription3 = this.assertSubscribeSuccessful('testDataPublish',\n    6,\n    0,\n    this.expect());\n      return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish',\n    3,\n    0,\n    this.expect());\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.documents = [];\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription2.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var fields;\n      fields = {\n        _id: 0,\n        i: 1\n      };\n      fields[`_sub_${this.subscription1.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription2.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription3.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription4.subscriptionId}`] = 1;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription3.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n    }\n  ];\n\n  BasicTestCase.prototype.testClientSearch = [\n    function() {\n      return this.subscription = this.assertSubscribeSuccessful('searchDocuments',\n    \"lorem\",\n    this.expect());\n    },\n    function() {\n      return this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n    },\n    BasicTestCase.runOnServer(function() {\n      return MyCollection.insert({\n        subject: \"lorem ipsum\"\n      });\n    }),\n    function() {\n      // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n      return Meteor.setTimeout(this.expect(),\n    1100); // ms\n    },\n    function() {\n      this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.75,\n          subject: \"lorem ipsum\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n      return this.subscription.stop();\n    }\n  ];\n\n  return BasicTestCase;\n\n})();\n\nClassyTestCase.addTest(new BasicTestCase());\n"]}}