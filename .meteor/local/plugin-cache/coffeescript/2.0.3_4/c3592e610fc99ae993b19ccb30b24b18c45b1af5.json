{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/peerlibrary:subscription-scope/tests.coffee","filenameRelative":"packages/peerlibrary:subscription-scope/tests.coffee","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/peerlibrary:subscription-scope/tests.coffee.map","sourceFileName":"packages/peerlibrary:subscription-scope/tests.coffee","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"tests"},"ignored":false,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar BasicTestCase, MyCollection, TestDataCollection;\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function (obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function (selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function (selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function (divisor, remainder) {\n    var _this = this;\n\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: function (id, fields) {\n        return _this.added('testDataCollection', id, fields);\n      },\n      changed: function (id, fields) {\n        return _this.changed('testDataCollection', id, fields);\n      },\n      removed: function (id) {\n        return _this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(function () {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n\n  Meteor.publish('searchDocuments', function (search) {\n    var _fields;\n\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: (_fields = {}, _fields[\"score_\" + this._subscriptionId] = {\n        $meta: 'textScore'\n      }, _fields),\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = function () {\n  var BasicTestCase = function (_ClassyTestCase) {\n    _inherits(BasicTestCase, _ClassyTestCase);\n\n    function BasicTestCase() {\n      _classCallCheck(this, BasicTestCase);\n\n      return _possibleConstructorReturn(this, _ClassyTestCase.apply(this, arguments));\n    }\n\n    BasicTestCase.prototype.setUpServer = function () {\n      function setUpServer() {\n        TestDataCollection.remove({});\n        MyCollection.remove({});\n        MyCollection.insert({\n          subject: \"foo bar test string\"\n        });\n        MyCollection.insert({\n          subject: \"lorem ipsum test string\"\n        });\n        return MyCollection.insert({\n          subject: \"lorem ipsum dolor sit amet\"\n        });\n      }\n\n      return setUpServer;\n    }();\n\n    return BasicTestCase;\n  }(ClassyTestCase);\n\n  ;\n  BasicTestCase.testName = 'subscription-data - basic';\n  BasicTestCase.prototype.testClientBasic = [function () {\n    this.subscription1 = this.assertSubscribeSuccessful('testDataPublish', 2, 0, this.expect());\n    this.subscription2 = this.assertSubscribeSuccessful('testDataPublish', 2, 1, this.expect());\n    this.subscription3 = this.assertSubscribeSuccessful('testDataPublish', 6, 0, this.expect());\n    return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish', 3, 0, this.expect());\n  }, function () {\n    var _this3 = this;\n\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.documents = [];\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect(function (error, documentId) {\n        _this3.assertFalse(error, error);\n\n        return _this3.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var _this4 = this;\n\n    var doc, i, j;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref) {\n      var i = _ref.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref2) {\n      var i = _ref2.i;\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref3) {\n      var i = _ref3.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref4) {\n      var i = _ref4.i;\n      return i % 3 === 0;\n    }));\n\n    for (i = j = 0; j < 10; i = ++j) {\n      doc = {\n        i: i\n      };\n      this.documents.push(doc);\n      Meteor.call('insertTest', doc, this.expect(function (error, documentId) {\n        _this4.assertFalse(error, error);\n\n        return _this4.assertTrue(documentId);\n      }));\n    }\n\n    return this.documents = _.sortBy(this.documents, 'i');\n  }, function () {\n    // To wait a bit for change to propagate.\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), this.documents);\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref5) {\n      var i = _ref5.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref6) {\n      var i = _ref6.i;\n      return i % 2 === 1;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref7) {\n      var i = _ref7.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref8) {\n      var i = _ref8.i;\n      return i % 3 === 0;\n    }));\n    this.subscription2.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    var fields;\n    fields = {\n      _id: 0,\n      i: 1\n    };\n    fields[\"_sub_\" + this.subscription1.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription2.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription3.subscriptionId] = 1;\n    fields[\"_sub_\" + this.subscription4.subscriptionId] = 1;\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref9) {\n      var i = _ref9.i;\n      return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref10) {\n      var i = _ref10.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref11) {\n      var i = _ref11.i;\n      return i % 6 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: fields,\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref12) {\n      var i = _ref12.i;\n      return i % 3 === 0;\n    }));\n    this.subscription3.stop(); // To wait a bit for change to propagate.\n\n    return Meteor.setTimeout(this.expect(), 100); // ms\n  }, function () {\n    this.assertEqual(TestDataCollection.find({}, {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref13) {\n      var i = _ref13.i;\n      return i % 2 === 0 || i % 3 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref14) {\n      var i = _ref14.i;\n      return i % 2 === 0;\n    }));\n    this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), []);\n    return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(), {\n      fields: {\n        _id: 0,\n        i: 1\n      },\n      sort: {\n        i: 1\n      }\n    }).fetch(), _.filter(this.documents, function (_ref15) {\n      var i = _ref15.i;\n      return i % 3 === 0;\n    }));\n  }];\n  BasicTestCase.prototype.testClientSearch = [function () {\n    return this.subscription = this.assertSubscribeSuccessful('searchDocuments', \"lorem\", this.expect());\n  }, function () {\n    var _sort, _ref16, _ref17;\n\n    return this.assertEqual(MyCollection.find({}, {\n      sort: (_sort = {}, _sort[\"score_\" + this.subscription.subscriptionId] = -1, _sort),\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [(_ref16 = {}, _ref16[\"score_\" + this.subscription.subscriptionId] = 0.625, _ref16.subject = \"lorem ipsum test string\", _ref16), (_ref17 = {}, _ref17[\"score_\" + this.subscription.subscriptionId] = 0.6, _ref17.subject = \"lorem ipsum dolor sit amet\", _ref17)]);\n  }, BasicTestCase.runOnServer(function () {\n    return MyCollection.insert({\n      subject: \"lorem ipsum\"\n    });\n  }), function () {\n    // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n    return Meteor.setTimeout(this.expect(), 1100); // ms\n  }, function () {\n    var _sort2, _ref18, _ref19, _ref20;\n\n    this.assertEqual(MyCollection.find({}, {\n      sort: (_sort2 = {}, _sort2[\"score_\" + this.subscription.subscriptionId] = -1, _sort2),\n      fields: {\n        _id: 0\n      }\n    }).fetch(), [(_ref18 = {}, _ref18[\"score_\" + this.subscription.subscriptionId] = 0.75, _ref18.subject = \"lorem ipsum\", _ref18), (_ref19 = {}, _ref19[\"score_\" + this.subscription.subscriptionId] = 0.625, _ref19.subject = \"lorem ipsum test string\", _ref19), (_ref20 = {}, _ref20[\"score_\" + this.subscription.subscriptionId] = 0.6, _ref20.subject = \"lorem ipsum dolor sit amet\", _ref20)]);\n    return this.subscription.stop();\n  }];\n  return BasicTestCase;\n}();\n\nClassyTestCase.addTest(new BasicTestCase());","map":{"version":3,"sources":["packages/peerlibrary:subscription-scope/tests.coffee"],"names":["BasicTestCase","MyCollection","TestDataCollection","Mongo","Collection","Meteor","isServer","methods","insertTest","obj","insert","updateTest","selector","query","update","removeTest","remove","publish","divisor","remainder","handle","enableScope","find","i","$mod","observeChanges","added","id","fields","changed","removed","onStop","stop","ready","_ensureIndex","subject","search","options","$text","$search","_subscriptionId","$meta","pollingIntervalMs","setUpServer","ClassyTestCase","testName","prototype","testClientBasic","subscription1","assertSubscribeSuccessful","expect","subscription2","subscription3","subscription4","doc","j","assertEqual","_id","sort","fetch","scopeQuery","documents","push","call","error","documentId","assertFalse","assertTrue","_","sortBy","setTimeout","filter","subscriptionId","testClientSearch","subscription","runOnServer","addTest"],"mappings":"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","file":"packages/peerlibrary:subscription-scope/tests.coffee.map","sourcesContent":["var BasicTestCase, MyCollection, TestDataCollection;\n\nMyCollection = new Mongo.Collection('MyCollection');\n\nif (Meteor.isServer) {\n  TestDataCollection = new Mongo.Collection(null);\n  Meteor.methods({\n    insertTest: function(obj) {\n      return TestDataCollection.insert(obj);\n    },\n    updateTest: function(selector, query) {\n      return TestDataCollection.update(selector, query);\n    },\n    removeTest: function(selector) {\n      return TestDataCollection.remove(selector);\n    }\n  });\n  Meteor.publish('testDataPublish', function(divisor, remainder) {\n    var handle;\n    this.enableScope();\n    handle = TestDataCollection.find({\n      i: {\n        $mod: [divisor, remainder]\n      }\n    }).observeChanges({\n      added: (id, fields) => {\n        return this.added('testDataCollection', id, fields);\n      },\n      changed: (id, fields) => {\n        return this.changed('testDataCollection', id, fields);\n      },\n      removed: (id) => {\n        return this.removed('testDataCollection', id);\n      }\n    });\n    this.onStop(() => {\n      return handle.stop();\n    });\n    return this.ready();\n  });\n  MyCollection._ensureIndex({\n    subject: 'text'\n  });\n  Meteor.publish('searchDocuments', function(search) {\n    var options, query;\n    this.enableScope();\n    query = {\n      $text: {\n        $search: search\n      }\n    };\n    options = {\n      fields: {\n        [`score_${this._subscriptionId}`]: {\n          $meta: 'textScore'\n        }\n      },\n      pollingIntervalMs: 1000\n    };\n    return MyCollection.find(query, options);\n  });\n} else {\n  TestDataCollection = new Mongo.Collection('testDataCollection');\n}\n\nBasicTestCase = (function() {\n  class BasicTestCase extends ClassyTestCase {\n    setUpServer() {\n      TestDataCollection.remove({});\n      MyCollection.remove({});\n      MyCollection.insert({\n        subject: \"foo bar test string\"\n      });\n      MyCollection.insert({\n        subject: \"lorem ipsum test string\"\n      });\n      return MyCollection.insert({\n        subject: \"lorem ipsum dolor sit amet\"\n      });\n    }\n\n  };\n\n  BasicTestCase.testName = 'subscription-data - basic';\n\n  BasicTestCase.prototype.testClientBasic = [\n    function() {\n      this.subscription1 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    0,\n    this.expect());\n      this.subscription2 = this.assertSubscribeSuccessful('testDataPublish',\n    2,\n    1,\n    this.expect());\n      this.subscription3 = this.assertSubscribeSuccessful('testDataPublish',\n    6,\n    0,\n    this.expect());\n      return this.subscription4 = this.assertSubscribeSuccessful('testDataPublish',\n    3,\n    0,\n    this.expect());\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.documents = [];\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var doc,\n    i,\n    j;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      for (i = j = 0; j < 10; i = ++j) {\n        doc = {\n          i: i\n        };\n        this.documents.push(doc);\n        Meteor.call('insertTest',\n    doc,\n    this.expect((error,\n    documentId) => {\n          this.assertFalse(error,\n    error);\n          return this.assertTrue(documentId);\n        }));\n      }\n      return this.documents = _.sortBy(this.documents,\n    'i');\n    },\n    function() {\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    this.documents);\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 1;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription2.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      var fields;\n      fields = {\n        _id: 0,\n        i: 1\n      };\n      fields[`_sub_${this.subscription1.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription2.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription3.subscriptionId}`] = 1;\n      fields[`_sub_${this.subscription4.subscriptionId}`] = 1;\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 6 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 6 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: fields,\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n      this.subscription3.stop();\n      // To wait a bit for change to propagate.\n      return Meteor.setTimeout(this.expect(),\n    100); // ms\n    },\n    function() {\n      this.assertEqual(TestDataCollection.find({},\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0 || i % 3 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription1.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 2 === 0;\n      }));\n      this.assertEqual(TestDataCollection.find(this.subscription2.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      this.assertEqual(TestDataCollection.find(this.subscription3.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    []);\n      return this.assertEqual(TestDataCollection.find(this.subscription4.scopeQuery(),\n    {\n        fields: {\n          _id: 0,\n          i: 1\n        },\n        sort: {\n          i: 1\n        }\n      }).fetch(),\n    _.filter(this.documents,\n    function({i}) {\n        return i % 3 === 0;\n      }));\n    }\n  ];\n\n  BasicTestCase.prototype.testClientSearch = [\n    function() {\n      return this.subscription = this.assertSubscribeSuccessful('searchDocuments',\n    \"lorem\",\n    this.expect());\n    },\n    function() {\n      return this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n    },\n    BasicTestCase.runOnServer(function() {\n      return MyCollection.insert({\n        subject: \"lorem ipsum\"\n      });\n    }),\n    function() {\n      // To wait a bit for change to propagate. 1000 ms for polling + 100 ms extra.\n      return Meteor.setTimeout(this.expect(),\n    1100); // ms\n    },\n    function() {\n      this.assertEqual(MyCollection.find({},\n    {\n        sort: {\n          [`score_${this.subscription.subscriptionId}`]: -1\n        },\n        fields: {\n          _id: 0\n        }\n      }).fetch(),\n    [\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.75,\n          subject: \"lorem ipsum\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.625,\n          subject: \"lorem ipsum test string\"\n        },\n        {\n          [`score_${this.subscription.subscriptionId}`]: 0.6,\n          subject: \"lorem ipsum dolor sit amet\"\n        }\n      ]);\n      return this.subscription.stop();\n    }\n  ];\n\n  return BasicTestCase;\n\n})();\n\nClassyTestCase.addTest(new BasicTestCase());\n"]},"hash":"c3592e610fc99ae993b19ccb30b24b18c45b1af5"}
