{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/server/morpher/expose.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/morpher/expose.js"}},"code":"let check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet db;\nmodule.watch(require(\"meteor/cultofcoders:grapher\"), {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet load;\nmodule.watch(require(\"meteor/cultofcoders:apollo\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 2);\nlet setupDataFetching;\nmodule.watch(require(\"./setupDataFetching\"), {\n  default(v) {\n    setupDataFetching = v;\n  }\n\n}, 3);\nlet setupMutations;\nmodule.watch(require(\"./setupMutations\"), {\n  default(v) {\n    setupMutations = v;\n  }\n\n}, 4);\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction\n  });\n  const newObject = Object.assign({\n    subscription: true\n  }, object);\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(`You have already exposed ${name} somewhere else. Please make sure they do not collide.`);\n    }\n\n    exposedNames.push(name);\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const {\n    collection,\n    type\n  } = config;\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let {\n      MutationType,\n      Mutation\n    } = setupMutations(config, name, type, collection);\n    MutationType = `type Mutation { ${MutationType} }`;\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: {\n        Mutation\n      }\n    });\n  }\n\n  if (config.find) {\n    let {\n      QueryType,\n      Query\n    } = setupDataFetching(config, name, type, collection);\n    QueryType = `type Query { ${QueryType} }`;\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: {\n        Query\n      }\n    });\n  }\n\n  return modules;\n}\n\nmodule.exportDefault(morph);","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/morpher/expose.js"],"names":["check","Match","module","watch","require","v","db","load","setupDataFetching","default","setupMutations","MaybeBoolOrFunction","Maybe","OneOf","Boolean","Function","getConfig","object","type","String","collection","update","insert","remove","find","newObject","Object","assign","subscription","exposedNames","morph","config","name","includes","Error","push","singleConfig","modules","exposeSingle","MutationType","Mutation","typeDefs","resolvers","QueryType","Query","exportDefault"],"mappings":"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","sourcesContent":["import { check, Match } from 'meteor/check';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { load } from 'meteor/cultofcoders:apollo';\nimport setupDataFetching from './setupDataFetching';\nimport setupMutations from './setupMutations';\n\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction,\n  });\n\n  const newObject = Object.assign(\n    {\n      subscription: true,\n    },\n    object\n  );\n\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(\n        `You have already exposed ${name} somewhere else. Please make sure they do not collide.`\n      );\n    }\n    exposedNames.push(name);\n\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const { collection, type } = config;\n\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let { MutationType, Mutation } = setupMutations(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    MutationType = `type Mutation { ${MutationType} }`;\n\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: { Mutation },\n    });\n  }\n\n  if (config.find) {\n    let { QueryType, Query } = setupDataFetching(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    QueryType = `type Query { ${QueryType} }`;\n\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: { Query },\n    });\n  }\n\n  return modules;\n}\n\nexport default morph;\n"]},"sourceType":"script","hash":"d634e0f965b41fcaddb073c4e81c06bb93a96d7b"}
