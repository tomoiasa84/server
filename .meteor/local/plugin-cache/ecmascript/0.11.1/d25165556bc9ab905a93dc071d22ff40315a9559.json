{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js"}},"code":"module.export({\n  default: () => embedReducerWithLink\n});\nlet handleAddField, handleAddElement, handleAddReducer;\nmodule.watch(require(\"./createReducers\"), {\n  handleAddField(v) {\n    handleAddField = v;\n  },\n\n  handleAddElement(v) {\n    handleAddElement = v;\n  },\n\n  handleAddReducer(v) {\n    handleAddReducer = v;\n  }\n\n}, 0);\n\nfunction embedReducerWithLink(reducerBody, collectionNode) {\n  _.each(reducerBody, (value, key) => {\n    const collection = collectionNode.collection;\n\n    if (_.isObject(value)) {\n      // nested field or link\n      if (collectionNode.body[key]) {\n        // if it exists\n        const linker = collection.getLinker(key); // if it's a link\n\n        if (linker) {\n          if (linker.isDenormalized()) {\n            if (linker.isSubBodyDenormalized(value)) {\n              const cacheField = linker.linkConfig.denormalize.field;\n              handleAddField(cacheField, value, collectionNode);\n              return;\n            }\n          }\n\n          embedReducerWithLink(value, collectionNode.getCollectionNode(key));\n          return;\n        }\n\n        handleAddField(key, value, collectionNode);\n      } else {\n        // does not exist, so it may be a link/reducer/field\n        handleAddElement(collectionNode, key, value);\n      }\n    } else {\n      // if this field or other reducer exists within the collection\n      if (!collectionNode.body[key]) {\n        // can only be field or another reducer for this.\n        const reducer = collection.getReducer(key);\n\n        if (reducer) {\n          // if it's another reducer\n          return handleAddReducer(key, reducer, collectionNode);\n        }\n\n        return handleAddField(key, value, collectionNode);\n      }\n    }\n  });\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/reducers/lib/embedReducerWithLink.js"],"names":["module","export","default","embedReducerWithLink","handleAddField","handleAddElement","handleAddReducer","watch","require","v","reducerBody","collectionNode","_","each","value","key","collection","isObject","body","linker","getLinker","isDenormalized","isSubBodyDenormalized","cacheField","linkConfig","denormalize","field","getCollectionNode","reducer","getReducer"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIC;AAAb,CAAd;AAAkD,IAAIC,cAAJ,EAAmBC,gBAAnB,EAAoCC,gBAApC;AAAqDN,OAAOO,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACJ,iBAAeK,CAAf,EAAiB;AAACL,qBAAeK,CAAf;AAAiB,GAApC;;AAAqCJ,mBAAiBI,CAAjB,EAAmB;AAACJ,uBAAiBI,CAAjB;AAAmB,GAA5E;;AAA6EH,mBAAiBG,CAAjB,EAAmB;AAACH,uBAAiBG,CAAjB;AAAmB;;AAApH,CAAzC,EAA+J,CAA/J;;AAOxF,SAASN,oBAAT,CAA8BO,WAA9B,EAA2CC,cAA3C,EAA2D;AACtEC,IAAEC,IAAF,CAAOH,WAAP,EAAoB,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAChC,UAAMC,aAAaL,eAAeK,UAAlC;;AAEA,QAAIJ,EAAEK,QAAF,CAAWH,KAAX,CAAJ,EAAuB;AACnB;AACA,UAAIH,eAAeO,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;AAC1B;AACA,cAAMI,SAASH,WAAWI,SAAX,CAAqBL,GAArB,CAAf,CAF0B,CAI1B;;AACA,YAAII,MAAJ,EAAY;AACR,cAAIA,OAAOE,cAAP,EAAJ,EAA6B;AACzB,gBAAIF,OAAOG,qBAAP,CAA6BR,KAA7B,CAAJ,EAAyC;AACrC,oBAAMS,aAAaJ,OAAOK,UAAP,CAAkBC,WAAlB,CAA8BC,KAAjD;AACAtB,6BAAemB,UAAf,EAA2BT,KAA3B,EAAkCH,cAAlC;AACA;AACH;AACJ;;AAEDR,+BAAqBW,KAArB,EAA4BH,eAAegB,iBAAf,CAAiCZ,GAAjC,CAA5B;AACA;AACH;;AAEDX,uBAAeW,GAAf,EAAoBD,KAApB,EAA2BH,cAA3B;AACH,OAnBD,MAmBO;AACH;AACAN,yBAAiBM,cAAjB,EAAiCI,GAAjC,EAAsCD,KAAtC;AACH;AACJ,KAzBD,MAyBO;AACH;AAEA,UAAI,CAACH,eAAeO,IAAf,CAAoBH,GAApB,CAAL,EAA+B;AAC3B;AACA,cAAMa,UAAUZ,WAAWa,UAAX,CAAsBd,GAAtB,CAAhB;;AACA,YAAIa,OAAJ,EAAa;AACT;AACA,iBAAOtB,iBAAiBS,GAAjB,EAAsBa,OAAtB,EAA+BjB,cAA/B,CAAP;AACH;;AAED,eAAOP,eAAeW,GAAf,EAAoBD,KAApB,EAA2BH,cAA3B,CAAP;AACH;AACJ;AACJ,GA1CD;AA2CH","sourcesContent":["import {handleAddField, handleAddElement, handleAddReducer} from './createReducers';\n\n/**\n * Embeds the reducer body with a collection body\n * @param reducerBody\n * @param collectionNode\n */\nexport default function embedReducerWithLink(reducerBody, collectionNode) {\n    _.each(reducerBody, (value, key) => {\n        const collection = collectionNode.collection;\n\n        if (_.isObject(value)) {\n            // nested field or link\n            if (collectionNode.body[key]) {\n                // if it exists\n                const linker = collection.getLinker(key);\n\n                // if it's a link\n                if (linker) {\n                    if (linker.isDenormalized()) {\n                        if (linker.isSubBodyDenormalized(value)) {\n                            const cacheField = linker.linkConfig.denormalize.field;\n                            handleAddField(cacheField, value, collectionNode);\n                            return;\n                        }\n                    }\n\n                    embedReducerWithLink(value, collectionNode.getCollectionNode(key));\n                    return;\n                }\n\n                handleAddField(key, value, collectionNode);\n            } else {\n                // does not exist, so it may be a link/reducer/field\n                handleAddElement(collectionNode, key, value);\n            }\n        } else {\n            // if this field or other reducer exists within the collection\n\n            if (!collectionNode.body[key]) {\n                // can only be field or another reducer for this.\n                const reducer = collection.getReducer(key);\n                if (reducer) {\n                    // if it's another reducer\n                    return handleAddReducer(key, reducer, collectionNode);\n                }\n\n                return handleAddField(key, value, collectionNode);\n            }\n        }\n    })\n}"]},"sourceType":"script","hash":"d25165556bc9ab905a93dc071d22ff40315a9559"}
