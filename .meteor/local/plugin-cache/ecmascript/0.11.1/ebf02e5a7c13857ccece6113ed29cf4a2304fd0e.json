{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"}},"code":"module.export({\n  default: () => CollectionNode\n});\nlet FieldNode;\nmodule.watch(require(\"./fieldNode.js\"), {\n  default(v) {\n    FieldNode = v;\n  }\n\n}, 0);\nlet ReducerNode;\nmodule.watch(require(\"./reducerNode.js\"), {\n  default(v) {\n    ReducerNode = v;\n  }\n\n}, 1);\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 2);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\n\nclass CollectionNode {\n  constructor(collection, body = {}, linkName = null) {\n    if (collection && !_.isObject(body)) {\n      throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n    }\n\n    this.body = deepClone(body);\n    this.linkName = linkName;\n    this.collection = collection;\n    this.nodes = [];\n    this.props = {};\n    this.parent = null;\n    this.linker = null;\n    this.linkStorageField = null;\n    this.scheduledForDeletion = false;\n    this.reducers = [];\n    this.results = [];\n    this.snapCaches = {}; // {cacheField: linkName}\n\n    this.snapCachesSingles = []; // [cacheField1, cacheField2]\n  }\n\n  get collectionNodes() {\n    return _.filter(this.nodes, n => n instanceof CollectionNode);\n  }\n\n  get fieldNodes() {\n    return _.filter(this.nodes, n => n instanceof FieldNode);\n  }\n\n  get reducerNodes() {\n    return _.filter(this.nodes, n => n instanceof ReducerNode);\n  }\n  /**\n   * Adds children to itself\n   *\n   * @param node\n   * @param linker\n   */\n\n\n  add(node, linker) {\n    node.parent = this;\n\n    if (linker) {\n      node.linker = linker;\n      node.linkStorageField = linker.linkStorageField;\n      node.isMeta = linker.isMeta();\n      node.isVirtual = linker.isVirtual();\n      node.isOneResult = linker.isOneResult();\n      node.shouldCleanStorage = this._shouldCleanStorage(node);\n    }\n\n    this.nodes.push(node);\n  }\n  /**\n   * @param prop\n   * @param value\n   */\n\n\n  addProp(prop, value) {\n    if (prop === '$postFilter') {\n      check(value, Match.OneOf(Function, [Function]));\n    }\n\n    _.extend(this.props, {\n      [prop]: value\n    });\n  }\n  /**\n   * @param _node\n   */\n\n\n  remove(_node) {\n    this.nodes = _.filter(this.nodes, node => _node !== node);\n  }\n  /**\n   * @param filters\n   * @param options\n   */\n\n\n  applyFields(filters, options) {\n    let hasAddedAnyField = false;\n\n    _.each(this.fieldNodes, n => {\n      hasAddedAnyField = true;\n      n.applyFields(options.fields);\n    }); // it will only get here if it has collectionNodes children\n\n\n    _.each(this.collectionNodes, collectionNode => {\n      let linker = collectionNode.linker;\n\n      if (linker && !linker.isVirtual()) {\n        options.fields[linker.linkStorageField] = 1;\n        hasAddedAnyField = true;\n      }\n    }); // if he selected filters, we should automatically add those fields\n\n\n    _.each(filters, (value, field) => {\n      // special handling for the $meta filter and conditional operators\n      if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n        // if the field or the parent of the field already exists, don't add it\n        if (!_.has(options.fields, field.split('.')[0])) {\n          hasAddedAnyField = true;\n          options.fields[field] = 1;\n        }\n      }\n    });\n\n    if (!hasAddedAnyField) {\n      options.fields = {\n        _id: 1\n      };\n    }\n  }\n  /**\n   * @param fieldName\n   * @returns {boolean}\n   */\n\n\n  hasField(fieldName) {\n    return !!_.find(this.fieldNodes, fieldNode => {\n      return fieldNode.name == fieldName;\n    });\n  }\n  /**\n   * @param fieldName\n   * @returns {FieldNode}\n   */\n\n\n  getField(fieldName) {\n    return _.find(this.fieldNodes, fieldNode => {\n      return fieldNode.name == fieldName;\n    });\n  }\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  hasCollectionNode(name) {\n    return !!_.find(this.collectionNodes, node => {\n      return node.linkName == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  hasReducerNode(name) {\n    return !!_.find(this.reducerNodes, node => {\n      return node.name == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {ReducerNode}\n   */\n\n\n  getReducerNode(name) {\n    return _.find(this.reducerNodes, node => {\n      return node.name == name;\n    });\n  }\n  /**\n   * @param name\n   * @returns {CollectionNode}\n   */\n\n\n  getCollectionNode(name) {\n    return _.find(this.collectionNodes, node => {\n      return node.linkName == name;\n    });\n  }\n  /**\n   * @returns {*}\n   */\n\n\n  getName() {\n    return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n  }\n  /**\n   * This is used for caching links\n   *\n   * @param cacheField\n   * @param subLinkName\n   */\n\n\n  snapCache(cacheField, subLinkName) {\n    this.snapCaches[cacheField] = subLinkName;\n\n    if (this.collection.getLinker(subLinkName).isOneResult()) {\n      this.snapCachesSingles.push(cacheField);\n    }\n  }\n  /**\n   * This method verifies whether to remove the linkStorageField form the results\n   * unless you specify it in your query.\n   *\n   * @param node\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _shouldCleanStorage(node) {\n    if (node.linkStorageField === '_id') {\n      return false;\n    } else {\n      if (node.isVirtual) {\n        return !node.hasField(node.linkStorageField);\n      } else {\n        return !this.hasField(node.linkStorageField);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","default","CollectionNode","FieldNode","watch","require","v","ReducerNode","deepClone","check","Match","constructor","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","collectionNodes","filter","n","fieldNodes","reducerNodes","add","node","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","extend","remove","_node","applyFields","filters","options","hasAddedAnyField","each","fields","collectionNode","field","contains","has","split","_id","hasField","fieldName","find","fieldNode","name","getField","hasCollectionNode","hasReducerNode","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {_id: 1};\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n}\n"]},"sourceType":"script","hash":"ebf02e5a7c13857ccece6113ed29cf4a2304fd0e"}
