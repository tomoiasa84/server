{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js"}},"code":"let sift;\nmodule.watch(require(\"sift\"), {\n  default(v) {\n    sift = v;\n  }\n\n}, 0);\nlet cleanObjectForMetaFilters;\nmodule.watch(require(\"./lib/cleanObjectForMetaFilters\"), {\n  default(v) {\n    cleanObjectForMetaFilters = v;\n  }\n\n}, 1);\nmodule.exportDefault(function (childCollectionNode, aggregateResults, metaFilters) {\n  const linker = childCollectionNode.linker;\n  const linkStorageField = linker.linkStorageField;\n  const linkName = childCollectionNode.linkName;\n  const isMeta = linker.isMeta();\n  const isMany = linker.isMany();\n  let allResults = [];\n\n  if (isMeta && metaFilters) {\n    const metaFiltersTest = sift(metaFilters);\n\n    _.each(childCollectionNode.parent.results, parentResult => {\n      cleanObjectForMetaFilters(parentResult, linkStorageField, metaFiltersTest);\n    });\n  }\n\n  if (isMeta && isMany) {\n    // This case is treated differently because we get an array response from the pipeline.\n    _.each(childCollectionNode.parent.results, parentResult => {\n      parentResult[linkName] = parentResult[linkName] || [];\n\n      const eligibleAggregateResults = _.filter(aggregateResults, aggregateResult => {\n        return _.contains(aggregateResult._id, parentResult._id);\n      });\n\n      if (eligibleAggregateResults.length) {\n        const datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]\n\n\n        _.each(datas, data => {\n          _.each(data, item => {\n            parentResult[linkName].push(item);\n          });\n        });\n      }\n    });\n\n    _.each(aggregateResults, aggregateResult => {\n      _.each(aggregateResult.data, item => allResults.push(item));\n    });\n  } else {\n    let comparator;\n\n    if (isMany) {\n      comparator = (aggregateResult, result) => _.contains(aggregateResult._id, result._id);\n    } else {\n      comparator = (aggregateResult, result) => aggregateResult._id == result._id;\n    }\n\n    const childLinkName = childCollectionNode.linkName;\n    const parentResults = childCollectionNode.parent.results;\n    parentResults.forEach(parentResult => {\n      // We are now finding the data from the pipeline that is related to the _id of the parent\n      const eligibleAggregateResults = aggregateResults.filter(aggregateResult => comparator(aggregateResult, parentResult));\n      eligibleAggregateResults.forEach(aggregateResult => {\n        if (Array.isArray(parentResult[childLinkName])) {\n          parentResult[childLinkName].push(...aggregateResult.data);\n        } else {\n          parentResult[childLinkName] = [...aggregateResult.data];\n        }\n      });\n    });\n    aggregateResults.forEach(aggregateResult => {\n      allResults.push(...aggregateResult.data);\n    });\n  }\n\n  childCollectionNode.results = allResults;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js"],"names":["sift","module","watch","require","default","v","cleanObjectForMetaFilters","exportDefault","childCollectionNode","aggregateResults","metaFilters","linker","linkStorageField","linkName","isMeta","isMany","allResults","metaFiltersTest","_","each","parent","results","parentResult","eligibleAggregateResults","filter","aggregateResult","contains","_id","length","datas","pluck","data","item","push","comparator","result","childLinkName","parentResults","forEach","Array","isArray"],"mappings":"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","sourcesContent":["import sift from 'sift';\nimport cleanObjectForMetaFilters from './lib/cleanObjectForMetaFilters';\n\n/**\n * This only applies to inversed links. It will assemble the data in a correct manner.\n */\nexport default function(childCollectionNode, aggregateResults, metaFilters) {\n    const linker = childCollectionNode.linker;\n    const linkStorageField = linker.linkStorageField;\n    const linkName = childCollectionNode.linkName;\n    const isMeta = linker.isMeta();\n    const isMany = linker.isMany();\n\n    let allResults = [];\n\n    if (isMeta && metaFilters) {\n        const metaFiltersTest = sift(metaFilters);\n        _.each(childCollectionNode.parent.results, parentResult => {\n            cleanObjectForMetaFilters(\n                parentResult,\n                linkStorageField,\n                metaFiltersTest\n            );\n        });\n    }\n\n    if (isMeta && isMany) {\n        // This case is treated differently because we get an array response from the pipeline.\n\n        _.each(childCollectionNode.parent.results, parentResult => {\n            parentResult[linkName] = parentResult[linkName] || [];\n\n            const eligibleAggregateResults = _.filter(\n                aggregateResults,\n                aggregateResult => {\n                    return _.contains(aggregateResult._id, parentResult._id);\n                }\n            );\n\n            if (eligibleAggregateResults.length) {\n                const datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]\n\n                _.each(datas, data => {\n                    _.each(data, item => {\n                        parentResult[linkName].push(item);\n                    });\n                });\n            }\n        });\n\n        _.each(aggregateResults, aggregateResult => {\n            _.each(aggregateResult.data, item => allResults.push(item));\n        });\n    } else {\n        let comparator;\n        if (isMany) {\n            comparator = (aggregateResult, result) =>\n                _.contains(aggregateResult._id, result._id);\n        } else {\n            comparator = (aggregateResult, result) =>\n                aggregateResult._id == result._id;\n        }\n\n        const childLinkName = childCollectionNode.linkName;\n        const parentResults = childCollectionNode.parent.results;\n\n        parentResults.forEach(parentResult => {\n            // We are now finding the data from the pipeline that is related to the _id of the parent\n            const eligibleAggregateResults = aggregateResults.filter(\n                aggregateResult => comparator(aggregateResult, parentResult)\n            );\n\n            eligibleAggregateResults.forEach(aggregateResult => {\n                if (Array.isArray(parentResult[childLinkName])) {\n                    parentResult[childLinkName].push(...aggregateResult.data);\n                } else {\n                    parentResult[childLinkName] = [...aggregateResult.data];\n                }\n            });\n        });\n\n        aggregateResults.forEach(aggregateResult => {\n            allResults.push(...aggregateResult.data);\n        });\n    }\n\n    childCollectionNode.results = allResults;\n}\n"]},"sourceType":"script","hash":"09049c2b18ffa425f4d92003d33445b5bd0161cc"}
