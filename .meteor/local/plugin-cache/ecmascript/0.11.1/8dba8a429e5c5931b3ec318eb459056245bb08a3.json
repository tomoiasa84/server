{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/morpher/setupDataFetching.js"}},"code":"module.export({\n  default: () => setupDataFetching\n});\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\n\nfunction setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n  QueryType += `\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${name}Single(payload: String!): ${type}\n  `; // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, {\n    params\n  }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign({\n        filters: {},\n        options: {}\n      }, params);\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {}\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, {\n    payload\n  }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, {\n      params\n    }, ctx, ast);\n    return collection().astToQuery(ast, astToQueryOptions).fetch();\n  };\n\n  Query = {\n    [name]: fn,\n\n    [name + 'Count'](_, {\n      payload\n    }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, {\n        params\n      }, ctx, ast);\n      return collection().find(astToQueryOptions.$filters || {}).count();\n    },\n\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    }\n\n  };\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n           if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n           const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return {\n    QueryType,\n    SubscriptionType,\n    Query,\n    Subscription\n  };\n}","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/morpher/setupDataFetching.js"],"names":["module","export","default","setupDataFetching","EJSON","watch","require","v","config","name","type","collection","Query","QueryType","Subscription","SubscriptionType","resolveSelectors","_","params","ctx","ast","astToQueryOptions","find","Object","assign","filters","options","call","Error","undefined","$filters","$options","fn","payload","parse","astToQuery","fetch","count","args","result"],"mappings":"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","sourcesContent":["import { EJSON } from 'meteor/ejson';\n\nexport default function setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n\n  QueryType += `\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${name}Single(payload: String!): ${type}\n  `;\n\n  // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, { params }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign(\n        {\n          filters: {},\n          options: {},\n        },\n        params\n      );\n\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {},\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, { payload }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n    return collection()\n      .astToQuery(ast, astToQueryOptions)\n      .fetch();\n  };\n\n  Query = {\n    [name]: fn,\n    [name + 'Count'](_, { payload }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n      return collection()\n        .find(astToQueryOptions.$filters || {})\n        .count();\n    },\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    },\n  };\n\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n\n          if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n\n          const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return { QueryType, SubscriptionType, Query, Subscription };\n}\n"]},"sourceType":"script","hash":"8dba8a429e5c5931b3ec318eb459056245bb08a3"}
