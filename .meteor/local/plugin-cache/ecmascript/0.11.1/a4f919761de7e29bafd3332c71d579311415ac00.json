{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"}},"code":"module.export({\n  \"default\": function () {\n    return CountSubscription;\n  }\n});\nvar EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 0);\nvar Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar ReactiveVar;\nmodule.watch(require(\"meteor/reactive-var\"), {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 2);\nvar Tracker;\nmodule.watch(require(\"meteor/tracker\"), {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 3);\nvar Counts;\nmodule.watch(require(\"./collection\"), {\n  \"default\": function (v) {\n    Counts = v;\n  }\n}, 4);\nvar createFauxSubscription;\nmodule.watch(require(\"./createFauxSubscription\"), {\n  \"default\": function (v) {\n    createFauxSubscription = v;\n  }\n}, 5);\nvar prepareForProcess;\nmodule.watch(require(\"../lib/prepareForProcess.js\"), {\n  \"default\": function (v) {\n    prepareForProcess = v;\n  }\n}, 6);\nvar NamedQueryBase;\nmodule.watch(require(\"../../namedQuery/namedQuery.base\"), {\n  \"default\": function (v) {\n    NamedQueryBase = v;\n  }\n}, 7);\n\nvar CountSubscription =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {*} query - The query to use when fetching counts\n   */\n  function CountSubscription(query) {\n    this.accessToken = new ReactiveVar(null);\n    this.fauxHandle = null;\n    this.query = query;\n  }\n  /**\n   * Starts a subscription request for reactive counts.\n   *\n   * @param {*} arg - The argument to pass to {name}.count.subscribe\n   * @param {*} callback\n   */\n\n\n  var _proto = CountSubscription.prototype;\n\n  _proto.subscribe = function () {\n    function subscribe(arg, callback) {\n      var _this = this;\n\n      // Don't try to resubscribe if arg hasn't changed\n      if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n        return this.fauxHandle;\n      }\n\n      this.accessToken.set(null);\n      this.lastArgs = arg;\n      Meteor.call(this.query.name + '.count.subscribe', arg, function (error, token) {\n        if (!_this._markedForUnsubscribe) {\n          _this.subscriptionHandle = Meteor.subscribe(_this.query.name + '.count', token, callback);\n\n          _this.accessToken.set(token);\n\n          _this.disconnectComputation = Tracker.autorun(function () {\n            return _this.handleDisconnect();\n          });\n        }\n\n        _this._markedForUnsubscribe = false;\n      });\n      this.fauxHandle = createFauxSubscription(this);\n      return this.fauxHandle;\n    }\n\n    return subscribe;\n  }();\n  /**\n   * Unsubscribes from the count endpoint, if there is such a subscription.\n   */\n\n\n  _proto.unsubscribe = function () {\n    function unsubscribe() {\n      if (this.subscriptionHandle) {\n        this.disconnectComputation.stop();\n        this.subscriptionHandle.stop();\n      } else {\n        // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n        // so set a flag to stop the subscription from being created\n        this._markedForUnsubscribe = true;\n      }\n\n      this.accessToken.set(null);\n      this.fauxHandle = null;\n      this.subscriptionHandle = null;\n    }\n\n    return unsubscribe;\n  }();\n  /**\n   * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n   *\n   * @returns {Number|null} - Current document count\n   */\n\n\n  _proto.getCount = function () {\n    function getCount() {\n      var id = this.accessToken.get();\n      if (id === null) return null;\n      var doc = Counts.findOne(id);\n      return doc.count;\n    }\n\n    return getCount;\n  }();\n  /**\n   * All session info gets deleted when the server goes down, so when the client attempts to\n   * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n   *\n   * This function prevents that by manually stopping and restarting the subscription when the\n   * connection to the server is lost.\n   */\n\n\n  _proto.handleDisconnect = function () {\n    function handleDisconnect() {\n      var status = Meteor.status();\n\n      if (!status.connected) {\n        this._markedForResume = true;\n        this.fauxHandle = null;\n        this.subscriptionHandle.stop();\n      }\n\n      if (status.connected && this._markedForResume) {\n        this._markedForResume = false;\n        this.subscribe(this.lastArgs);\n      }\n    }\n\n    return handleDisconnect;\n  }();\n  /**\n   * Returns whether or not a subscription request has been made.\n   */\n\n\n  _proto.isSubscribed = function () {\n    function isSubscribed() {\n      return this.accessToken.get() !== null;\n    }\n\n    return isSubscribed;\n  }();\n\n  return CountSubscription;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"],"names":["module","export","CountSubscription","EJSON","watch","require","v","Meteor","ReactiveVar","Tracker","Counts","createFauxSubscription","prepareForProcess","NamedQueryBase","query","accessToken","fauxHandle","subscribe","arg","callback","equals","lastArgs","set","call","name","error","token","_markedForUnsubscribe","subscriptionHandle","disconnectComputation","autorun","handleDisconnect","unsubscribe","stop","getCount","id","get","doc","findOne","count","status","connected","_markedForResume","isSubscribed"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,iBAAJ;AAAA;AAAT,CAAd;AAA+C,IAAIC,KAAJ;AAAUH,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACF,OAAD,YAAOG,CAAP,EAAS;AAACH,YAAMG,CAAN;AAAQ;AAAlB,CAArC,EAAyD,CAAzD;AAA4D,IAAIC,MAAJ;AAAWP,OAAOI,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,QAAD,YAAQD,CAAR,EAAU;AAACC,aAAOD,CAAP;AAAS;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,WAAJ;AAAgBR,OAAOI,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACG,aAAD,YAAaF,CAAb,EAAe;AAACE,kBAAYF,CAAZ;AAAc;AAA9B,CAA5C,EAA4E,CAA5E;AAA+E,IAAIG,OAAJ;AAAYT,OAAOI,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACI,SAAD,YAASH,CAAT,EAAW;AAACG,cAAQH,CAAR;AAAU;AAAtB,CAAvC,EAA+D,CAA/D;AAAkE,IAAII,MAAJ;AAAWV,OAAOI,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAA,uBAASC,CAAT,EAAW;AAACI,aAAOJ,CAAP;AAAS;AAArB,CAArC,EAA4D,CAA5D;AAA+D,IAAIK,sBAAJ;AAA2BX,OAAOI,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAAA,uBAASC,CAAT,EAAW;AAACK,6BAAuBL,CAAvB;AAAyB;AAArC,CAAjD,EAAwF,CAAxF;AAA2F,IAAIM,iBAAJ;AAAsBZ,OAAOI,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA,uBAASC,CAAT,EAAW;AAACM,wBAAkBN,CAAlB;AAAoB;AAAhC,CAApD,EAAsF,CAAtF;AAAyF,IAAIO,cAAJ;AAAmBb,OAAOI,KAAP,CAAaC,QAAQ,kCAAR,CAAb,EAAyD;AAAA,uBAASC,CAAT,EAAW;AAACO,qBAAeP,CAAf;AAAiB;AAA7B,CAAzD,EAAwF,CAAxF;;IAUzpBJ,iB;;;AACjB;;;AAGA,6BAAYY,KAAZ,EAAmB;AACf,SAAKC,WAAL,GAAmB,IAAIP,WAAJ,CAAgB,IAAhB,CAAnB;AACA,SAAKQ,UAAL,GAAkB,IAAlB;AACA,SAAKF,KAAL,GAAaA,KAAb;AACH;AAED;;;;;;;;;;SAMAG,S;uBAAUC,G,EAAKC,Q,EAAU;AAAA;;AACrB;AACA,UAAIhB,MAAMiB,MAAN,CAAa,KAAKC,QAAlB,EAA4BH,GAA5B,KAAoC,KAAKF,UAA7C,EAAyD;AACrD,eAAO,KAAKA,UAAZ;AACH;;AAED,WAAKD,WAAL,CAAiBO,GAAjB,CAAqB,IAArB;AACA,WAAKD,QAAL,GAAgBH,GAAhB;AAEAX,aAAOgB,IAAP,CAAY,KAAKT,KAAL,CAAWU,IAAX,GAAkB,kBAA9B,EAAkDN,GAAlD,EAAuD,UAACO,KAAD,EAAQC,KAAR,EAAkB;AACrE,YAAI,CAAC,MAAKC,qBAAV,EAAiC;AAC7B,gBAAKC,kBAAL,GAA0BrB,OAAOU,SAAP,CAAiB,MAAKH,KAAL,CAAWU,IAAX,GAAkB,QAAnC,EAA6CE,KAA7C,EAAoDP,QAApD,CAA1B;;AACA,gBAAKJ,WAAL,CAAiBO,GAAjB,CAAqBI,KAArB;;AAEA,gBAAKG,qBAAL,GAA6BpB,QAAQqB,OAAR,CAAgB;AAAA,mBAAM,MAAKC,gBAAL,EAAN;AAAA,WAAhB,CAA7B;AACH;;AAED,cAAKJ,qBAAL,GAA6B,KAA7B;AACH,OATD;AAWA,WAAKX,UAAL,GAAkBL,uBAAuB,IAAvB,CAAlB;AACA,aAAO,KAAKK,UAAZ;AACH;;;;AAED;;;;;SAGAgB,W;2BAAc;AACV,UAAI,KAAKJ,kBAAT,EAA6B;AACzB,aAAKC,qBAAL,CAA2BI,IAA3B;AACA,aAAKL,kBAAL,CAAwBK,IAAxB;AACH,OAHD,MAGO;AACH;AACA;AACA,aAAKN,qBAAL,GAA6B,IAA7B;AACH;;AAED,WAAKZ,WAAL,CAAiBO,GAAjB,CAAqB,IAArB;AACA,WAAKN,UAAL,GAAkB,IAAlB;AACA,WAAKY,kBAAL,GAA0B,IAA1B;AACH;;;;AAED;;;;;;;SAKAM,Q;wBAAW;AACP,UAAMC,KAAK,KAAKpB,WAAL,CAAiBqB,GAAjB,EAAX;AACA,UAAID,OAAO,IAAX,EAAiB,OAAO,IAAP;AAEjB,UAAME,MAAM3B,OAAO4B,OAAP,CAAeH,EAAf,CAAZ;AACA,aAAOE,IAAIE,KAAX;AACH;;;;AAED;;;;;;;;;SAOAR,gB;gCAAmB;AACf,UAAMS,SAASjC,OAAOiC,MAAP,EAAf;;AACA,UAAI,CAACA,OAAOC,SAAZ,EAAuB;AACnB,aAAKC,gBAAL,GAAwB,IAAxB;AACA,aAAK1B,UAAL,GAAkB,IAAlB;AACA,aAAKY,kBAAL,CAAwBK,IAAxB;AACH;;AAED,UAAIO,OAAOC,SAAP,IAAoB,KAAKC,gBAA7B,EAA+C;AAC3C,aAAKA,gBAAL,GAAwB,KAAxB;AACA,aAAKzB,SAAL,CAAe,KAAKI,QAApB;AACH;AACJ;;;;AAED;;;;;SAGAsB,Y;4BAAe;AACX,aAAO,KAAK5B,WAAL,CAAiBqB,GAAjB,OAA2B,IAAlC;AACH","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport Counts from './collection';\nimport createFauxSubscription from './createFauxSubscription';\nimport prepareForProcess from '../lib/prepareForProcess.js';\nimport NamedQueryBase from '../../namedQuery/namedQuery.base';\n\nexport default class CountSubscription {\n    /**\n     * @param {*} query - The query to use when fetching counts\n     */\n    constructor(query) {\n        this.accessToken = new ReactiveVar(null);\n        this.fauxHandle = null;\n        this.query = query;\n    }\n\n    /**\n     * Starts a subscription request for reactive counts.\n     *\n     * @param {*} arg - The argument to pass to {name}.count.subscribe\n     * @param {*} callback\n     */\n    subscribe(arg, callback) {\n        // Don't try to resubscribe if arg hasn't changed\n        if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n            return this.fauxHandle;\n        }\n\n        this.accessToken.set(null);\n        this.lastArgs = arg;\n\n        Meteor.call(this.query.name + '.count.subscribe', arg, (error, token) => {\n            if (!this._markedForUnsubscribe) {\n                this.subscriptionHandle = Meteor.subscribe(this.query.name + '.count', token, callback);\n                this.accessToken.set(token);\n\n                this.disconnectComputation = Tracker.autorun(() => this.handleDisconnect());\n            }\n\n            this._markedForUnsubscribe = false;\n        });\n\n        this.fauxHandle = createFauxSubscription(this);\n        return this.fauxHandle;\n    }\n\n    /**\n     * Unsubscribes from the count endpoint, if there is such a subscription.\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.disconnectComputation.stop();\n            this.subscriptionHandle.stop();\n        } else {\n            // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n            // so set a flag to stop the subscription from being created\n            this._markedForUnsubscribe = true;\n        }\n\n        this.accessToken.set(null);\n        this.fauxHandle = null;\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n     *\n     * @returns {Number|null} - Current document count\n     */\n    getCount() {\n        const id = this.accessToken.get();\n        if (id === null) return null;\n\n        const doc = Counts.findOne(id);\n        return doc.count;\n    }\n\n    /**\n     * All session info gets deleted when the server goes down, so when the client attempts to\n     * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n     *\n     * This function prevents that by manually stopping and restarting the subscription when the\n     * connection to the server is lost.\n     */\n    handleDisconnect() {\n        const status = Meteor.status();\n        if (!status.connected) {\n            this._markedForResume = true;\n            this.fauxHandle = null;\n            this.subscriptionHandle.stop();\n        }\n\n        if (status.connected && this._markedForResume) {\n            this._markedForResume = false;\n            this.subscribe(this.lastArgs);\n        }\n    }\n\n    /**\n     * Returns whether or not a subscription request has been made.\n     */\n    isSubscribed() {\n        return this.accessToken.get() !== null;\n    }\n}\n"]},"sourceType":"script","hash":"a4f919761de7e29bafd3332c71d579311415ac00"}
