{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nmodule.export({\n  \"default\": function () {\n    return AggregateFilters;\n  }\n});\nvar sift;\nmodule.watch(require(\"sift\"), {\n  \"default\": function (v) {\n    sift = v;\n  }\n}, 0);\n\nvar AggregateFilters =\n/*#__PURE__*/\nfunction () {\n  function AggregateFilters(collectionNode, metaFilters) {\n    this.collectionNode = collectionNode;\n    this.linker = collectionNode.linker;\n    this.metaFilters = metaFilters;\n    this.isVirtual = this.linker.isVirtual();\n    this.linkStorageField = this.linker.linkStorageField;\n  }\n\n  var _proto = AggregateFilters.prototype;\n\n  _proto.create = function () {\n    function create() {\n      switch (this.linker.strategy) {\n        case 'one':\n          return this.createOne();\n\n        case 'one-meta':\n          return this.createOneMeta();\n\n        case 'many':\n          return this.createMany();\n\n        case 'many-meta':\n          return this.createManyMeta();\n\n        default:\n          throw new Meteor.Error(\"Invalid linker type: \" + this.linker.type);\n      }\n    }\n\n    return create;\n  }();\n\n  _proto.createOne = function () {\n    function createOne() {\n      if (!this.isVirtual) {\n        return {\n          _id: {\n            $in: _.uniq(_.pluck(this.parentObjects, this.linkStorageField))\n          }\n        };\n      } else {\n        var _ref;\n\n        return _ref = {}, _ref[this.linkStorageField] = {\n          $in: _.uniq(_.pluck(this.parentObjects, '_id'))\n        }, _ref;\n      }\n    }\n\n    return createOne;\n  }();\n\n  _proto.createOneMeta = function () {\n    function createOneMeta() {\n      var _this = this;\n\n      if (!this.isVirtual) {\n        var eligibleObjects = this.parentObjects;\n\n        if (this.metaFilters) {\n          eligibleObjects = _.filter(this.parentObjects, function (object) {\n            return sift(_this.metaFilters)(object[_this.linkStorageField]);\n          });\n        }\n\n        var storages = _.pluck(eligibleObjects, this.linkStorageField);\n\n        var ids = [];\n\n        _.each(storages, function (storage) {\n          if (storage) {\n            ids.push(storage._id);\n          }\n        });\n\n        return {\n          _id: {\n            $in: _.uniq(ids)\n          }\n        };\n      } else {\n        var filters = {};\n\n        if (this.metaFilters) {\n          _.each(this.metaFilters, function (value, key) {\n            filters[_this.linkStorageField + '.' + key] = value;\n          });\n        }\n\n        filters[this.linkStorageField + '._id'] = {\n          $in: _.uniq(_.pluck(this.parentObjects, '_id'))\n        };\n        return filters;\n      }\n    }\n\n    return createOneMeta;\n  }();\n\n  _proto.createMany = function () {\n    function createMany() {\n      if (!this.isVirtual) {\n        var _ref2;\n\n        var arrayOfIds = _.pluck(this.parentObjects, this.linkStorageField);\n\n        return {\n          _id: {\n            $in: _.uniq((_ref2 = _).union.apply(_ref2, (0, _toConsumableArray2.default)(arrayOfIds)))\n          }\n        };\n      } else {\n        var _ref3, _ref4;\n\n        var _arrayOfIds = _.pluck(this.parentObjects, '_id');\n\n        return _ref4 = {}, _ref4[this.linkStorageField] = {\n          $in: _.uniq((_ref3 = _).union.apply(_ref3, (0, _toConsumableArray2.default)(_arrayOfIds)))\n        }, _ref4;\n      }\n    }\n\n    return createMany;\n  }();\n\n  _proto.createManyMeta = function () {\n    function createManyMeta() {\n      var _this2 = this;\n\n      if (!this.isVirtual) {\n        var ids = [];\n\n        _.each(this.parentObjects, function (object) {\n          if (object[_this2.linkStorageField]) {\n            if (_this2.metaFilters) {\n              var isValid = sift(_this2.metaFilters);\n\n              _.each(object[_this2.linkStorageField], function (object) {\n                if (isValid(object)) {\n                  ids.push(object._id);\n                }\n              });\n            } else {\n              _.each(object[_this2.linkStorageField], function (object) {\n                ids.push(object._id);\n              });\n            }\n          }\n        });\n\n        return {\n          _id: {\n            $in: _.uniq(ids)\n          }\n        };\n      } else {\n        var _ref5;\n\n        var filters = {};\n\n        if (this.metaFilters) {\n          _.each(this.metaFilters, function (value, key) {\n            filters[key] = value;\n          });\n        }\n\n        filters._id = {\n          $in: _.uniq(_.pluck(this.parentObjects, '_id'))\n        };\n        return _ref5 = {}, _ref5[this.linkStorageField] = {\n          $elemMatch: filters\n        }, _ref5;\n      }\n    }\n\n    return createManyMeta;\n  }();\n\n  (0, _createClass2.default)(AggregateFilters, [{\n    key: \"parentObjects\",\n    get: function () {\n      return this.collectionNode.parent.results;\n    }\n  }]);\n  return AggregateFilters;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/aggregateSearchFilters.js"],"names":["module","export","AggregateFilters","sift","watch","require","v","collectionNode","metaFilters","linker","isVirtual","linkStorageField","create","strategy","createOne","createOneMeta","createMany","createManyMeta","Meteor","Error","type","_id","$in","_","uniq","pluck","parentObjects","eligibleObjects","filter","object","storages","ids","each","storage","push","filters","value","key","arrayOfIds","union","isValid","$elemMatch","parent","results"],"mappings":"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","sourcesContent":["import sift from 'sift';\n\n/**\n * Its purpose is to create filters to get the related data in one request.\n */\nexport default class AggregateFilters {\n    constructor(collectionNode, metaFilters) {\n        this.collectionNode = collectionNode;\n        this.linker = collectionNode.linker;\n        this.metaFilters = metaFilters;\n        this.isVirtual = this.linker.isVirtual();\n\n        this.linkStorageField = this.linker.linkStorageField;\n    }\n\n    get parentObjects() {\n        return this.collectionNode.parent.results;\n    }\n\n    create() {\n        switch (this.linker.strategy) {\n            case 'one':\n                return this.createOne();\n            case 'one-meta':\n                return this.createOneMeta();\n            case 'many':\n                return this.createMany();\n            case 'many-meta':\n                return this.createManyMeta();\n            default:\n                throw new Meteor.Error(`Invalid linker type: ${this.linker.type}`);\n        }\n    }\n\n    createOne() {\n        if (!this.isVirtual) {\n            return {\n                _id: {\n                    $in: _.uniq(\n                        _.pluck(this.parentObjects, this.linkStorageField)\n                    )\n                }\n            };\n        } else {\n            return {\n                [this.linkStorageField]: {\n                    $in: _.uniq(\n                        _.pluck(this.parentObjects, '_id')\n                    )\n                }\n            };\n        }\n    }\n\n    createOneMeta() {\n        if (!this.isVirtual) {\n            let eligibleObjects = this.parentObjects;\n\n            if (this.metaFilters) {\n                eligibleObjects = _.filter(this.parentObjects, object => {\n                    return sift(this.metaFilters)(object[this.linkStorageField]);\n                });\n            }\n\n            const storages = _.pluck(eligibleObjects, this.linkStorageField);\n            let ids = [];\n            _.each(storages, storage => {\n                if (storage) {\n                    ids.push(storage._id);\n                }\n            });\n\n            return {\n                _id: {$in: _.uniq(ids)}\n            };\n        } else {\n            let filters = {};\n            if (this.metaFilters) {\n                _.each(this.metaFilters, (value, key) => {\n                    filters[this.linkStorageField + '.' + key] = value;\n                })\n            }\n\n            filters[this.linkStorageField + '._id'] = {\n                $in: _.uniq(\n                    _.pluck(this.parentObjects, '_id')\n                )\n            };\n\n            return filters;\n        }\n    }\n\n    createMany() {\n        if (!this.isVirtual) {\n            const arrayOfIds = _.pluck(this.parentObjects, this.linkStorageField);\n            return {\n                _id: {\n                    $in: _.uniq(\n                        _.union(...arrayOfIds)\n                    )\n                }\n            };\n        } else {\n            const arrayOfIds = _.pluck(this.parentObjects, '_id');\n            return {\n                [this.linkStorageField]: {\n                    $in: _.uniq(\n                        _.union(...arrayOfIds)\n                    )\n                }\n            };\n        }\n    }\n\n    createManyMeta() {\n        if (!this.isVirtual) {\n            let ids = [];\n\n            _.each(this.parentObjects, object => {\n                if (object[this.linkStorageField]) {\n                    if (this.metaFilters) {\n                        const isValid = sift(this.metaFilters);\n                        _.each(object[this.linkStorageField], object => {\n                            if (isValid(object)) {\n                                ids.push(object._id);\n                            }\n                        });\n                    } else {\n                        _.each(object[this.linkStorageField], object => {\n                            ids.push(object._id);\n                        });\n                    }\n                }\n            });\n\n            return {\n                _id: {$in: _.uniq(ids)}\n            };\n        } else {\n            let filters = {};\n            if (this.metaFilters) {\n                _.each(this.metaFilters, (value, key) => {\n                    filters[key] = value;\n                })\n            }\n\n            filters._id = {\n                $in: _.uniq(\n                    _.pluck(this.parentObjects, '_id')\n                )\n            };\n\n            return {\n                [this.linkStorageField]: {\n                    $elemMatch: filters\n                }\n            };\n        }\n    }\n}"]},"sourceType":"script","hash":"4e77930a166e8d43df9b9b0346caa135684e3b53"}
