{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js"}},"code":"module.export({\n  \"default\": function () {\n    return astToQuery;\n  },\n  getMaxDepth: function () {\n    return getMaxDepth;\n  },\n  deny: function () {\n    return deny;\n  },\n  clearEmptyObjects: function () {\n    return clearEmptyObjects;\n  },\n  createGetArgs: function () {\n    return createGetArgs;\n  }\n});\nvar check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 0);\nvar astToBody, Symbols;\nmodule.watch(require(\"./astToBody\"), {\n  \"default\": function (v) {\n    astToBody = v;\n  },\n  Symbols: function (v) {\n    Symbols = v;\n  }\n}, 1);\nvar defaults;\nmodule.watch(require(\"./defaults\"), {\n  \"default\": function (v) {\n    defaults = v;\n  }\n}, 2);\nvar intersectDeep;\nmodule.watch(require(\"../../query/lib/intersectDeep\"), {\n  \"default\": function (v) {\n    intersectDeep = v;\n  }\n}, 3);\nvar enforceMaxLimit;\nmodule.watch(require(\"../../exposure/lib/enforceMaxLimit\"), {\n  \"default\": function (v) {\n    enforceMaxLimit = v;\n  }\n}, 4);\nvar Errors = {\n  MAX_DEPTH: 'The maximum depth of this request exceeds the depth allowed.'\n};\n\nfunction astToQuery(ast) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var collection = this;\n  check(config, {\n    embody: Match.Maybe(Function),\n    $filters: Match.Maybe(Object),\n    $options: Match.Maybe(Object),\n    maxDepth: Match.Maybe(Number),\n    maxLimit: Match.Maybe(Number),\n    deny: Match.Maybe([String]),\n    intersect: Match.Maybe(Object)\n  });\n  config = Object.assign({\n    $options: {},\n    $filters: {}\n  }, defaults, config); // get the body\n\n  var body = astToBody(ast); // first we do the intersection\n\n  if (config.intersect) {\n    body = intersectDeep(config.intersect, body);\n  } // enforce the maximum amount of data we allow to retrieve\n\n\n  if (config.maxLimit) {\n    enforceMaxLimit(config.$options, config.maxLimit);\n  } // figure out depth based\n\n\n  if (config.maxDepth) {\n    var currentMaxDepth = getMaxDepth(body);\n\n    if (currentMaxDepth > config.maxDepth) {\n      throw Errors.MAX_DEPTH;\n    }\n  }\n\n  if (config.deny) {\n    deny(body, config.deny);\n  }\n\n  Object.assign(body, {\n    $filters: config.$filters,\n    $options: config.$options\n  });\n\n  if (config.embody) {\n    var getArgs = createGetArgs(body);\n    config.embody.call(null, {\n      body: body,\n      getArgs: getArgs\n    });\n  } // we return the query\n\n\n  return this.createQuery(body);\n}\n\nfunction getMaxDepth(body) {\n  var depths = [];\n\n  for (key in meteorBabelHelpers.sanitizeForInObject(body)) {\n    if (_.isObject(body[key])) {\n      depths.push(getMaxDepth(body[key]));\n    }\n  }\n\n  if (depths.length === 0) {\n    return 1;\n  }\n\n  return Math.max.apply(Math, depths) + 1;\n}\n\nfunction deny(body, fields) {\n  fields.forEach(function (field) {\n    var parts = field.split('.');\n    var accessor = body;\n\n    while (parts.length != 0) {\n      if (parts.length === 1) {\n        delete accessor[parts[0]];\n      } else {\n        if (!_.isObject(accessor)) {\n          break;\n        }\n\n        accessor = accessor[parts[0]];\n      }\n\n      parts.shift();\n    }\n  });\n  return clearEmptyObjects(body);\n}\n\nfunction clearEmptyObjects(body) {\n  // clear empty nodes then back-propagate\n  for (var _key in meteorBabelHelpers.sanitizeForInObject(body)) {\n    if (_.isObject(body[_key])) {\n      var shouldDelete = clearEmptyObjects(body[_key]);\n\n      if (shouldDelete) {\n        delete body[_key];\n      }\n    }\n  }\n\n  return Object.keys(body).length === 0;\n}\n\nfunction createGetArgs(body) {\n  return function (path) {\n    var parts = path.split('.');\n    var stopped = false;\n    var accessor = body;\n\n    for (var i = 0; i < parts.length; i++) {\n      if (!accessor) {\n        stopped = true;\n        break;\n      }\n\n      if (accessor[parts[i]]) {\n        accessor = accessor[parts[i]];\n      }\n    }\n\n    if (stopped) {\n      return {};\n    }\n\n    if (accessor) {\n      return accessor[Symbols.ARGUMENTS] || {};\n    }\n  };\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/graphql/lib/astToQuery.js"],"names":["module","export","astToQuery","getMaxDepth","deny","clearEmptyObjects","createGetArgs","check","Match","watch","require","v","astToBody","Symbols","defaults","intersectDeep","enforceMaxLimit","Errors","MAX_DEPTH","ast","config","collection","embody","Maybe","Function","$filters","Object","$options","maxDepth","Number","maxLimit","String","intersect","assign","body","currentMaxDepth","getArgs","call","createQuery","depths","key","_","isObject","push","length","Math","max","fields","forEach","parts","field","split","accessor","shift","shouldDelete","keys","path","stopped","i","ARGUMENTS"],"mappings":"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","sourcesContent":["import { check, Match } from 'meteor/check';\nimport astToBody, { Symbols } from './astToBody';\nimport defaults from './defaults';\nimport intersectDeep from '../../query/lib/intersectDeep';\nimport enforceMaxLimit from '../../exposure/lib/enforceMaxLimit';\n\nconst Errors = {\n  MAX_DEPTH: 'The maximum depth of this request exceeds the depth allowed.',\n};\n\nexport default function astToQuery(ast, config = {}) {\n  const collection = this;\n\n  check(config, {\n    embody: Match.Maybe(Function),\n    $filters: Match.Maybe(Object),\n    $options: Match.Maybe(Object),\n    maxDepth: Match.Maybe(Number),\n    maxLimit: Match.Maybe(Number),\n    deny: Match.Maybe([String]),\n    intersect: Match.Maybe(Object),\n  });\n\n  config = Object.assign(\n    {\n      $options: {},\n      $filters: {},\n    },\n    defaults,\n    config\n  );\n\n  // get the body\n  let body = astToBody(ast);\n\n  // first we do the intersection\n  if (config.intersect) {\n    body = intersectDeep(config.intersect, body);\n  }\n\n  // enforce the maximum amount of data we allow to retrieve\n  if (config.maxLimit) {\n    enforceMaxLimit(config.$options, config.maxLimit);\n  }\n\n  // figure out depth based\n  if (config.maxDepth) {\n    const currentMaxDepth = getMaxDepth(body);\n    if (currentMaxDepth > config.maxDepth) {\n      throw Errors.MAX_DEPTH;\n    }\n  }\n\n  if (config.deny) {\n    deny(body, config.deny);\n  }\n\n  Object.assign(body, {\n    $filters: config.$filters,\n    $options: config.$options,\n  });\n\n  if (config.embody) {\n    const getArgs = createGetArgs(body);\n    config.embody.call(null, {\n      body,\n      getArgs,\n    });\n  }\n\n  // we return the query\n  return this.createQuery(body);\n}\n\nexport function getMaxDepth(body) {\n  let depths = [];\n  for (key in body) {\n    if (_.isObject(body[key])) {\n      depths.push(getMaxDepth(body[key]));\n    }\n  }\n\n  if (depths.length === 0) {\n    return 1;\n  }\n\n  return Math.max(...depths) + 1;\n}\n\nexport function deny(body, fields) {\n  fields.forEach(field => {\n    let parts = field.split('.');\n    let accessor = body;\n    while (parts.length != 0) {\n      if (parts.length === 1) {\n        delete accessor[parts[0]];\n      } else {\n        if (!_.isObject(accessor)) {\n          break;\n        }\n        accessor = accessor[parts[0]];\n      }\n      parts.shift();\n    }\n  });\n\n  return clearEmptyObjects(body);\n}\n\nexport function clearEmptyObjects(body) {\n  // clear empty nodes then back-propagate\n  for (let key in body) {\n    if (_.isObject(body[key])) {\n      const shouldDelete = clearEmptyObjects(body[key]);\n      if (shouldDelete) {\n        delete body[key];\n      }\n    }\n  }\n\n  return Object.keys(body).length === 0;\n}\n\nexport function createGetArgs(body) {\n  return function(path) {\n    const parts = path.split('.');\n    let stopped = false;\n    let accessor = body;\n    for (var i = 0; i < parts.length; i++) {\n      if (!accessor) {\n        stopped = true;\n        break;\n      }\n\n      if (accessor[parts[i]]) {\n        accessor = accessor[parts[i]];\n      }\n    }\n\n    if (stopped) {\n      return {};\n    }\n\n    if (accessor) {\n      return accessor[Symbols.ARGUMENTS] || {};\n    }\n  };\n}\n"]},"sourceType":"script","hash":"591efd50e6a748c6d6218445ff3adda5554337e3"}
