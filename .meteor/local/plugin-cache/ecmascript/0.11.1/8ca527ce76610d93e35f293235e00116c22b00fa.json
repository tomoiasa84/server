{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  \"default\": function () {\n    return storeHypernovaResults;\n  }\n});\nvar applyProps;\nmodule.watch(require(\"../lib/applyProps.js\"), {\n  \"default\": function (v) {\n    applyProps = v;\n  }\n}, 0);\nvar AggregateFilters;\nmodule.watch(require(\"./aggregateSearchFilters.js\"), {\n  \"default\": function (v) {\n    AggregateFilters = v;\n  }\n}, 1);\nvar assemble;\nmodule.watch(require(\"./assembler.js\"), {\n  \"default\": function (v) {\n    assemble = v;\n  }\n}, 2);\nvar assembleAggregateResults;\nmodule.watch(require(\"./assembleAggregateResults.js\"), {\n  \"default\": function (v) {\n    assembleAggregateResults = v;\n  }\n}, 3);\nvar buildAggregatePipeline;\nmodule.watch(require(\"./buildAggregatePipeline.js\"), {\n  \"default\": function (v) {\n    buildAggregatePipeline = v;\n  }\n}, 4);\nvar snapBackDottedFields;\nmodule.watch(require(\"./lib/snapBackDottedFields\"), {\n  \"default\": function (v) {\n    snapBackDottedFields = v;\n  }\n}, 5);\n\nfunction storeHypernovaResults(childCollectionNode, userId) {\n  if (childCollectionNode.parent.results.length === 0) {\n    return childCollectionNode.results = [];\n  }\n\n  var _applyProps = applyProps(childCollectionNode),\n      filters = _applyProps.filters,\n      options = _applyProps.options;\n\n  var metaFilters = filters.$meta;\n  var aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);\n  delete filters.$meta;\n  var linker = childCollectionNode.linker;\n  var isVirtual = linker.isVirtual();\n  var collection = childCollectionNode.collection;\n\n  _.extend(filters, aggregateFilters.create()); // if it's not virtual then we retrieve them and assemble them here.\n\n\n  if (!isVirtual) {\n    var filteredOptions = _.omit(options, 'limit');\n\n    childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();\n    assemble(childCollectionNode, (0, _objectSpread2.default)({}, options, {\n      metaFilters: metaFilters\n    }));\n  } else {\n    // virtuals arrive here\n    var _buildAggregatePipeli = buildAggregatePipeline(childCollectionNode, filters, options, userId),\n        pipeline = _buildAggregatePipeli.pipeline,\n        containsDottedFields = _buildAggregatePipeli.containsDottedFields;\n\n    var aggregateResults = collection.aggregate(pipeline);\n    /**\n     * If in aggregation it contains '.', we replace it with a custom string '___'\n     * And then after aggregation is complete we need to snap-it back to how it was.\n     */\n\n    if (containsDottedFields) {\n      snapBackDottedFields(aggregateResults);\n    }\n\n    assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);\n  }\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js"],"names":["module","export","storeHypernovaResults","applyProps","watch","require","v","AggregateFilters","assemble","assembleAggregateResults","buildAggregatePipeline","snapBackDottedFields","childCollectionNode","userId","parent","results","length","filters","options","metaFilters","$meta","aggregateFilters","linker","isVirtual","collection","_","extend","create","filteredOptions","omit","find","fetch","pipeline","containsDottedFields","aggregateResults","aggregate"],"mappings":";;;;AAAAA,OAAOC,MAAP,CAAc;AAAC,aAAQ;AAAA,WAAIC,qBAAJ;AAAA;AAAT,CAAd;AAAmD,IAAIC,UAAJ;AAAeH,OAAOI,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAAA,uBAASC,CAAT,EAAW;AAACH,iBAAWG,CAAX;AAAa;AAAzB,CAA7C,EAAwE,CAAxE;AAA2E,IAAIC,gBAAJ;AAAqBP,OAAOI,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA,uBAASC,CAAT,EAAW;AAACC,uBAAiBD,CAAjB;AAAmB;AAA/B,CAApD,EAAqF,CAArF;AAAwF,IAAIE,QAAJ;AAAaR,OAAOI,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAAA,uBAASC,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;AAAvB,CAAvC,EAAgE,CAAhE;AAAmE,IAAIG,wBAAJ;AAA6BT,OAAOI,KAAP,CAAaC,QAAQ,+BAAR,CAAb,EAAsD;AAAA,uBAASC,CAAT,EAAW;AAACG,+BAAyBH,CAAzB;AAA2B;AAAvC,CAAtD,EAA+F,CAA/F;AAAkG,IAAII,sBAAJ;AAA2BV,OAAOI,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA,uBAASC,CAAT,EAAW;AAACI,6BAAuBJ,CAAvB;AAAyB;AAArC,CAApD,EAA2F,CAA3F;AAA8F,IAAIK,oBAAJ;AAAyBX,OAAOI,KAAP,CAAaC,QAAQ,4BAAR,CAAb,EAAmD;AAAA,uBAASC,CAAT,EAAW;AAACK,2BAAqBL,CAArB;AAAuB;AAAnC,CAAnD,EAAwF,CAAxF;;AAO5kB,SAASJ,qBAAT,CAA+BU,mBAA/B,EAAoDC,MAApD,EAA4D;AACvE,MAAID,oBAAoBE,MAApB,CAA2BC,OAA3B,CAAmCC,MAAnC,KAA8C,CAAlD,EAAqD;AACjD,WAAQJ,oBAAoBG,OAApB,GAA8B,EAAtC;AACH;;AAHsE,oBAK5CZ,WAAWS,mBAAX,CAL4C;AAAA,MAKjEK,OALiE,eAKjEA,OALiE;AAAA,MAKxDC,OALwD,eAKxDA,OALwD;;AAOvE,MAAMC,cAAcF,QAAQG,KAA5B;AACA,MAAMC,mBAAmB,IAAId,gBAAJ,CACrBK,mBADqB,EAErBO,WAFqB,CAAzB;AAIA,SAAOF,QAAQG,KAAf;AAEA,MAAME,SAASV,oBAAoBU,MAAnC;AACA,MAAMC,YAAYD,OAAOC,SAAP,EAAlB;AACA,MAAMC,aAAaZ,oBAAoBY,UAAvC;;AAEAC,IAAEC,MAAF,CAAST,OAAT,EAAkBI,iBAAiBM,MAAjB,EAAlB,EAlBuE,CAoBvE;;;AACA,MAAI,CAACJ,SAAL,EAAgB;AACZ,QAAMK,kBAAkBH,EAAEI,IAAF,CAAOX,OAAP,EAAgB,OAAhB,CAAxB;;AAEAN,wBAAoBG,OAApB,GAA8BS,WACzBM,IADyB,CACpBb,OADoB,EACXW,eADW,EACMf,MADN,EAEzBkB,KAFyB,EAA9B;AAIAvB,aAASI,mBAAT,kCACOM,OADP;AAEIC;AAFJ;AAIH,GAXD,MAWO;AACH;AADG,gCAEsCT,uBACrCE,mBADqC,EAErCK,OAFqC,EAGrCC,OAHqC,EAIrCL,MAJqC,CAFtC;AAAA,QAEGmB,QAFH,yBAEGA,QAFH;AAAA,QAEaC,oBAFb,yBAEaA,oBAFb;;AASH,QAAIC,mBAAmBV,WAAWW,SAAX,CAAqBH,QAArB,CAAvB;AAEA;;;;;AAIA,QAAIC,oBAAJ,EAA0B;AACtBtB,2BAAqBuB,gBAArB;AACH;;AAEDzB,6BACIG,mBADJ,EAEIsB,gBAFJ,EAGIf,WAHJ;AAKH;AACJ","sourcesContent":["import applyProps from '../lib/applyProps.js';\nimport AggregateFilters from './aggregateSearchFilters.js';\nimport assemble from './assembler.js';\nimport assembleAggregateResults from './assembleAggregateResults.js';\nimport buildAggregatePipeline from './buildAggregatePipeline.js';\nimport snapBackDottedFields from './lib/snapBackDottedFields';\n\nexport default function storeHypernovaResults(childCollectionNode, userId) {\n    if (childCollectionNode.parent.results.length === 0) {\n        return (childCollectionNode.results = []);\n    }\n\n    let { filters, options } = applyProps(childCollectionNode);\n\n    const metaFilters = filters.$meta;\n    const aggregateFilters = new AggregateFilters(\n        childCollectionNode,\n        metaFilters\n    );\n    delete filters.$meta;\n\n    const linker = childCollectionNode.linker;\n    const isVirtual = linker.isVirtual();\n    const collection = childCollectionNode.collection;\n\n    _.extend(filters, aggregateFilters.create());\n\n    // if it's not virtual then we retrieve them and assemble them here.\n    if (!isVirtual) {\n        const filteredOptions = _.omit(options, 'limit');\n\n        childCollectionNode.results = collection\n            .find(filters, filteredOptions, userId)\n            .fetch();\n\n        assemble(childCollectionNode, {\n            ...options,\n            metaFilters,\n        });\n    } else {\n        // virtuals arrive here\n        let { pipeline, containsDottedFields } = buildAggregatePipeline(\n            childCollectionNode,\n            filters,\n            options,\n            userId\n        );\n\n        let aggregateResults = collection.aggregate(pipeline);\n\n        /**\n         * If in aggregation it contains '.', we replace it with a custom string '___'\n         * And then after aggregation is complete we need to snap-it back to how it was.\n         */\n        if (containsDottedFields) {\n            snapBackDottedFields(aggregateResults);\n        }\n\n        assembleAggregateResults(\n            childCollectionNode,\n            aggregateResults,\n            metaFilters\n        );\n    }\n}\n"]},"sourceType":"script","hash":"8ca527ce76610d93e35f293235e00116c22b00fa"}
