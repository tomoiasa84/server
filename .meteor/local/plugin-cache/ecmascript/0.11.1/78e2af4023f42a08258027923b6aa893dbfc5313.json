{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/__tests__/morpher/client.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/__tests__/morpher/client.js"}},"code":"let db, setClient;\nmodule.watch(require(\"apollo-morpher\"), {\n  default(v) {\n    db = v;\n  },\n\n  setClient(v) {\n    setClient = v;\n  }\n\n}, 0);\nlet client;\nmodule.watch(require(\"../apolloClient\"), {\n  default(v) {\n    client = v;\n  }\n\n}, 1);\nsetClient(client);\ndescribe('Morpher', () => {\n  it('Should work with insert()', done => {\n    db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    }).then(result => {\n      assert.isString(result._id);\n      done();\n    });\n  });\n  it('Should work with update()', async () => {\n    const {\n      _id\n    } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    });\n    const response = await db.users.update({\n      _id\n    }, {\n      $set: {\n        lastName: 'Brown'\n      }\n    });\n    assert.equal('ok', response);\n  });\n  it('Should work with remove()', async () => {\n    const {\n      _id\n    } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    });\n    const response = await db.users.remove({\n      _id\n    });\n    assert.equal('ok', response);\n  });\n  it('Should work with find()', async () => {\n    const {\n      _id\n    } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    });\n    const users = await db.users.find({\n      _id: 1,\n      firstName: 1,\n      lastName: 1\n    }, {\n      filters: {\n        _id\n      }\n    });\n    assert.lengthOf(users, 1);\n    assert.isObject(users[0]);\n    assert.equal(_id, users[0]._id);\n    assert.equal('John', users[0].firstName);\n    assert.equal('Smith', users[0].lastName);\n  });\n  it('Should work with findOne()', async () => {\n    const {\n      _id\n    } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    });\n    const user = await db.users.findOne({\n      _id: 1,\n      firstName: 1,\n      lastName: 1\n    }, {\n      filters: {\n        _id\n      }\n    });\n    assert.isObject(user);\n    assert.equal(_id, user._id);\n    assert.equal('John', user.firstName);\n    assert.equal('Smith', user.lastName);\n  });\n  it('Should work with count()', async () => {\n    await db.users.remove({\n      firstName: 'JohnCountable'\n    });\n    const d1 = await db.users.insert({\n      firstName: 'JohnCountable'\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnCountable'\n    });\n    const count = await db.users.count({\n      filters: {\n        firstName: 'JohnCountable'\n      }\n    });\n    assert.equal(2, count);\n  });\n  it('Should work with options', async () => {\n    await db.users.remove({\n      firstName: 'JohnOptionable'\n    });\n    const d1 = await db.users.insert({\n      firstName: 'JohnOptionable'\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnOptionable'\n    });\n    const results = await db.users.find(\"firstName\", {\n      filters: {\n        firstName: 'JohnOptionable'\n      },\n      options: {\n        limit: 1\n      }\n    });\n    assert.equal(1, results.length);\n  });\n});","map":{"version":3,"sources":["packages/cultofcoders:apollo/__tests__/morpher/client.js"],"names":["db","setClient","module","watch","require","default","v","client","describe","it","done","users","insert","firstName","lastName","then","result","assert","isString","_id","response","update","$set","equal","remove","find","filters","lengthOf","isObject","user","findOne","d1","d2","count","results","options","limit","length"],"mappings":"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","sourcesContent":["import db, { setClient } from 'apollo-morpher';\nimport client from '../apolloClient';\nsetClient(client);\n\ndescribe('Morpher', () => {\n  it('Should work with insert()', done => {\n    db.users\n      .insert({\n        firstName: 'John',\n        lastName: 'Smith',\n      })\n      .then(result => {\n        assert.isString(result._id);\n        done();\n      });\n  });\n  it('Should work with update()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const response = await db.users.update(\n      { _id },\n      {\n        $set: { lastName: 'Brown' },\n      }\n    );\n\n    assert.equal('ok', response);\n  });\n\n  it('Should work with remove()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const response = await db.users.remove({ _id });\n\n    assert.equal('ok', response);\n  });\n\n  it('Should work with find()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const users = await db.users.find(\n      {\n        _id: 1,\n        firstName: 1,\n        lastName: 1,\n      },\n      {\n        filters: { _id },\n      }\n    );\n\n    assert.lengthOf(users, 1);\n    assert.isObject(users[0]);\n    assert.equal(_id, users[0]._id);\n    assert.equal('John', users[0].firstName);\n    assert.equal('Smith', users[0].lastName);\n  });\n\n  it('Should work with findOne()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const user = await db.users.findOne(\n      {\n        _id: 1,\n        firstName: 1,\n        lastName: 1,\n      },\n      {\n        filters: { _id },\n      }\n    );\n\n    assert.isObject(user);\n    assert.equal(_id, user._id);\n    assert.equal('John', user.firstName);\n    assert.equal('Smith', user.lastName);\n  });\n\n  it('Should work with count()', async () => {\n    await db.users.remove({\n      firstName: 'JohnCountable',\n    });\n\n    const d1 = await db.users.insert({\n      firstName: 'JohnCountable',\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnCountable',\n    });\n\n    const count = await db.users.count({\n      filters: {\n        firstName: 'JohnCountable',\n      },\n    });\n\n    assert.equal(2, count);\n  });\n\n  it('Should work with options', async () => {\n    await db.users.remove({\n      firstName: 'JohnOptionable',\n    });\n\n    const d1 = await db.users.insert({\n      firstName: 'JohnOptionable',\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnOptionable',\n    });\n\n    const results = await db.users.find(`firstName`, {\n      filters: {\n        firstName: 'JohnOptionable',\n      },\n      options: {\n        limit: 1,\n      },\n    });\n\n    assert.equal(1, results.length);\n  });\n});\n"]},"sourceType":"script","hash":"78e2af4023f42a08258027923b6aa893dbfc5313"}
