{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/testing/client.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/client.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/testing/client.js"}},"code":"let Demo, DemoMethod, DemoPublication;\nmodule.watch(require(\"./bootstrap/demo.js\"), {\n  default(v) {\n    Demo = v;\n  },\n\n  DemoMethod(v) {\n    DemoMethod = v;\n  },\n\n  DemoPublication(v) {\n    DemoPublication = v;\n  }\n\n}, 0);\nlet Intersect, IntersectLink;\nmodule.watch(require(\"./bootstrap/intersect\"), {\n  default(v) {\n    Intersect = v;\n  },\n\n  CollectionLink(v) {\n    IntersectLink = v;\n  }\n\n}, 1);\ndescribe('Exposure Tests', function () {\n  it('Should fetch only allowed data and limitations should be applied', function (done) {\n    const query = Demo.createQuery({\n      $options: {\n        limit: 3\n      },\n      restrictedField: 1\n    });\n    query.fetch((err, res) => {\n      assert.isUndefined(err);\n      assert.isDefined(res);\n      assert.lengthOf(res, 2);\n      done();\n    });\n  });\n  it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n    const query = Demo.createQuery({\n      $options: {\n        limit: 3\n      },\n      restrictedField: 1,\n      children: {\n        myself: {}\n      }\n    });\n    query.fetch((err, res) => {\n      assert.isUndefined(res);\n      assert.isDefined(err);\n      done();\n    });\n  });\n  it('Should return the correct count', function (done) {\n    Meteor.call('exposure_exposure_test.count', {}, function (err, res) {\n      assert.isUndefined(err);\n      assert.equal(3, res);\n      done();\n    });\n  });\n  it('Should return the correct count via query', function (done) {\n    const query = Demo.createQuery({\n      $options: {\n        limit: 1\n      }\n    });\n    query.getCount(function (err, res) {\n      assert.isUndefined(err);\n      assert.equal(3, res);\n      done();\n    });\n  });\n  it('Should should not allow publish but only method', function (done) {\n    const query = DemoMethod.createQuery({\n      _id: 1\n    });\n    query.fetch((err, res) => {\n      assert.isUndefined(err);\n      assert.isDefined(res);\n    });\n    const handler = query.subscribe({\n      onStop(e) {\n        done();\n      }\n\n    });\n  });\n  it('Should should not allow method but only publish', function (done) {\n    const query = DemoPublication.createQuery({\n      _id: 1\n    });\n    query.fetch((err, res) => {\n      assert.isDefined(err);\n      assert.isUndefined(res);\n    });\n    query.subscribe({\n      onReady() {\n        done();\n      }\n\n    });\n  });\n  it('Should restrict links # restrictLinks ', function (done) {\n    const query = Demo.createQuery({\n      _id: 1,\n      restrictedLink: {}\n    });\n    query.fetch((err, res) => {\n      assert.isUndefined(err);\n\n      _.each(res, item => {\n        assert.isUndefined(item.restrictedLink);\n      });\n\n      assert.isArray(res);\n      assert.isFalse(res.length === 0);\n      done();\n    });\n  });\n  it('Should intersect the body graphs - Method', function (done) {\n    const query = Intersect.createQuery({\n      $filters: {\n        value: 'Hello'\n      },\n      value: 1,\n      privateValue: 1,\n      link: {\n        value: 1,\n        privateValue: 1,\n        myself: {\n          value: 1\n        }\n      },\n      privateLink: {\n        value: 1,\n        privateValue: 1\n      }\n    });\n    query.fetch((err, res) => {\n      assert.isUndefined(err);\n      assert.lengthOf(res, 1);\n\n      const result = _.first(res);\n\n      assert.isDefined(result.value);\n      assert.isUndefined(result.privateValue);\n      assert.isUndefined(result.privateLink);\n      assert.isObject(result.link);\n      assert.isDefined(result.link.value);\n      assert.isUndefined(result.link.privateValue);\n      assert.isUndefined(result.link.myself);\n      done();\n    });\n  });\n  it('Should intersect the body graphs - Subscription', function (done) {\n    const query = Intersect.createQuery({\n      $filters: {\n        value: 'Hello'\n      },\n      value: 1,\n      privateValue: 1,\n      link: {\n        value: 1,\n        privateValue: 1,\n        myself: {\n          value: 1\n        }\n      },\n      privateLink: {\n        value: 1,\n        privateValue: 1\n      }\n    });\n    const handle = query.subscribe();\n    Tracker.autorun(c => {\n      if (handle.ready()) {\n        c.stop();\n        const res = query.fetch();\n        assert.lengthOf(res, 1);\n\n        const result = _.first(res);\n\n        assert.isDefined(result.value);\n        assert.isUndefined(result.privateValue);\n        assert.isUndefined(result.privateLink);\n        assert.isObject(result.link);\n        assert.isDefined(result.link.value);\n        assert.isUndefined(result.link.privateValue);\n        assert.isUndefined(result.link.myself);\n        done();\n      }\n    });\n  });\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/testing/client.js"],"names":["Demo","DemoMethod","DemoPublication","module","watch","require","default","v","Intersect","IntersectLink","CollectionLink","describe","it","done","query","createQuery","$options","limit","restrictedField","fetch","err","res","assert","isUndefined","isDefined","lengthOf","children","myself","Meteor","call","equal","getCount","_id","handler","subscribe","onStop","e","onReady","restrictedLink","_","each","item","isArray","isFalse","length","$filters","value","privateValue","link","privateLink","result","first","isObject","handle","Tracker","autorun","c","ready","stop"],"mappings":"AAAA,IAAIA,IAAJ,EAASC,UAAT,EAAoBC,eAApB;AAAoCC,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACC,UAAQC,CAAR,EAAU;AAACP,WAAKO,CAAL;AAAO,GAAnB;;AAAoBN,aAAWM,CAAX,EAAa;AAACN,iBAAWM,CAAX;AAAa,GAA/C;;AAAgDL,kBAAgBK,CAAhB,EAAkB;AAACL,sBAAgBK,CAAhB;AAAkB;;AAArF,CAA5C,EAAmI,CAAnI;AAAsI,IAAIC,SAAJ,EAAcC,aAAd;AAA4BN,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACC,UAAQC,CAAR,EAAU;AAACC,gBAAUD,CAAV;AAAY,GAAxB;;AAAyBG,iBAAeH,CAAf,EAAiB;AAACE,oBAAcF,CAAd;AAAgB;;AAA3D,CAA9C,EAA2G,CAA3G;AAOtMI,SAAS,gBAAT,EAA2B,YAAY;AACnCC,KAAG,kEAAH,EAAuE,UAAUC,IAAV,EAAgB;AACnF,UAAMC,QAAQd,KAAKe,WAAL,CAAiB;AAC3BC,gBAAU;AAACC,eAAO;AAAR,OADiB;AAE3BC,uBAAiB;AAFU,KAAjB,CAAd;AAKAJ,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOC,WAAP,CAAmBH,GAAnB;AACAE,aAAOE,SAAP,CAAiBH,GAAjB;AAEAC,aAAOG,QAAP,CAAgBJ,GAAhB,EAAqB,CAArB;AACAR;AACH,KAND;AAOH,GAbD;AAeAD,KAAG,kEAAH,EAAuE,UAAUC,IAAV,EAAgB;AACnF,UAAMC,QAAQd,KAAKe,WAAL,CAAiB;AAC3BC,gBAAU;AAACC,eAAO;AAAR,OADiB;AAE3BC,uBAAiB,CAFU;AAG3BQ,gBAAU;AACNC,gBAAQ;AADF;AAHiB,KAAjB,CAAd;AAUAb,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOC,WAAP,CAAmBF,GAAnB;AACAC,aAAOE,SAAP,CAAiBJ,GAAjB;AAEAP;AACH,KALD;AAMH,GAjBD;AAmBAD,KAAG,iCAAH,EAAsC,UAAUC,IAAV,EAAgB;AAClDe,WAAOC,IAAP,CAAY,8BAAZ,EAA4C,EAA5C,EAAgD,UAAUT,GAAV,EAAeC,GAAf,EAAoB;AAChEC,aAAOC,WAAP,CAAmBH,GAAnB;AAEAE,aAAOQ,KAAP,CAAa,CAAb,EAAgBT,GAAhB;AACAR;AACH,KALD;AAMH,GAPD;AASAD,KAAG,2CAAH,EAAgD,UAAUC,IAAV,EAAgB;AAC5D,UAAMC,QAAQd,KAAKe,WAAL,CAAiB;AAC3BC,gBAAU;AAACC,eAAO;AAAR;AADiB,KAAjB,CAAd;AAIAH,UAAMiB,QAAN,CAAe,UAAUX,GAAV,EAAeC,GAAf,EAAoB;AAC/BC,aAAOC,WAAP,CAAmBH,GAAnB;AAEAE,aAAOQ,KAAP,CAAa,CAAb,EAAgBT,GAAhB;AACAR;AACH,KALD;AAMH,GAXD;AAaAD,KAAG,iDAAH,EAAsD,UAAUC,IAAV,EAAgB;AAClE,UAAMC,QAAQb,WAAWc,WAAX,CAAuB;AACjCiB,WAAK;AAD4B,KAAvB,CAAd;AAIAlB,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOC,WAAP,CAAmBH,GAAnB;AACAE,aAAOE,SAAP,CAAiBH,GAAjB;AACH,KAHD;AAKA,UAAMY,UAAUnB,MAAMoB,SAAN,CAAgB;AAC5BC,aAAOC,CAAP,EAAU;AACNvB;AACH;;AAH2B,KAAhB,CAAhB;AAKH,GAfD;AAiBAD,KAAG,iDAAH,EAAsD,UAAUC,IAAV,EAAgB;AAClE,UAAMC,QAAQZ,gBAAgBa,WAAhB,CAA4B;AACtCiB,WAAK;AADiC,KAA5B,CAAd;AAIAlB,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOE,SAAP,CAAiBJ,GAAjB;AACAE,aAAOC,WAAP,CAAmBF,GAAnB;AACH,KAHD;AAKAP,UAAMoB,SAAN,CAAgB;AACZG,gBAAU;AACNxB;AACH;;AAHW,KAAhB;AAKH,GAfD;AAkBAD,KAAG,wCAAH,EAA6C,UAAUC,IAAV,EAAgB;AACzD,UAAMC,QAAQd,KAAKe,WAAL,CAAiB;AAC3BiB,WAAK,CADsB;AAE3BM,sBAAgB;AAFW,KAAjB,CAAd;AAKAxB,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOC,WAAP,CAAmBH,GAAnB;;AAEAmB,QAAEC,IAAF,CAAOnB,GAAP,EAAYoB,QAAQ;AAChBnB,eAAOC,WAAP,CAAmBkB,KAAKH,cAAxB;AACH,OAFD;;AAIAhB,aAAOoB,OAAP,CAAerB,GAAf;AACAC,aAAOqB,OAAP,CAAetB,IAAIuB,MAAJ,KAAe,CAA9B;AAEA/B;AACH,KAXD;AAYH,GAlBD;AAoBAD,KAAG,2CAAH,EAAgD,UAAUC,IAAV,EAAgB;AAC5D,UAAMC,QAAQN,UAAUO,WAAV,CAAsB;AAChC8B,gBAAU;AACNC,eAAO;AADD,OADsB;AAIhCA,aAAO,CAJyB;AAKhCC,oBAAc,CALkB;AAMhCC,YAAM;AACFF,eAAO,CADL;AAEFC,sBAAc,CAFZ;AAGFpB,gBAAQ;AACJmB,iBAAO;AADH;AAHN,OAN0B;AAahCG,mBAAa;AACTH,eAAO,CADE;AAETC,sBAAc;AAFL;AAbmB,KAAtB,CAAd;AAmBAjC,UAAMK,KAAN,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBC,aAAOC,WAAP,CAAmBH,GAAnB;AACAE,aAAOG,QAAP,CAAgBJ,GAAhB,EAAqB,CAArB;;AAEA,YAAM6B,SAASX,EAAEY,KAAF,CAAQ9B,GAAR,CAAf;;AAEAC,aAAOE,SAAP,CAAiB0B,OAAOJ,KAAxB;AACAxB,aAAOC,WAAP,CAAmB2B,OAAOH,YAA1B;AACAzB,aAAOC,WAAP,CAAmB2B,OAAOD,WAA1B;AAEA3B,aAAO8B,QAAP,CAAgBF,OAAOF,IAAvB;AACA1B,aAAOE,SAAP,CAAiB0B,OAAOF,IAAP,CAAYF,KAA7B;AACAxB,aAAOC,WAAP,CAAmB2B,OAAOF,IAAP,CAAYD,YAA/B;AACAzB,aAAOC,WAAP,CAAmB2B,OAAOF,IAAP,CAAYrB,MAA/B;AAEAd;AACH,KAhBD;AAiBH,GArCD;AAuCAD,KAAG,iDAAH,EAAsD,UAAUC,IAAV,EAAgB;AAClE,UAAMC,QAAQN,UAAUO,WAAV,CAAsB;AAChC8B,gBAAU;AACNC,eAAO;AADD,OADsB;AAIhCA,aAAO,CAJyB;AAKhCC,oBAAc,CALkB;AAMhCC,YAAM;AACFF,eAAO,CADL;AAEFC,sBAAc,CAFZ;AAGFpB,gBAAQ;AACJmB,iBAAO;AADH;AAHN,OAN0B;AAahCG,mBAAa;AACTH,eAAO,CADE;AAETC,sBAAc;AAFL;AAbmB,KAAtB,CAAd;AAmBA,UAAMM,SAASvC,MAAMoB,SAAN,EAAf;AAEAoB,YAAQC,OAAR,CAAiBC,CAAD,IAAO;AACnB,UAAIH,OAAOI,KAAP,EAAJ,EAAoB;AAChBD,UAAEE,IAAF;AACA,cAAMrC,MAAMP,MAAMK,KAAN,EAAZ;AAEAG,eAAOG,QAAP,CAAgBJ,GAAhB,EAAqB,CAArB;;AAEA,cAAM6B,SAASX,EAAEY,KAAF,CAAQ9B,GAAR,CAAf;;AAEAC,eAAOE,SAAP,CAAiB0B,OAAOJ,KAAxB;AACAxB,eAAOC,WAAP,CAAmB2B,OAAOH,YAA1B;AACAzB,eAAOC,WAAP,CAAmB2B,OAAOD,WAA1B;AAEA3B,eAAO8B,QAAP,CAAgBF,OAAOF,IAAvB;AACA1B,eAAOE,SAAP,CAAiB0B,OAAOF,IAAP,CAAYF,KAA7B;AACAxB,eAAOC,WAAP,CAAmB2B,OAAOF,IAAP,CAAYD,YAA/B;AACAzB,eAAOC,WAAP,CAAmB2B,OAAOF,IAAP,CAAYrB,MAA/B;AAEAd;AACH;AACJ,KApBD;AAqBH,GA3CD;AA4CH,CAnMD","sourcesContent":["import Demo, {\n    DemoMethod,\n    DemoPublication\n} from './bootstrap/demo.js';\n\nimport Intersect, { CollectionLink as IntersectLink } from './bootstrap/intersect';\n\ndescribe('Exposure Tests', function () {\n    it('Should fetch only allowed data and limitations should be applied', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 3},\n            restrictedField: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n\n            assert.lengthOf(res, 2);\n            done();\n        });\n    });\n\n    it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 3},\n            restrictedField: 1,\n            children: {\n                myself: {\n\n                }\n            }\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(res);\n            assert.isDefined(err);\n\n            done();\n        });\n    });\n\n    it('Should return the correct count', function (done) {\n        Meteor.call('exposure_exposure_test.count', {}, function (err, res) {\n            assert.isUndefined(err);\n\n            assert.equal(3, res);\n            done();\n        })\n    });\n\n    it('Should return the correct count via query', function (done) {\n        const query = Demo.createQuery({\n            $options: {limit: 1}\n        });\n\n        query.getCount(function (err, res) {\n            assert.isUndefined(err);\n\n            assert.equal(3, res);\n            done();\n        })\n    });\n\n    it('Should should not allow publish but only method', function (done) {\n        const query = DemoMethod.createQuery({\n            _id: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.isDefined(res);\n        });\n\n        const handler = query.subscribe({\n            onStop(e) {\n                done();\n            }\n        });\n    });\n\n    it('Should should not allow method but only publish', function (done) {\n        const query = DemoPublication.createQuery({\n            _id: 1\n        });\n\n        query.fetch((err, res) => {\n            assert.isDefined(err);\n            assert.isUndefined(res);\n        });\n\n        query.subscribe({\n            onReady() {\n                done();\n            }\n        });\n    });\n\n\n    it('Should restrict links # restrictLinks ', function (done) {\n        const query = Demo.createQuery({\n            _id: 1,\n            restrictedLink: {}\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n\n            _.each(res, item => {\n                assert.isUndefined(item.restrictedLink)\n            });\n\n            assert.isArray(res);\n            assert.isFalse(res.length === 0);\n\n            done();\n        });\n    });\n\n    it('Should intersect the body graphs - Method', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n\n        query.fetch((err, res) => {\n            assert.isUndefined(err);\n            assert.lengthOf(res, 1);\n\n            const result = _.first(res);\n\n            assert.isDefined(result.value);\n            assert.isUndefined(result.privateValue);\n            assert.isUndefined(result.privateLink);\n\n            assert.isObject(result.link);\n            assert.isDefined(result.link.value);\n            assert.isUndefined(result.link.privateValue);\n            assert.isUndefined(result.link.myself);\n\n            done();\n        });\n    });\n\n    it('Should intersect the body graphs - Subscription', function (done) {\n        const query = Intersect.createQuery({\n            $filters: {\n                value: 'Hello'\n            },\n            value: 1,\n            privateValue: 1,\n            link: {\n                value: 1,\n                privateValue: 1,\n                myself: {\n                    value: 1\n                }\n            },\n            privateLink: {\n                value: 1,\n                privateValue: 1\n            }\n        });\n\n        const handle = query.subscribe();\n\n        Tracker.autorun((c) => {\n            if (handle.ready()) {\n                c.stop();\n                const res = query.fetch();\n\n                assert.lengthOf(res, 1);\n\n                const result = _.first(res);\n\n                assert.isDefined(result.value);\n                assert.isUndefined(result.privateValue);\n                assert.isUndefined(result.privateLink);\n\n                assert.isObject(result.link);\n                assert.isDefined(result.link.value);\n                assert.isUndefined(result.link.privateValue);\n                assert.isUndefined(result.link.myself);\n\n                done();\n            }\n        });\n    })\n});\n"]},"sourceType":"script","hash":"1a5dfd95753532e0571f5dfff646a3e409d406ac"}
