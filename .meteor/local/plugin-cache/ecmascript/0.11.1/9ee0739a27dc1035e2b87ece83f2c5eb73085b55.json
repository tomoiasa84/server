{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"}},"code":"let applyProps;\nmodule.watch(require(\"./applyProps.js\"), {\n  default(v) {\n    applyProps = v;\n  }\n\n}, 0);\nlet assembleMetadata, removeLinkStorages, storeOneResults;\nmodule.watch(require(\"./prepareForDelivery\"), {\n  assembleMetadata(v) {\n    assembleMetadata = v;\n  },\n\n  removeLinkStorages(v) {\n    removeLinkStorages = v;\n  },\n\n  storeOneResults(v) {\n    storeOneResults = v;\n  }\n\n}, 1);\nlet prepareForDelivery;\nmodule.watch(require(\"./prepareForDelivery\"), {\n  default(v) {\n    prepareForDelivery = v;\n  }\n\n}, 2);\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n  let {\n    filters,\n    options\n  } = applyProps(node);\n  let results = [];\n\n  if (parentObject) {\n    let accessor = node.linker.createLink(parentObject, node.collection);\n\n    if (node.isVirtual) {\n      options.fields = options.fields || {};\n\n      _.extend(options.fields, {\n        [node.linkStorageField]: 1\n      });\n    }\n\n    results = accessor.find(filters, options).fetch();\n  } else {\n    results = node.collection.find(filters, options).fetch();\n  }\n\n  _.each(node.collectionNodes, collectionNode => {\n    _.each(results, result => {\n      const collectionNodeResults = fetch(collectionNode, result);\n      result[collectionNode.linkName] = collectionNodeResults; //delete result[node.linker.linkStorageField];\n\n      /**\n       * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n       * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n       * the results?\n       *\n       * Other possible ways:\n       * - do something like assemble() in storeHypernovaResults\n       * - pass node.results to accessor above and find with sift\n       */\n\n      const currentIds = _.pluck(collectionNode.results, '_id');\n\n      collectionNode.results.push(...collectionNodeResults.filter(res => !_.contains(currentIds, res._id)));\n    });\n  });\n\n  return results;\n}\n\nmodule.exportDefault((node, params) => {\n  node.results = fetch(node);\n  prepareForDelivery(node, params);\n  return node.results;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"],"names":["applyProps","module","watch","require","default","v","assembleMetadata","removeLinkStorages","storeOneResults","prepareForDelivery","fetch","node","parentObject","filters","options","results","accessor","linker","createLink","collection","isVirtual","fields","_","extend","linkStorageField","find","each","collectionNodes","collectionNode","result","collectionNodeResults","linkName","currentIds","pluck","push","filter","res","contains","_id","exportDefault","params"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,UAAQC,CAAR,EAAU;AAACL,iBAAWK,CAAX;AAAa;;AAAzB,CAAxC,EAAmE,CAAnE;AAAsE,IAAIC,gBAAJ,EAAqBC,kBAArB,EAAwCC,eAAxC;AAAwDP,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACG,mBAAiBD,CAAjB,EAAmB;AAACC,uBAAiBD,CAAjB;AAAmB,GAAxC;;AAAyCE,qBAAmBF,CAAnB,EAAqB;AAACE,yBAAmBF,CAAnB;AAAqB,GAApF;;AAAqFG,kBAAgBH,CAAhB,EAAkB;AAACG,sBAAgBH,CAAhB;AAAkB;;AAA1H,CAA7C,EAAyK,CAAzK;AAA4K,IAAII,kBAAJ;AAAuBR,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACC,UAAQC,CAAR,EAAU;AAACI,yBAAmBJ,CAAnB;AAAqB;;AAAjC,CAA7C,EAAgF,CAAhF;;AAIhV;;;;;;;AAOA,SAASK,KAAT,CAAeC,IAAf,EAAqBC,YAArB,EAAmC;AAC/B,MAAI;AAACC,WAAD;AAAUC;AAAV,MAAqBd,WAAWW,IAAX,CAAzB;AAEA,MAAII,UAAU,EAAd;;AAEA,MAAIH,YAAJ,EAAkB;AACd,QAAII,WAAWL,KAAKM,MAAL,CAAYC,UAAZ,CAAuBN,YAAvB,EAAqCD,KAAKQ,UAA1C,CAAf;;AAEA,QAAIR,KAAKS,SAAT,EAAoB;AAChBN,cAAQO,MAAR,GAAiBP,QAAQO,MAAR,IAAkB,EAAnC;;AACAC,QAAEC,MAAF,CAAST,QAAQO,MAAjB,EAAyB;AACrB,SAACV,KAAKa,gBAAN,GAAyB;AADJ,OAAzB;AAGH;;AAEDT,cAAUC,SAASS,IAAT,CAAcZ,OAAd,EAAuBC,OAAvB,EAAgCJ,KAAhC,EAAV;AACH,GAXD,MAWO;AACHK,cAAUJ,KAAKQ,UAAL,CAAgBM,IAAhB,CAAqBZ,OAArB,EAA8BC,OAA9B,EAAuCJ,KAAvC,EAAV;AACH;;AAEDY,IAAEI,IAAF,CAAOf,KAAKgB,eAAZ,EAA6BC,kBAAkB;AAC3CN,MAAEI,IAAF,CAAOX,OAAP,EAAgBc,UAAU;AACtB,YAAMC,wBAAwBpB,MAAMkB,cAAN,EAAsBC,MAAtB,CAA9B;AACAA,aAAOD,eAAeG,QAAtB,IAAkCD,qBAAlC,CAFsB,CAGtB;;AAEA;;;;;;;;;;AAUA,YAAME,aAAaV,EAAEW,KAAF,CAAQL,eAAeb,OAAvB,EAAgC,KAAhC,CAAnB;;AACAa,qBAAeb,OAAf,CAAuBmB,IAAvB,CAA4B,GAAGJ,sBAAsBK,MAAtB,CAA6BC,OAAO,CAACd,EAAEe,QAAF,CAAWL,UAAX,EAAuBI,IAAIE,GAA3B,CAArC,CAA/B;AACH,KAjBD;AAkBH,GAnBD;;AAqBA,SAAOvB,OAAP;AACH;;AArDDd,OAAOsC,aAAP,CAuDe,CAAC5B,IAAD,EAAO6B,MAAP,KAAkB;AAC7B7B,OAAKI,OAAL,GAAeL,MAAMC,IAAN,CAAf;AAEAF,qBAAmBE,IAAnB,EAAyB6B,MAAzB;AAEA,SAAO7B,KAAKI,OAAZ;AACH,CA7DD","sourcesContent":["import applyProps from './applyProps.js';\nimport { assembleMetadata, removeLinkStorages, storeOneResults } from './prepareForDelivery';\nimport prepareForDelivery from './prepareForDelivery';\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n    let {filters, options} = applyProps(node);\n\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            const collectionNodeResults = fetch(collectionNode, result);\n            result[collectionNode.linkName] = collectionNodeResults;\n            //delete result[node.linker.linkStorageField];\n\n            /**\n             * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n             * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n             * the results?\n             *\n             * Other possible ways:\n             * - do something like assemble() in storeHypernovaResults\n             * - pass node.results to accessor above and find with sift\n             */\n\n            const currentIds = _.pluck(collectionNode.results, '_id');\n            collectionNode.results.push(...collectionNodeResults.filter(res => !_.contains(currentIds, res._id)));\n        })\n    });\n\n    return results;\n}\n\nexport default (node, params) => {\n    node.results = fetch(node);\n\n    prepareForDelivery(node, params);\n\n    return node.results;\n}\n"]},"sourceType":"script","hash":"9ee0739a27dc1035e2b87ece83f2c5eb73085b55"}
