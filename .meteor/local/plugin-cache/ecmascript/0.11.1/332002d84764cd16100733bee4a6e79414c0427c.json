{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/accounts/client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/__tests__/accounts/client.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/accounts/client.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/accounts/client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/__tests__/accounts/client.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2.default)([\"\\n      query {\\n        me {\\n          _id\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar client, wsLink;\nmodule.watch(require(\"../apolloClient\"), {\n  \"default\": function (v) {\n    client = v;\n  },\n  wsLink: function (v) {\n    wsLink = v;\n  }\n}, 0);\nvar gql;\nmodule.watch(require(\"graphql-tag\"), {\n  \"default\": function (v) {\n    gql = v;\n  }\n}, 1);\nvar loginWithPassword, logout;\nmodule.watch(require(\"meteor-apollo-accounts\"), {\n  loginWithPassword: function (v) {\n    loginWithPassword = v;\n  },\n  logout: function (v) {\n    logout = v;\n  }\n}, 2);\nvar resolve;\nmodule.watch(require(\"dns\"), {\n  resolve: function (v) {\n    resolve = v;\n  }\n}, 3);\nvar PASSWORD = '12345';\ndescribe('Accounts', function () {\n  it('Should allow me to login', function () {\n    function _callee() {\n      var username, userId;\n      return _regenerator.default.async(function () {\n        function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                username = 'account-1';\n                _context.next = 3;\n                return _regenerator.default.awrap(loginWithPassword({\n                  username: username,\n                  password: PASSWORD\n                }, client));\n\n              case 3:\n                userId = _context.sent;\n                assert.isString(userId);\n                _context.next = 7;\n                return _regenerator.default.awrap(logout(client));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return _callee$;\n      }(), null, this);\n    }\n\n    return _callee;\n  }());\n  it('Should throw an error if invalid login', function (done) {\n    var username = 'accountZ-2';\n    loginWithPassword({\n      username: username,\n      password: PASSWORD\n    }, client).catch(function (e) {\n      done();\n    });\n  });\n  it('Should properly store the token in such a way that I am identified', function () {\n    function _callee2() {\n      var username, userId, query, response, me;\n      return _regenerator.default.async(function () {\n        function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                username = 'account-1';\n                _context2.next = 3;\n                return _regenerator.default.awrap(loginWithPassword({\n                  username: username,\n                  password: PASSWORD\n                }, client));\n\n              case 3:\n                userId = _context2.sent;\n                query = gql(_templateObject());\n                _context2.next = 7;\n                return _regenerator.default.awrap(client.query({\n                  query: query\n                }));\n\n              case 7:\n                response = _context2.sent;\n                me = response.data.me;\n                assert.equal(userId, me._id);\n                _context2.next = 12;\n                return _regenerator.default.awrap(logout(client));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }\n\n        return _callee2$;\n      }(), null, this);\n    }\n\n    return _callee2;\n  }()); // TODO: It seems that the subscription is authenticated properly\n  // However, due to the nature of how subscriptions work, if a new message is received before asyncIterator is returned\n  // That message doesn't reach the client\n  // it('Should identify subscription authentication', async () => {\n  //   const username = 'account-1';\n  //   const userId = await loginWithPassword(\n  //     { username, password: PASSWORD },\n  //     client\n  //   );\n  //   assert.isString(userId);\n  //   wsLink.subscriptionClient.close(true);\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       const query = gql`\n  //         subscription {\n  //           me {\n  //             event\n  //             doc\n  //           }\n  //         }\n  //       `;\n  //       const observable = client.subscribe({ query });\n  //       const subscription = observable.subscribe(\n  //         x => {\n  //           console.log(x);\n  //         },\n  //         () => {\n  //           console.log('err');\n  //         },\n  //         () => {\n  //           console.log('Finished');\n  //         }\n  //       );\n  //     }, 500);\n  //   });\n  // });\n});","map":{"version":3,"sources":["packages/cultofcoders:apollo/__tests__/accounts/client.js"],"names":["client","wsLink","module","watch","require","v","gql","loginWithPassword","logout","resolve","PASSWORD","describe","it","username","password","userId","assert","isString","catch","done","query","response","me","data","equal","_id"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAIA,MAAJ,EAAWC,MAAX;AAAkBC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA,uBAASC,CAAT,EAAW;AAACL,aAAOK,CAAP;AAAS,GAArB;AAAsBJ,QAAtB,YAA6BI,CAA7B,EAA+B;AAACJ,aAAOI,CAAP;AAAS;AAAzC,CAAxC,EAAmF,CAAnF;AAAsF,IAAIC,GAAJ;AAAQJ,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAAA,uBAASC,CAAT,EAAW;AAACC,UAAID,CAAJ;AAAM;AAAlB,CAApC,EAAwD,CAAxD;AAA2D,IAAIE,iBAAJ,EAAsBC,MAAtB;AAA6BN,OAAOC,KAAP,CAAaC,QAAQ,wBAAR,CAAb,EAA+C;AAACG,mBAAD,YAAmBF,CAAnB,EAAqB;AAACE,wBAAkBF,CAAlB;AAAoB,GAA1C;AAA2CG,QAA3C,YAAkDH,CAAlD,EAAoD;AAACG,aAAOH,CAAP;AAAS;AAA9D,CAA/C,EAA+G,CAA/G;AAAkH,IAAII,OAAJ;AAAYP,OAAOC,KAAP,CAAaC,QAAQ,KAAR,CAAb,EAA4B;AAACK,SAAD,YAASJ,CAAT,EAAW;AAACI,cAAQJ,CAAR;AAAU;AAAtB,CAA5B,EAAoD,CAApD;AAKtU,IAAMK,WAAW,OAAjB;AAEAC,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,0BAAH;AAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,wBADuB,GACZ,WADY;AAAA;AAAA,kDAERN,kBACnB;AAAEM,oCAAF;AAAYC,4BAAUJ;AAAtB,iBADmB,EAEnBV,MAFmB,CAFQ;;AAAA;AAEvBe,sBAFuB;AAO7BC,uBAAOC,QAAP,CAAgBF,MAAhB;AAP6B;AAAA,kDAQvBP,OAAOR,MAAP,CARuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAA/B;AAAA;AAWAY,KAAG,wCAAH,EAA6C,gBAAQ;AACnD,QAAMC,WAAW,YAAjB;AACAN,sBAAkB;AAAEM,wBAAF;AAAYC,gBAAUJ;AAAtB,KAAlB,EAAoDV,MAApD,EAA4DkB,KAA5D,CAAkE,aAAK;AACrEC;AACD,KAFD;AAGD,GALD;AAOAP,KAAG,oEAAH;AAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACjEC,wBADiE,GACtD,WADsD;AAAA;AAAA,kDAElDN,kBACnB;AAAEM,oCAAF;AAAYC,4BAAUJ;AAAtB,iBADmB,EAEnBV,MAFmB,CAFkD;;AAAA;AAEjEe,sBAFiE;AAOjEK,qBAPiE,GAOzDd,GAPyD;AAAA;AAAA,kDAehDN,OAAOoB,KAAP,CAAa;AAClCA;AADkC,iBAAb,CAfgD;;AAAA;AAejEC,wBAfiE;AAmB/DC,kBAnB+D,GAmBxDD,SAASE,IAnB+C,CAmB/DD,EAnB+D;AAqBvEN,uBAAOQ,KAAP,CAAaT,MAAb,EAAqBO,GAAGG,GAAxB;AArBuE;AAAA,kDAsBjEjB,OAAOR,MAAP,CAtBiE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAzE;AAAA,OAnByB,CA4CzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApFD","sourcesContent":["import client, { wsLink } from '../apolloClient';\nimport gql from 'graphql-tag';\nimport { loginWithPassword, logout } from 'meteor-apollo-accounts';\nimport { resolve } from 'dns';\n\nconst PASSWORD = '12345';\n\ndescribe('Accounts', () => {\n  it('Should allow me to login', async () => {\n    const username = 'account-1';\n    const userId = await loginWithPassword(\n      { username, password: PASSWORD },\n      client\n    );\n\n    assert.isString(userId);\n    await logout(client);\n  });\n\n  it('Should throw an error if invalid login', done => {\n    const username = 'accountZ-2';\n    loginWithPassword({ username, password: PASSWORD }, client).catch(e => {\n      done();\n    });\n  });\n\n  it('Should properly store the token in such a way that I am identified', async () => {\n    const username = 'account-1';\n    const userId = await loginWithPassword(\n      { username, password: PASSWORD },\n      client\n    );\n\n    const query = gql`\n      query {\n        me {\n          _id\n        }\n      }\n    `;\n\n    const response = await client.query({\n      query,\n    });\n\n    const { me } = response.data;\n\n    assert.equal(userId, me._id);\n    await logout(client);\n  });\n\n  // TODO: It seems that the subscription is authenticated properly\n  // However, due to the nature of how subscriptions work, if a new message is received before asyncIterator is returned\n  // That message doesn't reach the client\n\n  // it('Should identify subscription authentication', async () => {\n  //   const username = 'account-1';\n  //   const userId = await loginWithPassword(\n  //     { username, password: PASSWORD },\n  //     client\n  //   );\n\n  //   assert.isString(userId);\n  //   wsLink.subscriptionClient.close(true);\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       const query = gql`\n  //         subscription {\n  //           me {\n  //             event\n  //             doc\n  //           }\n  //         }\n  //       `;\n\n  //       const observable = client.subscribe({ query });\n  //       const subscription = observable.subscribe(\n  //         x => {\n  //           console.log(x);\n  //         },\n  //         () => {\n  //           console.log('err');\n  //         },\n  //         () => {\n  //           console.log('Finished');\n  //         }\n  //       );\n  //     }, 500);\n  //   });\n  // });\n});\n"]},"sourceType":"script","hash":"332002d84764cd16100733bee4a6e79414c0427c"}
