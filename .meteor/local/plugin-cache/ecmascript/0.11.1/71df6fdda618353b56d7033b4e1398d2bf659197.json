{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/cache.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/herteby:denormalize/cache.js","filename":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/cache.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/cache.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/herteby:denormalize/cache.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nmodule.export({\n  migrate: function () {\n    return migrate;\n  },\n  autoMigrate: function () {\n    return autoMigrate;\n  }\n});\n\nvar _;\n\nmodule.watch(require(\"lodash\"), {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 0);\nvar addMigration, migrate, autoMigrate;\nmodule.watch(require(\"./migrations.js\"), {\n  addMigration: function (v) {\n    addMigration = v;\n  },\n  migrate: function (v) {\n    migrate = v;\n  },\n  autoMigrate: function (v) {\n    autoMigrate = v;\n  }\n}, 1);\n\nfunction flattenFields(object, prefix) {\n  prefix = prefix || '';\n  var fields = [];\n\n  _.each(object, function (val, key) {\n    if ((0, _typeof2.default)(val) == 'object') {\n      fields = _.union(fields, flattenFields(val, prefix + key + '.'));\n    } else {\n      fields.push(prefix + key);\n    }\n  });\n\n  return fields;\n}\n\nMongo.Collection.prototype.cache = function (options) {\n  var _fields;\n\n  check(options, {\n    collection: Match.Where(function (collection) {\n      return collection instanceof Mongo.Collection;\n    }),\n    fields: Match.OneOf([String], Object),\n    type: Match.OneOf('one', 'many', 'inversed', 'inverse', 'many-inversed', 'many-inverse'),\n    referenceField: String,\n    cacheField: String,\n    bypassSchema: Match.Optional(Boolean)\n  });\n  if (options.type == 'inverse') options.type = 'inversed'; //Not sure which is best, so why not support both and be typo-friendly\n\n  if (options.type == 'many-inverse') options.type = 'many-inversed'; //Bypass collection2 schemas\n\n  var parentCollection = options.bypassSchema && Package['aldeed:collection2'] ? this._collection : this;\n  var childCollection = options.collection;\n  var type = options.type;\n  var referenceField = options.referenceField;\n  var cacheField = options.cacheField;\n  var watchedFields = options.fields;\n\n  if (referenceField.split(/[.:]/)[0] == cacheField.split(/[.:]/)[0]) {\n    throw new Error('referenceField and cacheField must not share the same top field');\n  }\n\n  if (!_.isArray(watchedFields)) {\n    watchedFields = flattenFields(watchedFields);\n  }\n\n  var childFields = _.clone(watchedFields);\n\n  if (type !== 'one') {\n    if (!_.includes(childFields, '_id')) {\n      childFields.push('_id');\n    }\n\n    _.pull(childFields, referenceField);\n  }\n\n  var childOpts = {\n    transform: null,\n    fields: {\n      _id: 0\n    }\n  };\n\n  _.each(childFields, function (field) {\n    return childOpts.fields[field] = 1;\n  });\n\n  var parentOpts = {\n    transform: null,\n    fields: (_fields = {\n      _id: 1\n    }, _fields[cacheField] = 1, _fields)\n  };\n\n  if (type !== 'inversed' && type !== 'many-inversed') {\n    parentOpts.fields[referenceField.split(':')[0]] = 1;\n  }\n\n  var idField, referencePath;\n\n  if (type == 'many' || type == 'many-inversed') {\n    referencePath = referenceField.replace(':', '.');\n    idField = referenceField.split(':')[1];\n    referenceField = referenceField.split(':')[0];\n  }\n\n  if (type == 'inversed' || type == 'many-inversed' && !_.includes(watchedFields, referencePath)) {\n    watchedFields.push(referencePath || referenceField);\n  }\n\n  var topFields = _.uniq(watchedFields.map(function (field) {\n    return field.split('.')[0];\n  }));\n\n  function getNestedReferences(document) {\n    //Used for nested references in \"many\" links\n    var references = _.get(document, referenceField) || [];\n\n    if (idField && references.length) {\n      references = _.map(references, function (item) {\n        return _.get(item, idField);\n      });\n    }\n\n    return _.uniq(_.flatten(references));\n  }\n\n  if (type == 'one') {\n    var insert = function () {\n      function insert(userId, parent) {\n        if (_.get(parent, referenceField)) {\n          var child = childCollection.findOne(_.get(parent, referenceField), childOpts);\n\n          if (child) {\n            var _$set;\n\n            parentCollection.update(parent._id, {\n              $set: (_$set = {}, _$set[cacheField] = child, _$set)\n            });\n          }\n        }\n      }\n\n      return insert;\n    }();\n\n    addMigration(parentCollection, insert, options);\n    parentCollection.after.insert(insert);\n    parentCollection.after.update(function (userId, parent, changedFields) {\n      if (_.includes(changedFields, referenceField.split('.')[0])) {\n        var child = _.get(parent, referenceField) && childCollection.findOne(_.get(parent, referenceField), childOpts);\n\n        if (child) {\n          var _$set2;\n\n          parentCollection.update(parent._id, {\n            $set: (_$set2 = {}, _$set2[cacheField] = child, _$set2)\n          });\n        } else {\n          var _$unset;\n\n          parentCollection.update(parent._id, {\n            $unset: (_$unset = {}, _$unset[cacheField] = 1, _$unset)\n          });\n        }\n      }\n    });\n    childCollection.after.insert(function (userId, child) {\n      var _parentCollection$upd, _$set3;\n\n      var pickedChild = _.pick(child, childFields);\n\n      parentCollection.update((_parentCollection$upd = {}, _parentCollection$upd[referenceField] = child._id, _parentCollection$upd), {\n        $set: (_$set3 = {}, _$set3[cacheField] = pickedChild, _$set3)\n      }, {\n        multi: true\n      });\n    });\n    childCollection.after.update(function (userId, child, changedFields) {\n      if (_.intersection(changedFields, topFields).length) {\n        var _parentCollection$upd2, _$set4;\n\n        var pickedChild = _.pick(child, childFields);\n\n        parentCollection.update((_parentCollection$upd2 = {}, _parentCollection$upd2[referenceField] = child._id, _parentCollection$upd2), {\n          $set: (_$set4 = {}, _$set4[cacheField] = pickedChild, _$set4)\n        }, {\n          multi: true\n        });\n      }\n    });\n    childCollection.after.remove(function (userId, child) {\n      var _parentCollection$upd3, _$unset2;\n\n      parentCollection.update((_parentCollection$upd3 = {}, _parentCollection$upd3[referenceField] = child._id, _parentCollection$upd3), {\n        $unset: (_$unset2 = {}, _$unset2[cacheField] = 1, _$unset2)\n      }, {\n        multi: true\n      });\n    });\n  } else if (type == 'many') {\n    var _insert = function () {\n      function insert(userId, parent) {\n        var references = getNestedReferences(parent);\n\n        if (references.length) {\n          var _$set5;\n\n          var children = childCollection.find({\n            _id: {\n              $in: references\n            }\n          }, childOpts).fetch();\n          parentCollection.update(parent._id, {\n            $set: (_$set5 = {}, _$set5[cacheField] = children, _$set5)\n          });\n        } else {\n          var _$set6;\n\n          parentCollection.update(parent._id, {\n            $set: (_$set6 = {}, _$set6[cacheField] = [], _$set6)\n          });\n        }\n      }\n\n      return insert;\n    }();\n\n    addMigration(parentCollection, _insert, options);\n    parentCollection.after.insert(_insert);\n    parentCollection.after.update(function (userId, parent, changedFields) {\n      if (_.includes(changedFields, referencePath.split('.')[0])) {\n        var references = getNestedReferences(parent);\n\n        if (references.length) {\n          var _$set7;\n\n          var children = childCollection.find({\n            _id: {\n              $in: references\n            }\n          }, childOpts).fetch();\n          parentCollection.update(parent._id, {\n            $set: (_$set7 = {}, _$set7[cacheField] = children, _$set7)\n          });\n        } else {\n          var _$set8;\n\n          parentCollection.update(parent._id, {\n            $set: (_$set8 = {}, _$set8[cacheField] = [], _$set8)\n          });\n        }\n      }\n    });\n    childCollection.after.insert(function (userId, child) {\n      var _parentCollection$upd4, _$push;\n\n      var pickedChild = _.pick(child, childFields);\n\n      parentCollection.update((_parentCollection$upd4 = {}, _parentCollection$upd4[referencePath] = child._id, _parentCollection$upd4), {\n        $push: (_$push = {}, _$push[cacheField] = pickedChild, _$push)\n      }, {\n        multi: true\n      });\n    });\n    childCollection.after.update(function (userId, child, changedFields) {\n      if (_.intersection(changedFields, topFields).length) {\n        var _parentCollection$fin;\n\n        var pickedChild = _.pick(child, childFields);\n\n        parentCollection.find((_parentCollection$fin = {}, _parentCollection$fin[referencePath] = child._id, _parentCollection$fin), parentOpts).forEach(function (parent) {\n          var index = _.findIndex(_.get(parent, cacheField), {\n            _id: child._id\n          });\n\n          if (index > -1) {\n            var _$set9;\n\n            parentCollection.update(parent._id, {\n              $set: (_$set9 = {}, _$set9[cacheField + '.' + index] = pickedChild, _$set9)\n            });\n          } else {\n            var _$push2;\n\n            parentCollection.update(parent._id, {\n              $push: (_$push2 = {}, _$push2[cacheField] = pickedChild, _$push2)\n            });\n          }\n        });\n      }\n    });\n    childCollection.after.remove(function (userId, child) {\n      var _parentCollection$upd5, _$pull;\n\n      parentCollection.update((_parentCollection$upd5 = {}, _parentCollection$upd5[referencePath] = child._id, _parentCollection$upd5), {\n        $pull: (_$pull = {}, _$pull[cacheField] = {\n          _id: child._id\n        }, _$pull)\n      }, {\n        multi: true\n      });\n    });\n  } else if (type == 'inversed') {\n    var _insert2 = function () {\n      function insert(userId, parent) {\n        var _childCollection$find, _$set10;\n\n        var children = childCollection.find((_childCollection$find = {}, _childCollection$find[referenceField] = parent._id, _childCollection$find), childOpts).fetch();\n        parentCollection.update(parent._id, {\n          $set: (_$set10 = {}, _$set10[cacheField] = children, _$set10)\n        });\n      }\n\n      return insert;\n    }();\n\n    addMigration(parentCollection, _insert2, options);\n    parentCollection.after.insert(_insert2);\n    parentCollection.after.update(function (userId, parent, changedFields) {\n      if (_.includes(changedFields, referenceField.split('.')[0])) {\n        if (_.get(parent, referenceField)) {\n          var _childCollection$find2, _$set11;\n\n          var children = childCollection.find((_childCollection$find2 = {}, _childCollection$find2[referenceField] = parent._id, _childCollection$find2), childOpts).fetch();\n          parentCollection.update(parent._id, {\n            $set: (_$set11 = {}, _$set11[cacheField] = children, _$set11)\n          });\n        } else {\n          var _$set12;\n\n          parentCollection.update(parent._id, {\n            $set: (_$set12 = {}, _$set12[cacheField] = [], _$set12)\n          });\n        }\n      }\n    });\n    childCollection.after.insert(function (userId, child) {\n      var pickedChild = _.pick(child, childFields);\n\n      if (_.get(child, referenceField)) {\n        var _$push3;\n\n        parentCollection.update({\n          _id: _.get(child, referenceField)\n        }, {\n          $push: (_$push3 = {}, _$push3[cacheField] = pickedChild, _$push3)\n        });\n      }\n    });\n    childCollection.after.update(function (userId, child, changedFields) {\n      if (_.intersection(changedFields, topFields).length) {\n        var pickedChild = _.pick(child, childFields);\n\n        var previousId = this.previous && _.get(this.previous, referenceField);\n\n        if (previousId && previousId !== _.get(child, referenceField)) {\n          var _$pull2;\n\n          parentCollection.update({\n            _id: previousId\n          }, {\n            $pull: (_$pull2 = {}, _$pull2[cacheField] = {\n              _id: child._id\n            }, _$pull2)\n          });\n        }\n\n        parentCollection.find({\n          _id: _.get(child, referenceField)\n        }, parentOpts).forEach(function (parent) {\n          var index = _.findIndex(_.get(parent, cacheField), {\n            _id: child._id\n          });\n\n          if (index > -1) {\n            var _$set13;\n\n            parentCollection.update(parent._id, {\n              $set: (_$set13 = {}, _$set13[cacheField + '.' + index] = pickedChild, _$set13)\n            });\n          } else {\n            var _$push4;\n\n            parentCollection.update(parent._id, {\n              $push: (_$push4 = {}, _$push4[cacheField] = pickedChild, _$push4)\n            });\n          }\n        });\n      }\n    });\n    childCollection.after.remove(function (userId, child) {\n      var _$pull3;\n\n      parentCollection.update({\n        _id: _.get(child, referenceField)\n      }, {\n        $pull: (_$pull3 = {}, _$pull3[cacheField] = {\n          _id: child._id\n        }, _$pull3)\n      });\n    });\n  } else if (type == 'many-inversed') {\n    var _insert3 = function () {\n      function insert(userId, parent) {\n        var _childCollection$find3, _$set14;\n\n        var children = childCollection.find((_childCollection$find3 = {}, _childCollection$find3[referencePath] = parent._id, _childCollection$find3), childOpts).fetch();\n        parentCollection.update(parent._id, {\n          $set: (_$set14 = {}, _$set14[cacheField] = children, _$set14)\n        });\n      }\n\n      return insert;\n    }();\n\n    addMigration(parentCollection, _insert3, options);\n    parentCollection.after.insert(_insert3);\n    parentCollection.after.update(function (userId, parent, changedFields) {\n      if (_.includes(changedFields, referencePath.split('.')[0])) {\n        var _childCollection$find4, _$set15;\n\n        var children = childCollection.find((_childCollection$find4 = {}, _childCollection$find4[referencePath] = parent._id, _childCollection$find4), childOpts).fetch();\n        parentCollection.update(parent._id, {\n          $set: (_$set15 = {}, _$set15[cacheField] = children, _$set15)\n        });\n      }\n    });\n    childCollection.after.insert(function (userId, child) {\n      var references = getNestedReferences(child);\n\n      if (references.length) {\n        var _$push5;\n\n        var pickedChild = _.pick(child, childFields);\n\n        parentCollection.update({\n          _id: {\n            $in: references\n          }\n        }, {\n          $push: (_$push5 = {}, _$push5[cacheField] = pickedChild, _$push5)\n        }, {\n          multi: true\n        });\n      }\n    });\n    childCollection.after.update(function (userId, child, changedFields) {\n      if (_.intersection(changedFields, topFields).length) {\n        var references = getNestedReferences(child);\n        var previousIds = this.previous && getNestedReferences(this.previous);\n        previousIds = _.difference(previousIds, references);\n\n        if (previousIds.length) {\n          var _$pull4;\n\n          parentCollection.update({\n            _id: {\n              $in: previousIds\n            }\n          }, {\n            $pull: (_$pull4 = {}, _$pull4[cacheField] = {\n              _id: child._id\n            }, _$pull4)\n          }, {\n            multi: true\n          });\n        }\n\n        if (references.length) {\n          var pickedChild = _.pick(child, childFields);\n\n          parentCollection.find({\n            _id: {\n              $in: references\n            }\n          }, parentOpts).forEach(function (parent) {\n            var index = _.findIndex(_.get(parent, cacheField), {\n              _id: child._id\n            });\n\n            if (index > -1) {\n              var _$set16;\n\n              parentCollection.update(parent._id, {\n                $set: (_$set16 = {}, _$set16[cacheField + '.' + index] = pickedChild, _$set16)\n              });\n            } else {\n              var _$push6;\n\n              parentCollection.update(parent._id, {\n                $push: (_$push6 = {}, _$push6[cacheField] = pickedChild, _$push6)\n              });\n            }\n          });\n        }\n      }\n    });\n    childCollection.after.remove(function (userId, child) {\n      var references = getNestedReferences(child);\n\n      if (references.length) {\n        var _$pull5;\n\n        parentCollection.update({\n          _id: {\n            $in: references\n          }\n        }, {\n          $pull: (_$pull5 = {}, _$pull5[cacheField] = {\n            _id: child._id\n          }, _$pull5)\n        }, {\n          multi: true\n        });\n      }\n    });\n  }\n};","map":{"version":3,"sources":["packages/herteby:denormalize/cache.js"],"names":["module","export","migrate","autoMigrate","_","watch","require","v","addMigration","flattenFields","object","prefix","fields","each","val","key","union","push","Mongo","Collection","prototype","cache","options","check","collection","Match","Where","OneOf","String","Object","type","referenceField","cacheField","bypassSchema","Optional","Boolean","parentCollection","Package","_collection","childCollection","watchedFields","split","Error","isArray","childFields","clone","includes","pull","childOpts","transform","_id","field","parentOpts","idField","referencePath","replace","topFields","uniq","map","getNestedReferences","document","references","get","length","item","flatten","insert","userId","parent","child","findOne","update","$set","after","changedFields","$unset","pickedChild","pick","multi","intersection","remove","children","find","$in","fetch","$push","forEach","index","findIndex","$pull","previousId","previous","previousIds","difference"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport {addMigration, migrate, autoMigrate} from './migrations.js'\n\nexport {migrate, autoMigrate}\n\nfunction flattenFields(object, prefix){\n  prefix = prefix || ''\n  let fields = []\n  _.each(object, (val, key) => {\n    if(typeof val == 'object'){\n      fields = _.union(fields, flattenFields(val, prefix + key + '.'))\n    } else {\n      fields.push(prefix + key)\n    }\n  })\n  return fields\n}\n\nMongo.Collection.prototype.cache = function(options){\n  check(options, {\n    collection:Match.Where(collection => collection instanceof Mongo.Collection),\n    fields:Match.OneOf([String], Object),\n    type:Match.OneOf('one', 'many', 'inversed', 'inverse', 'many-inversed', 'many-inverse'),\n    referenceField:String,\n    cacheField:String,\n    bypassSchema:Match.Optional(Boolean)\n  })\n  if(options.type == 'inverse') options.type = 'inversed' //Not sure which is best, so why not support both and be typo-friendly\n  if(options.type == 'many-inverse') options.type = 'many-inversed'\n\n  //Bypass collection2 schemas\n  let parentCollection = options.bypassSchema && Package['aldeed:collection2'] ? this._collection : this\n  let childCollection = options.collection\n  let type = options.type\n  let referenceField = options.referenceField\n  let cacheField = options.cacheField\n  let watchedFields = options.fields\n\n  if(referenceField.split(/[.:]/)[0] == cacheField.split(/[.:]/)[0]){\n    throw new Error('referenceField and cacheField must not share the same top field')\n  }\n\n  if(!_.isArray(watchedFields)){\n    watchedFields = flattenFields(watchedFields)\n  }\n\n  let childFields = _.clone(watchedFields)\n  if(type !== 'one'){\n    if(!_.includes(childFields, '_id')){\n      childFields.push('_id')\n    }\n    _.pull(childFields, referenceField)\n  }\n  let childOpts = {transform:null, fields:{_id:0}}\n  _.each(childFields, field => childOpts.fields[field] = 1)\n\n  let parentOpts = {transform:null, fields:{_id:1, [cacheField]:1}}\n  if(type !== 'inversed' && type !== 'many-inversed'){\n    parentOpts.fields[referenceField.split(':')[0]] = 1\n  }\n\n  let idField, referencePath\n  if(type == 'many' || type == 'many-inversed'){\n    referencePath = referenceField.replace(':', '.')\n    idField = referenceField.split(':')[1]\n    referenceField = referenceField.split(':')[0]\n  }\n\n  if(type == 'inversed' || type == 'many-inversed' && !_.includes(watchedFields, referencePath)){\n    watchedFields.push(referencePath || referenceField)\n  }\n\n  let topFields = _.uniq(watchedFields.map(field => field.split('.')[0]))\n\n  function getNestedReferences(document){ //Used for nested references in \"many\" links\n    let references = _.get(document, referenceField) || []\n    if(idField && references.length){\n      references = _.map(references, item => _.get(item, idField))\n    }\n    return _.uniq(_.flatten(references))\n  }\n\n\n  if(type == 'one'){\n    let insert = function insert(userId, parent){\n      if(_.get(parent, referenceField)){\n        let child = childCollection.findOne(_.get(parent, referenceField), childOpts)\n        if(child){\n          parentCollection.update(parent._id, {$set:{[cacheField]:child}})\n        }\n      }\n    }\n    addMigration(parentCollection, insert, options)\n    parentCollection.after.insert(insert)\n\n    parentCollection.after.update(function(userId, parent, changedFields){\n      if(_.includes(changedFields, referenceField.split('.')[0])){\n        let child = _.get(parent, referenceField) && childCollection.findOne(_.get(parent, referenceField), childOpts)\n        if(child){\n          parentCollection.update(parent._id, {$set:{[cacheField]:child}})\n        } else {\n          parentCollection.update(parent._id, {$unset:{[cacheField]:1}})\n        }\n      }\n    })\n\n    childCollection.after.insert(function(userId, child){\n      let pickedChild = _.pick(child, childFields)\n      parentCollection.update({[referenceField]:child._id}, {$set:{[cacheField]:pickedChild}}, {multi:true})\n    })\n\n    childCollection.after.update(function(userId, child, changedFields){\n      if(_.intersection(changedFields, topFields).length){\n        let pickedChild = _.pick(child, childFields)\n        parentCollection.update({[referenceField]:child._id}, {$set:{[cacheField]:pickedChild}}, {multi:true})\n      }\n    })\n\n    childCollection.after.remove(function(userId, child){\n      parentCollection.update({[referenceField]:child._id}, {$unset:{[cacheField]:1}}, {multi:true})\n    })\n  } \n\n  else if(type == 'many'){\n    let insert = function insert(userId, parent){\n      let references = getNestedReferences(parent)\n      if(references.length){\n        let children = childCollection.find({_id:{$in:references}}, childOpts).fetch()\n        parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n      } else {\n        parentCollection.update(parent._id, {$set:{[cacheField]:[]}})\n      }\n    }\n    addMigration(parentCollection, insert, options)\n    parentCollection.after.insert(insert)\n\n    parentCollection.after.update(function(userId, parent, changedFields){\n      if(_.includes(changedFields, referencePath.split('.')[0])){\n        let references = getNestedReferences(parent)\n        if(references.length){\n          let children = childCollection.find({_id:{$in:references}}, childOpts).fetch()\n          parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n        } else {\n          parentCollection.update(parent._id, {$set:{[cacheField]:[]}})\n        }\n      }\n    })\n\n    childCollection.after.insert(function(userId, child){\n      let pickedChild = _.pick(child, childFields)\n      parentCollection.update({[referencePath]:child._id}, {$push:{[cacheField]:pickedChild}}, {multi:true})\n    })\n\n    childCollection.after.update(function(userId, child, changedFields){\n      if(_.intersection(changedFields, topFields).length){\n        let pickedChild = _.pick(child, childFields)\n        parentCollection.find({[referencePath]:child._id}, parentOpts).forEach(parent => {\n          let index = _.findIndex(_.get(parent, cacheField), {_id:child._id})\n          if(index > -1){\n            parentCollection.update(parent._id, {$set:{[cacheField + '.' + index]:pickedChild}})\n          } else {\n            parentCollection.update(parent._id, {$push:{[cacheField]:pickedChild}})\n          }\n        })\n      }\n    })\n\n    childCollection.after.remove(function(userId, child){\n      parentCollection.update({[referencePath]:child._id}, {$pull:{[cacheField]:{_id:child._id}}}, {multi:true})\n    })\n  }\n\n\n  else if(type == 'inversed'){\n    let insert = function insert(userId, parent){\n      let children = childCollection.find({[referenceField]:parent._id}, childOpts).fetch()\n      parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n    }\n    addMigration(parentCollection, insert, options)\n\n    parentCollection.after.insert(insert)\n\n    parentCollection.after.update(function(userId, parent, changedFields){\n      if(_.includes(changedFields, referenceField.split('.')[0])){\n        if(_.get(parent, referenceField)){\n          let children = childCollection.find({[referenceField]:parent._id}, childOpts).fetch()\n          parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n        } else {\n          parentCollection.update(parent._id, {$set:{[cacheField]:[]}})\n        }\n      }\n    })\n\n    childCollection.after.insert(function(userId, child){\n      let pickedChild = _.pick(child, childFields)\n      if(_.get(child, referenceField)){\n        parentCollection.update({_id:_.get(child, referenceField)}, {$push:{[cacheField]:pickedChild}})\n      }\n    })\n\n    childCollection.after.update(function(userId, child, changedFields){\n      if(_.intersection(changedFields, topFields).length){\n        let pickedChild = _.pick(child, childFields)\n        let previousId = this.previous && _.get(this.previous, referenceField)\n        if(previousId && previousId !== _.get(child, referenceField)){\n          parentCollection.update({_id:previousId}, {$pull:{[cacheField]:{_id:child._id}}})\n        }\n        parentCollection.find({_id:_.get(child, referenceField)}, parentOpts).forEach(parent => {\n          let index = _.findIndex(_.get(parent, cacheField), {_id:child._id})\n          if(index > -1){\n            parentCollection.update(parent._id, {$set:{[cacheField + '.' + index]:pickedChild}})\n          } else {\n            parentCollection.update(parent._id, {$push:{[cacheField]:pickedChild}})\n          }\n        })\n      }\n    })\n\n    childCollection.after.remove(function(userId, child){\n      parentCollection.update({_id:_.get(child, referenceField)}, {$pull:{[cacheField]:{_id:child._id}}})\n    })\n  }\n\n  else if(type == 'many-inversed'){\n    let insert = function insert(userId, parent){\n      let children = childCollection.find({[referencePath]:parent._id}, childOpts).fetch()\n      parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n    }\n    addMigration(parentCollection, insert, options)\n\n    parentCollection.after.insert(insert)\n\n    parentCollection.after.update(function(userId, parent, changedFields){\n      if(_.includes(changedFields, referencePath.split('.')[0])){\n        let children = childCollection.find({[referencePath]:parent._id}, childOpts).fetch()\n        parentCollection.update(parent._id, {$set:{[cacheField]:children}})\n      }\n    })\n\n    childCollection.after.insert(function(userId, child){\n      let references = getNestedReferences(child)\n      if(references.length){        \n        let pickedChild = _.pick(child, childFields)\n        parentCollection.update({_id:{$in:references}}, {$push:{[cacheField]:pickedChild}}, {multi:true})\n      }\n    })\n\n    childCollection.after.update(function(userId, child, changedFields){\n      if(_.intersection(changedFields, topFields).length){\n        let references = getNestedReferences(child)\n        let previousIds = this.previous && getNestedReferences(this.previous)\n        previousIds = _.difference(previousIds, references)\n        if(previousIds.length){\n          parentCollection.update({_id:{$in:previousIds}}, {$pull:{[cacheField]:{_id:child._id}}}, {multi:true})\n        }\n        if(references.length){\n          let pickedChild = _.pick(child, childFields)\n          parentCollection.find({_id:{$in:references}}, parentOpts).forEach(parent => {\n            let index = _.findIndex(_.get(parent, cacheField), {_id:child._id})\n            if(index > -1){\n              parentCollection.update(parent._id, {$set:{[cacheField + '.' + index]:pickedChild}})\n            } else {\n              parentCollection.update(parent._id, {$push:{[cacheField]:pickedChild}})\n            }\n          })\n        }\n      }\n    })\n\n    childCollection.after.remove(function(userId, child){\n      let references = getNestedReferences(child)\n      if(references.length){\n        parentCollection.update({_id:{$in:references}}, {$pull:{[cacheField]:{_id:child._id}}}, {multi:true})\n      }\n    })\n  }\n}"]},"sourceType":"script","hash":"71df6fdda618353b56d7033b4e1398d2bf659197"}
