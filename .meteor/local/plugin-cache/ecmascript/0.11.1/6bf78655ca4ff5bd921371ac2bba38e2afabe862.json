{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nmodule.export({\n  \"default\": function () {\n    return CollectionNode;\n  }\n});\nvar FieldNode;\nmodule.watch(require(\"./fieldNode.js\"), {\n  \"default\": function (v) {\n    FieldNode = v;\n  }\n}, 0);\nvar ReducerNode;\nmodule.watch(require(\"./reducerNode.js\"), {\n  \"default\": function (v) {\n    ReducerNode = v;\n  }\n}, 1);\nvar deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n  \"default\": function (v) {\n    deepClone = v;\n  }\n}, 2);\nvar check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 3);\n\nvar CollectionNode =\n/*#__PURE__*/\nfunction () {\n  function CollectionNode(collection) {\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var linkName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (collection && !_.isObject(body)) {\n      throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n    }\n\n    this.body = deepClone(body);\n    this.linkName = linkName;\n    this.collection = collection;\n    this.nodes = [];\n    this.props = {};\n    this.parent = null;\n    this.linker = null;\n    this.linkStorageField = null;\n    this.scheduledForDeletion = false;\n    this.reducers = [];\n    this.results = [];\n    this.snapCaches = {}; // {cacheField: linkName}\n\n    this.snapCachesSingles = []; // [cacheField1, cacheField2]\n  }\n\n  var _proto = CollectionNode.prototype;\n\n  /**\n   * Adds children to itself\n   *\n   * @param node\n   * @param linker\n   */\n  _proto.add = function () {\n    function add(node, linker) {\n      node.parent = this;\n\n      if (linker) {\n        node.linker = linker;\n        node.linkStorageField = linker.linkStorageField;\n        node.isMeta = linker.isMeta();\n        node.isVirtual = linker.isVirtual();\n        node.isOneResult = linker.isOneResult();\n        node.shouldCleanStorage = this._shouldCleanStorage(node);\n      }\n\n      this.nodes.push(node);\n    }\n\n    return add;\n  }();\n  /**\n   * @param prop\n   * @param value\n   */\n\n\n  _proto.addProp = function () {\n    function addProp(prop, value) {\n      var _$extend;\n\n      if (prop === '$postFilter') {\n        check(value, Match.OneOf(Function, [Function]));\n      }\n\n      _.extend(this.props, (_$extend = {}, _$extend[prop] = value, _$extend));\n    }\n\n    return addProp;\n  }();\n  /**\n   * @param _node\n   */\n\n\n  _proto.remove = function () {\n    function remove(_node) {\n      this.nodes = _.filter(this.nodes, function (node) {\n        return _node !== node;\n      });\n    }\n\n    return remove;\n  }();\n  /**\n   * @param filters\n   * @param options\n   */\n\n\n  _proto.applyFields = function () {\n    function applyFields(filters, options) {\n      var hasAddedAnyField = false;\n\n      _.each(this.fieldNodes, function (n) {\n        hasAddedAnyField = true;\n        n.applyFields(options.fields);\n      }); // it will only get here if it has collectionNodes children\n\n\n      _.each(this.collectionNodes, function (collectionNode) {\n        var linker = collectionNode.linker;\n\n        if (linker && !linker.isVirtual()) {\n          options.fields[linker.linkStorageField] = 1;\n          hasAddedAnyField = true;\n        }\n      }); // if he selected filters, we should automatically add those fields\n\n\n      _.each(filters, function (value, field) {\n        // special handling for the $meta filter and conditional operators\n        if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n          // if the field or the parent of the field already exists, don't add it\n          if (!_.has(options.fields, field.split('.')[0])) {\n            hasAddedAnyField = true;\n            options.fields[field] = 1;\n          }\n        }\n      });\n\n      if (!hasAddedAnyField) {\n        options.fields = {\n          _id: 1\n        };\n      }\n    }\n\n    return applyFields;\n  }();\n  /**\n   * @param fieldName\n   * @returns {boolean}\n   */\n\n\n  _proto.hasField = function () {\n    function hasField(fieldName) {\n      return !!_.find(this.fieldNodes, function (fieldNode) {\n        return fieldNode.name == fieldName;\n      });\n    }\n\n    return hasField;\n  }();\n  /**\n   * @param fieldName\n   * @returns {FieldNode}\n   */\n\n\n  _proto.getField = function () {\n    function getField(fieldName) {\n      return _.find(this.fieldNodes, function (fieldNode) {\n        return fieldNode.name == fieldName;\n      });\n    }\n\n    return getField;\n  }();\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  _proto.hasCollectionNode = function () {\n    function hasCollectionNode(name) {\n      return !!_.find(this.collectionNodes, function (node) {\n        return node.linkName == name;\n      });\n    }\n\n    return hasCollectionNode;\n  }();\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n\n\n  _proto.hasReducerNode = function () {\n    function hasReducerNode(name) {\n      return !!_.find(this.reducerNodes, function (node) {\n        return node.name == name;\n      });\n    }\n\n    return hasReducerNode;\n  }();\n  /**\n   * @param name\n   * @returns {ReducerNode}\n   */\n\n\n  _proto.getReducerNode = function () {\n    function getReducerNode(name) {\n      return _.find(this.reducerNodes, function (node) {\n        return node.name == name;\n      });\n    }\n\n    return getReducerNode;\n  }();\n  /**\n   * @param name\n   * @returns {CollectionNode}\n   */\n\n\n  _proto.getCollectionNode = function () {\n    function getCollectionNode(name) {\n      return _.find(this.collectionNodes, function (node) {\n        return node.linkName == name;\n      });\n    }\n\n    return getCollectionNode;\n  }();\n  /**\n   * @returns {*}\n   */\n\n\n  _proto.getName = function () {\n    function getName() {\n      return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n    }\n\n    return getName;\n  }();\n  /**\n   * This is used for caching links\n   *\n   * @param cacheField\n   * @param subLinkName\n   */\n\n\n  _proto.snapCache = function () {\n    function snapCache(cacheField, subLinkName) {\n      this.snapCaches[cacheField] = subLinkName;\n\n      if (this.collection.getLinker(subLinkName).isOneResult()) {\n        this.snapCachesSingles.push(cacheField);\n      }\n    }\n\n    return snapCache;\n  }();\n  /**\n   * This method verifies whether to remove the linkStorageField form the results\n   * unless you specify it in your query.\n   *\n   * @param node\n   * @returns {boolean}\n   * @private\n   */\n\n\n  _proto._shouldCleanStorage = function () {\n    function _shouldCleanStorage(node) {\n      if (node.linkStorageField === '_id') {\n        return false;\n      } else {\n        if (node.isVirtual) {\n          return !node.hasField(node.linkStorageField);\n        } else {\n          return !this.hasField(node.linkStorageField);\n        }\n      }\n    }\n\n    return _shouldCleanStorage;\n  }();\n\n  (0, _createClass2.default)(CollectionNode, [{\n    key: \"collectionNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof CollectionNode;\n      });\n    }\n  }, {\n    key: \"fieldNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof FieldNode;\n      });\n    }\n  }, {\n    key: \"reducerNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof ReducerNode;\n      });\n    }\n  }]);\n  return CollectionNode;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","CollectionNode","FieldNode","watch","require","v","ReducerNode","deepClone","check","Match","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","add","node","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","extend","remove","_node","filter","applyFields","filters","options","hasAddedAnyField","each","fieldNodes","n","fields","collectionNodes","collectionNode","field","contains","has","split","_id","hasField","fieldName","find","fieldNode","name","getField","hasCollectionNode","hasReducerNode","reducerNodes","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', 'Every collection link should have its body defined as an object.');\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        _.extend(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            hasAddedAnyField = true;\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                options.fields[linker.linkStorageField] = 1;\n                hasAddedAnyField = true;\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter and conditional operators\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {_id: 1};\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName) {\n        return !!_.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField);\n            } else {\n                return !this.hasField(node.linkStorageField);\n            }\n        }\n    }\n}\n"]},"sourceType":"script","hash":"6bf78655ca4ff5bd921371ac2bba38e2afabe862"}
