{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/webapp/webapp_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/webapp/webapp_tests.js","filename":"/Users/simiontomoiaga/git/server/packages/webapp/webapp_tests.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/webapp/webapp_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/webapp/webapp_tests.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar module1 = module;\nvar isModern;\nmodule1.watch(require(\"meteor/modern-browsers\"), {\n  isModern: function (v) {\n    isModern = v;\n  }\n}, 0);\n\nvar url = require(\"url\");\n\nvar crypto = require(\"crypto\");\n\nvar http = require(\"http\");\n\nvar streamToString = require(\"stream-to-string\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\"; // Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\n\nvar MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {// nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var staticFiles = WebAppInternals.staticFilesByArch[\"web.browser\"];\n\n  var cssResource = _.find(_.keys(staticFiles), function (url) {\n    return staticFiles[url].type === \"css\";\n  });\n\n  var jsResource = _.find(_.keys(staticFiles), function (url) {\n    return staticFiles[url].type === \"js\";\n  });\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"application/javascript; charset=utf-8\");\n});\nvar modernUserAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) \" + \"AppleWebKit/537.36 (KHTML, like Gecko) \" + \"Chrome/68.0.3440.15 Safari/537.36\";\nvar legacyUserAgent = \"legacy\";\nTinytest.addAsync(\"webapp - modern/legacy static files\", function (test) {\n  test.equal(isModern(WebAppInternals.identifyBrowser(modernUserAgent)), true);\n  test.equal(isModern(WebAppInternals.identifyBrowser(legacyUserAgent)), false);\n  var promises = [];\n  Object.keys(WebAppInternals.staticFilesByArch).forEach(function (arch) {\n    var staticFiles = WebAppInternals.staticFilesByArch[arch];\n    Object.keys(staticFiles).forEach(function (path) {\n      var type = staticFiles[path].type;\n\n      if (type !== \"asset\") {\n        return;\n      }\n\n      var pathMatch = /\\/(modern|legacy)_test_asset\\.js$/.exec(path);\n\n      if (!pathMatch) {\n        return;\n      }\n\n      var absUrl = url.resolve(Meteor.absoluteUrl(), path);\n      [// Try to request the modern/legacy assets with both modern and\n      // legacy User Agent strings. (#9953)\n      modernUserAgent, legacyUserAgent].forEach(function (ua) {\n        return promises.push(new Promise(function (resolve, reject) {\n          HTTP.get(absUrl, {\n            headers: {\n              \"User-Agent\": ua\n            }\n          }, function (error, response) {\n            if (error) {\n              reject(error);\n              return;\n            }\n\n            if (response.statusCode !== 200) {\n              reject(new Error(\"Bad status code \" + response.statusCode + \" for \" + path));\n              return;\n            }\n\n            var contentType = response.headers[\"content-type\"];\n\n            if (!contentType.startsWith(\"application/javascript\")) {\n              reject(new Error(\"Bad Content-Type \" + contentType + \" for \" + path));\n              return;\n            }\n\n            var expectedText = pathMatch[1].toUpperCase();\n            var index = response.content.indexOf(expectedText);\n\n            if (index < 0) {\n              reject(new Error(\"Missing \" + JSON.stringify(expectedText) + \" text in \" + path));\n              return;\n            }\n\n            resolve(path);\n          });\n        }));\n      });\n    });\n  });\n  test.isTrue(promises.length > 0);\n  return Promise.all(promises);\n});\nTinytest.addAsync(\"webapp - additional static javascript\", function () {\n  function _callee(test) {\n    var origInlineScriptsAllowed, staticFilesOpts, _WebAppInternals$getB, stream, boilerplate, _res, _req, nextCalled, _WebAppInternals$getB2, _stream, _boilerplate, res, req, resBody;\n\n    return _regenerator.default.async(function () {\n      function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n              staticFilesOpts = {\n                staticFiles: {},\n                clientDir: \"/\"\n              }; // It's okay to set this global state because we're not going to yield\n              // before settng it back to what it was originally.\n\n              WebAppInternals.setInlineScriptsAllowed(true);\n              _WebAppInternals$getB = WebAppInternals.getBoilerplate({\n                browser: \"doesn't-matter\",\n                url: \"also-doesnt-matter\"\n              }, \"web.browser\"), stream = _WebAppInternals$getB.stream;\n              _context.next = 6;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 6:\n              boilerplate = _context.sent;\n              // When inline scripts are allowed, the script should be inlined.\n              test.isTrue(boilerplate.indexOf(additionalScript) !== -1); // And the script should not be served as its own separate resource,\n              // meaning that the static file handler should pass on this request.\n\n              _res = new MockResponse();\n              _req = new http.IncomingMessage();\n              _req.headers = {};\n              _req.method = \"GET\";\n              _req.url = \"/\" + additionalScriptPathname;\n              nextCalled = false;\n              WebAppInternals.staticFilesMiddleware({\n                \"web.browser\": {},\n                \"web.browser.legacy\": {}\n              }, _req, _res, function () {\n                nextCalled = true;\n              });\n              test.isTrue(nextCalled); // When inline scripts are disallowed, the script body should not be\n              // inlined, and the script should be included in a <script src=\"..\">\n              // tag.\n\n              WebAppInternals.setInlineScriptsAllowed(false);\n              _WebAppInternals$getB2 = WebAppInternals.getBoilerplate({\n                browser: \"doesn't-matter\",\n                browser: \"doesn't-matter\",\n                url: \"also-doesnt-matter\"\n              }, \"web.browser\"), _stream = _WebAppInternals$getB2.stream;\n              _context.next = 20;\n              return _regenerator.default.awrap(streamToString(_stream));\n\n            case 20:\n              _boilerplate = _context.sent;\n              // The script contents itself should not be present; the pathname\n              // where the script is served should be.\n              test.isTrue(_boilerplate.indexOf(additionalScript) === -1);\n              test.isTrue(_boilerplate.indexOf(additionalScriptPathname) !== -1);\n              // And the static file handler should serve the script at that pathname.\n              res = new MockResponse();\n              req = new http.IncomingMessage();\n              req.headers = {};\n              req.method = \"GET\";\n              req.url = \"/\" + additionalScriptPathname;\n              WebAppInternals.staticFilesMiddleware({\n                \"web.browser\": {},\n                \"web.browser.legacy\": {}\n              }, req, res, function () {});\n              resBody = res.getBody();\n              test.isTrue(resBody.indexOf(additionalScript) !== -1);\n              test.equal(res.statusCode, 200);\n              WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }\n\n      return _callee$;\n    }(), null, this);\n  }\n\n  return _callee;\n}()); // Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\n\nTinytest.addAsync(\"webapp - generating boilerplate should not change runtime config\", function () {\n  function _callee2(test) {\n    var boilerplate, stream, boilerplateHtml;\n    return _regenerator.default.async(function () {\n      function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // Set a dummy key in the runtime config served in the\n              // boilerplate. Test that the dummy key appears in the boilerplate,\n              // but not in __meteor_runtime_config__ after generating the\n              // boilerplate.\n              test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n              boilerplate = WebAppInternals.generateBoilerplateInstance(\"web.browser\", [], // empty manifest\n              {\n                runtimeConfigOverrides: {\n                  WEBAPP_TEST_KEY: true\n                }\n              });\n              stream = boilerplate.toHTMLStream();\n              _context2.next = 5;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 5:\n              boilerplateHtml = _context2.sent;\n              test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n              test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }\n\n      return _callee2$;\n    }(), null, this);\n  }\n\n  return _callee2;\n}());\nTinytest.addAsync(\"webapp - WebAppInternals.registerBoilerplateDataCallback\", function () {\n  function _callee3(test) {\n    var key, callCount, callback, req, _WebAppInternals$getB3, stream, html;\n\n    return _regenerator.default.async(function () {\n      function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              callback = function () {\n                function _ref(request, data, arch) {\n                  test.equal(arch, \"web.browser\");\n                  test.equal(request.url, \"http://example.com\");\n                  test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n                  test.equal(data.body, \"\");\n                  data.body = \"<div>oyez</div>\";\n                  ++callCount;\n                }\n\n                return _ref;\n              }();\n\n              key = \"from webapp_tests.js\";\n              callCount = 0;\n              WebAppInternals.registerBoilerplateDataCallback(key, callback);\n              test.equal(callCount, 0);\n              req = new http.IncomingMessage();\n              req.url = \"http://example.com\";\n              req.browser = {\n                name: \"headless\"\n              };\n              req.dynamicHead = \"so dynamic\";\n              _WebAppInternals$getB3 = WebAppInternals.getBoilerplate(req, \"web.browser\"), stream = _WebAppInternals$getB3.stream;\n              _context3.next = 12;\n              return _regenerator.default.awrap(streamToString(stream));\n\n            case 12:\n              html = _context3.sent;\n              test.equal(callCount, 1);\n              test.isTrue(html.indexOf([\"<body>\", \"<div>oyez</div>\"].join(\"\")) >= 0);\n              test.equal( // Make sure this callback doesn't get called again after this test.\n              WebAppInternals.registerBoilerplateDataCallback(key, null), callback);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }\n\n      return _callee3$;\n    }(), null, this);\n  }\n\n  return _callee3;\n}()); // Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\n\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function (test) {\n  // Named pipes on Windows Server follow the format:\n  // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  var namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n  test.equal(WebAppInternals.parsePort(namedPipe), \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer), \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"), 8080); // Ensure strangely formatted ports still work for backwards compatibility\n\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), 8080);\n});\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof2.default)(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal((0, _typeof2.default)(WebAppInternals.NpmModules.connect.module.basicAuth), 'function');\n});","map":{"version":3,"sources":["packages/webapp/webapp_tests.js"],"names":["module1","module","isModern","watch","require","v","url","crypto","http","streamToString","additionalScript","WebAppInternals","addStaticJs","hash","createHash","update","additionalScriptPathname","digest","MockResponse","buffer","statusCode","prototype","writeHead","setHeader","name","value","write","data","encoding","end","getBody","Tinytest","add","test","staticFiles","staticFilesByArch","cssResource","_","find","keys","type","jsResource","resp","HTTP","get","resolve","Meteor","absoluteUrl","equal","headers","toLowerCase","modernUserAgent","legacyUserAgent","addAsync","identifyBrowser","promises","Object","forEach","arch","path","pathMatch","exec","absUrl","push","Promise","reject","ua","error","response","Error","contentType","startsWith","expectedText","toUpperCase","index","content","indexOf","JSON","stringify","isTrue","length","all","origInlineScriptsAllowed","inlineScriptsAllowed","staticFilesOpts","clientDir","setInlineScriptsAllowed","getBoilerplate","browser","stream","boilerplate","res","req","IncomingMessage","method","nextCalled","staticFilesMiddleware","resBody","isFalse","__meteor_runtime_config__","WEBAPP_TEST_KEY","generateBoilerplateInstance","runtimeConfigOverrides","toHTMLStream","boilerplateHtml","callback","request","dynamicHead","body","callCount","key","registerBoilerplateDataCallback","html","join","namedPipe","namedPipeServer","parsePort","WEBAPP_TEST_A","WEBAPP_TEST_B","matches","NpmModules","connect","version","basicAuth"],"mappings":";;;;;;AAAA,IAAMA,UAAQC,MAAd;AAAqB,IAAIC,QAAJ;AAAaF,QAAQG,KAAR,CAAcC,QAAQ,wBAAR,CAAd,EAAgD;AAACF,UAAD,YAAUG,CAAV,EAAY;AAACH,eAASG,CAAT;AAAW;AAAxB,CAAhD,EAA0E,CAA1E;;AAAlC,IAAMC,MAAMF,QAAQ,KAAR,CAAZ;;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;;AACA,IAAMI,OAAOJ,QAAQ,MAAR,CAAb;;AACA,IAAMK,iBAAiBL,QAAQ,kBAAR,CAAvB;;AAGA,IAAMM,mBAAmB,gCAAzB;AACAC,gBAAgBC,WAAhB,CAA4BF,gBAA5B;AACA,IAAMG,OAAON,OAAOO,UAAP,CAAkB,MAAlB,CAAb;AACAD,KAAKE,MAAL,CAAYL,gBAAZ;AACA,IAAMM,2BAA2BH,KAAKI,MAAL,CAAY,KAAZ,IAAqB,KAAtD,C,CAEA;AACA;AACA;;AACA,IAAMC,eAAe,YAAY;AAC/B,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACD,CAHD;;AAKAF,aAAaG,SAAb,CAAuBC,SAAvB,GAAmC,UAAUF,UAAV,EAAsB;AACvD,OAAKA,UAAL,GAAkBA,UAAlB;AACD,CAFD;;AAIAF,aAAaG,SAAb,CAAuBE,SAAvB,GAAmC,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB,CACxD;AACD,CAFD;;AAIAP,aAAaG,SAAb,CAAuBK,KAAvB,GAA+B,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACvD,MAAI,CAAEA,QAAF,IAAcA,aAAa,MAA/B,EAAuC;AACrC,SAAKT,MAAL,GAAc,KAAKA,MAAL,GAAcQ,IAA5B;AACD;AACF,CAJD;;AAMAT,aAAaG,SAAb,CAAuBQ,GAAvB,GAA6B,UAAUF,IAAV,EAAgBC,QAAhB,EAA0B;AACrD,MAAI,CAAEA,QAAF,IAAcA,aAAa,MAA/B,EAAuC;AACrC,QAAID,IAAJ,EAAU;AACR,WAAKR,MAAL,GAAc,KAAKA,MAAL,GAAcQ,IAA5B;AACD;AACF;AACF,CAND;;AAQAT,aAAaG,SAAb,CAAuBS,OAAvB,GAAiC,YAAY;AAC3C,SAAO,KAAKX,MAAZ;AACD,CAFD;;AAIAY,SAASC,GAAT,CAAa,8BAAb,EAA6C,UAAUC,IAAV,EAAgB;AAC3D,MAAMC,cAAcvB,gBAAgBwB,iBAAhB,CAAkC,aAAlC,CAApB;;AAEA,MAAMC,cAAcC,EAAEC,IAAF,CAClBD,EAAEE,IAAF,CAAOL,WAAP,CADkB,EAElB,UAAU5B,GAAV,EAAe;AACb,WAAO4B,YAAY5B,GAAZ,EAAiBkC,IAAjB,KAA0B,KAAjC;AACD,GAJiB,CAApB;;AAOA,MAAMC,aAAaJ,EAAEC,IAAF,CACjBD,EAAEE,IAAF,CAAOL,WAAP,CADiB,EAEjB,UAAU5B,GAAV,EAAe;AACb,WAAO4B,YAAY5B,GAAZ,EAAiBkC,IAAjB,KAA0B,IAAjC;AACD,GAJgB,CAAnB;;AAOA,MAAIE,OAAOC,KAAKC,GAAL,CAAStC,IAAIuC,OAAJ,CAAYC,OAAOC,WAAP,EAAZ,EAAkCX,WAAlC,CAAT,CAAX;AACAH,OAAKe,KAAL,CAAWN,KAAKO,OAAL,CAAa,cAAb,EAA6BC,WAA7B,EAAX,EACW,yBADX;AAEAR,SAAOC,KAAKC,GAAL,CAAStC,IAAIuC,OAAJ,CAAYC,OAAOC,WAAP,EAAZ,EAAkCN,UAAlC,CAAT,CAAP;AACAR,OAAKe,KAAL,CAAWN,KAAKO,OAAL,CAAa,cAAb,EAA6BC,WAA7B,EAAX,EACW,uCADX;AAED,CAvBD;AAyBA,IAAMC,kBACJ,qDACA,yCADA,GAEA,mCAHF;AAKA,IAAMC,kBAAkB,QAAxB;AAEArB,SAASsB,QAAT,CAAkB,qCAAlB,EAAyD,gBAAQ;AAC/DpB,OAAKe,KAAL,CAAW9C,SAASS,gBAAgB2C,eAAhB,CAAgCH,eAAhC,CAAT,CAAX,EAAuE,IAAvE;AACAlB,OAAKe,KAAL,CAAW9C,SAASS,gBAAgB2C,eAAhB,CAAgCF,eAAhC,CAAT,CAAX,EAAuE,KAAvE;AAEA,MAAMG,WAAW,EAAjB;AAEAC,SAAOjB,IAAP,CAAY5B,gBAAgBwB,iBAA5B,EAA+CsB,OAA/C,CAAuD,gBAAQ;AAC7D,QAAMvB,cAAcvB,gBAAgBwB,iBAAhB,CAAkCuB,IAAlC,CAApB;AAEAF,WAAOjB,IAAP,CAAYL,WAAZ,EAAyBuB,OAAzB,CAAiC,gBAAQ;AAAA,UAC/BjB,IAD+B,GACtBN,YAAYyB,IAAZ,CADsB,CAC/BnB,IAD+B;;AAEvC,UAAIA,SAAS,OAAb,EAAsB;AACpB;AACD;;AAED,UAAMoB,YAAY,oCAAoCC,IAApC,CAAyCF,IAAzC,CAAlB;;AACA,UAAI,CAAEC,SAAN,EAAiB;AACf;AACD;;AAED,UAAME,SAASxD,IAAIuC,OAAJ,CAAYC,OAAOC,WAAP,EAAZ,EAAkCY,IAAlC,CAAf;AAEA,OAAE;AACA;AACAR,qBAFF,EAGEC,eAHF,EAIEK,OAJF,CAIU;AAAA,eAAMF,SAASQ,IAAT,CAAc,IAAIC,OAAJ,CAAY,UAACnB,OAAD,EAAUoB,MAAV,EAAqB;AAC7DtB,eAAKC,GAAL,CAASkB,MAAT,EAAiB;AACfb,qBAAS;AACP,4BAAciB;AADP;AADM,WAAjB,EAIG,UAACC,KAAD,EAAQC,QAAR,EAAqB;AACtB,gBAAID,KAAJ,EAAW;AACTF,qBAAOE,KAAP;AACA;AACD;;AAED,gBAAIC,SAAShD,UAAT,KAAwB,GAA5B,EAAiC;AAC/B6C,qBAAO,IAAII,KAAJ,sBACLD,SAAShD,UADJ,aAECuC,IAFD,CAAP;AAGA;AACD;;AAED,gBAAMW,cAAcF,SAASnB,OAAT,CAAiB,cAAjB,CAApB;;AACA,gBAAI,CAAEqB,YAAYC,UAAZ,CAAuB,wBAAvB,CAAN,EAAwD;AACtDN,qBAAO,IAAII,KAAJ,uBAA8BC,WAA9B,aAAiDX,IAAjD,CAAP;AACA;AACD;;AAED,gBAAMa,eAAeZ,UAAU,CAAV,EAAaa,WAAb,EAArB;AACA,gBAAMC,QAAQN,SAASO,OAAT,CAAiBC,OAAjB,CAAyBJ,YAAzB,CAAd;;AACA,gBAAIE,QAAQ,CAAZ,EAAe;AACbT,qBAAO,IAAII,KAAJ,cACLQ,KAAKC,SAAL,CAAeN,YAAf,CADK,iBAEKb,IAFL,CAAP;AAGA;AACD;;AAEDd,oBAAQc,IAAR;AACD,WAjCD;AAkCD,SAnC6B,CAAd,CAAN;AAAA,OAJV;AAwCD,KArDD;AAsDD,GAzDD;AA2DA1B,OAAK8C,MAAL,CAAYxB,SAASyB,MAAT,GAAkB,CAA9B;AAEA,SAAOhB,QAAQiB,GAAR,CAAY1B,QAAZ,CAAP;AACD,CApED;AAsEAxB,SAASsB,QAAT,CACE,uCADF;AAEE,mBAAgBpB,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACQiD,sCADR,GACmCvE,gBAAgBwE,oBAAhB,EADnC;AAGQC,6BAHR,GAG0B;AACtBlD,6BAAa,EADS;AAEtBmD,2BAAW;AAFW,eAH1B,EAQE;AACA;;AACA1E,8BAAgB2E,uBAAhB,CAAwC,IAAxC;AAVF,sCAauB3E,gBAAgB4E,cAAhB,CAA+B;AAChDC,yBAAS,gBADuC;AAEhDlF,qBAAK;AAF2C,eAA/B,EAGhB,aAHgB,CAbvB,EAaYmF,MAbZ,yBAaYA,MAbZ;AAAA;AAAA,gDAkB8BhF,eAAegF,MAAf,CAlB9B;;AAAA;AAkBUC,yBAlBV;AAoBI;AACAzD,mBAAK8C,MAAL,CAAYW,YAAYd,OAAZ,CAAoBlE,gBAApB,MAA0C,CAAC,CAAvD,EArBJ,CAuBI;AACA;;AACMiF,kBAzBV,GAyBgB,IAAIzE,YAAJ,EAzBhB;AA0BU0E,kBA1BV,GA0BgB,IAAIpF,KAAKqF,eAAT,EA1BhB;AA2BID,mBAAI3C,OAAJ,GAAc,EAAd;AACA2C,mBAAIE,MAAJ,GAAa,KAAb;AACAF,mBAAItF,GAAJ,GAAU,MAAMU,wBAAhB;AACI+E,wBA9BR,GA8BqB,KA9BrB;AA+BIpF,8BAAgBqF,qBAAhB,CAAsC;AACpC,+BAAe,EADqB;AAEpC,sCAAsB;AAFc,eAAtC,EAGGJ,IAHH,EAGQD,IAHR,EAGa,YAAY;AACvBI,6BAAa,IAAb;AACD,eALD;AAMA9D,mBAAK8C,MAAL,CAAYgB,UAAZ,EArCJ,CAuCI;AACA;AACA;;AACApF,8BAAgB2E,uBAAhB,CAAwC,KAAxC;AA1CJ,uCA8CuB3E,gBAAgB4E,cAAhB,CAA+B;AAChDC,yBAAS,gBADuC;AAEhDA,yBAAS,gBAFuC;AAGhDlF,qBAAK;AAH2C,eAA/B,EAIhB,aAJgB,CA9CvB,EA8CYmF,OA9CZ,0BA8CYA,MA9CZ;AAAA;AAAA,gDAmD8BhF,eAAegF,OAAf,CAnD9B;;AAAA;AAmDUC,0BAnDV;AAqDI;AACA;AACAzD,mBAAK8C,MAAL,CAAYW,aAAYd,OAAZ,CAAoBlE,gBAApB,MAA0C,CAAC,CAAvD;AACAuB,mBAAK8C,MAAL,CAAYW,aAAYd,OAAZ,CAAoB5D,wBAApB,MAAkD,CAAC,CAA/D;AAGF;AACM2E,iBA5DR,GA4Dc,IAAIzE,YAAJ,EA5Dd;AA6DQ0E,iBA7DR,GA6Dc,IAAIpF,KAAKqF,eAAT,EA7Dd;AA8DED,kBAAI3C,OAAJ,GAAc,EAAd;AACA2C,kBAAIE,MAAJ,GAAa,KAAb;AACAF,kBAAItF,GAAJ,GAAU,MAAMU,wBAAhB;AACAL,8BAAgBqF,qBAAhB,CAAsC;AACpC,+BAAe,EADqB;AAEpC,sCAAsB;AAFc,eAAtC,EAGGJ,GAHH,EAGQD,GAHR,EAGa,YAAY,CAAE,CAH3B;AAIMM,qBArER,GAqEkBN,IAAI7D,OAAJ,EArElB;AAsEEG,mBAAK8C,MAAL,CAAYkB,QAAQrB,OAAR,CAAgBlE,gBAAhB,MAAsC,CAAC,CAAnD;AACAuB,mBAAKe,KAAL,CAAW2C,IAAIvE,UAAf,EAA2B,GAA3B;AAEAT,8BAAgB2E,uBAAhB,CAAwCJ,wBAAxC;;AAzEF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAFF;AAAA,K,CA+EA;AACA;;AACAnD,SAASsB,QAAT,CACE,kEADF;AAEE,oBAAgBpB,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACA;AACA;AACA;AAEAA,mBAAKiE,OAAL,CAAaC,0BAA0BC,eAAvC;AAEMV,yBARR,GAQsB/E,gBAAgB0F,2BAAhB,CAClB,aADkB,EAElB,EAFkB,EAEd;AACJ;AAAEC,wCAAwB;AAAEF,mCAAiB;AAAnB;AAA1B,eAHkB,CARtB;AAcQX,oBAdR,GAciBC,YAAYa,YAAZ,EAdjB;AAAA;AAAA,gDAegC9F,eAAegF,MAAf,CAfhC;;AAAA;AAeQe,6BAfR;AAgBEvE,mBAAKiE,OAAL,CAAaM,gBAAgB5B,OAAhB,CAAwB,iBAAxB,MAA+C,CAAC,CAA7D;AAEA3C,mBAAKiE,OAAL,CAAaC,0BAA0BC,eAAvC;;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAFF;AAAA;AAwBArE,SAASsB,QAAT,CACE,0DADF;AAEE,oBAAgBpB,IAAhB;AAAA,wBAIWwE,QAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIWA,sBAJX;AAAA,8BAIoBC,OAJpB,EAI6B/E,IAJ7B,EAImC+B,IAJnC,EAIyC;AACrCzB,uBAAKe,KAAL,CAAWU,IAAX,EAAiB,aAAjB;AACAzB,uBAAKe,KAAL,CAAW0D,QAAQpG,GAAnB,EAAwB,oBAAxB;AACA2B,uBAAKe,KAAL,CAAWrB,KAAKgF,WAAL,CAAiB/B,OAAjB,CAAyB,YAAzB,CAAX,EAAmD,CAAnD;AACA3C,uBAAKe,KAAL,CAAWrB,KAAKiF,IAAhB,EAAsB,EAAtB;AACAjF,uBAAKiF,IAAL,GAAY,iBAAZ;AACA,oBAAEC,SAAF;AACD;;AAXH;AAAA;;AACQC,iBADR,GACc,sBADd;AAEMD,uBAFN,GAEkB,CAFlB;AAaElG,8BAAgBoG,+BAAhB,CAAgDD,GAAhD,EAAqDL,QAArD;AAEAxE,mBAAKe,KAAL,CAAW6D,SAAX,EAAsB,CAAtB;AAEMjB,iBAjBR,GAiBc,IAAIpF,KAAKqF,eAAT,EAjBd;AAkBED,kBAAItF,GAAJ,GAAU,oBAAV;AACAsF,kBAAIJ,OAAJ,GAAc;AAAEhE,sBAAM;AAAR,eAAd;AACAoE,kBAAIe,WAAJ,GAAkB,YAAlB;AApBF,uCAsBqBhG,gBAAgB4E,cAAhB,CAA+BK,GAA/B,EAAoC,aAApC,CAtBrB,EAsBUH,MAtBV,0BAsBUA,MAtBV;AAAA;AAAA,gDAuBqBhF,eAAegF,MAAf,CAvBrB;;AAAA;AAuBQuB,kBAvBR;AAyBE/E,mBAAKe,KAAL,CAAW6D,SAAX,EAAsB,CAAtB;AAEA5E,mBAAK8C,MAAL,CAAYiC,KAAKpC,OAAL,CAAa,CACvB,QADuB,EAEvB,iBAFuB,EAGvBqC,IAHuB,CAGlB,EAHkB,CAAb,KAGG,CAHf;AAKAhF,mBAAKe,KAAL,EACE;AACArC,8BAAgBoG,+BAAhB,CAAgDD,GAAhD,EAAqD,IAArD,CAFF,EAGEL,QAHF;;AAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAFF;AAAA,K,CA0CA;AACA;;AACA1E,SAASC,GAAT,CACE,iEADF,EAEE,UAAUC,IAAV,EAAgB;AACd;AACA;AACA,MAAMiF,YAAY,mDAAlB;AACA,MAAMC,kBACJ,iEADF;AAGAlF,OAAKe,KAAL,CACErC,gBAAgByG,SAAhB,CAA0BF,SAA1B,CADF,EAEE,mDAFF;AAIAjF,OAAKe,KAAL,CACErC,gBAAgByG,SAAhB,CAA0BD,eAA1B,CADF,EAEE,iEAFF;AAIAlF,OAAKe,KAAL,CACErC,gBAAgByG,SAAhB,CAA0B,IAA1B,CADF,EAEE,IAFF;AAIAnF,OAAKe,KAAL,CACErC,gBAAgByG,SAAhB,CAA0B,MAA1B,CADF,EAEE,IAFF,EAnBc,CAuBd;;AACAnF,OAAKe,KAAL,CACErC,gBAAgByG,SAAhB,CAA0B,SAA1B,CADF,EAEE,IAFF;AAID,CA9BH;AAiCAjB,0BAA0BkB,aAA1B,GAA0C,YAA1C;AACAlB,0BAA0BmB,aAA1B,GAA0C,WAA1C;AAGAvF,SAASC,GAAT,CAAa,sBAAb,EAAqC,UAAUC,IAAV,EAAgB;AACnD;AACAA,OAAKsF,OAAL,CAAa5G,gBAAgB6G,UAAhB,CAA2BC,OAA3B,CAAmCC,OAAhD,EAAyD,kBAAzD;AACAzF,OAAKe,KAAL,uBAAkBrC,gBAAgB6G,UAAhB,CAA2BC,OAA3B,CAAmCxH,MAArD,GAA8D,UAA9D;AACAgC,OAAKe,KAAL,uBAAkBrC,gBAAgB6G,UAAhB,CAA2BC,OAA3B,CAAmCxH,MAAnC,CAA0C0H,SAA5D,GACW,UADX;AAED,CAND","sourcesContent":["const url = require(\"url\");\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst streamToString = require(\"stream-to-string\");\nimport { isModern } from \"meteor/modern-browsers\";\n\nconst additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nconst hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nconst additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nconst MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  const staticFiles = WebAppInternals.staticFilesByArch[\"web.browser\"];\n\n  const cssResource = _.find(\n    _.keys(staticFiles),\n    function (url) {\n      return staticFiles[url].type === \"css\";\n    }\n  );\n\n  const jsResource = _.find(\n    _.keys(staticFiles),\n    function (url) {\n      return staticFiles[url].type === \"js\";\n    }\n  );\n\n  let resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"application/javascript; charset=utf-8\");\n});\n\nconst modernUserAgent =\n  \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) \" +\n  \"AppleWebKit/537.36 (KHTML, like Gecko) \" +\n  \"Chrome/68.0.3440.15 Safari/537.36\";\n\nconst legacyUserAgent = \"legacy\";\n\nTinytest.addAsync(\"webapp - modern/legacy static files\", test => {\n  test.equal(isModern(WebAppInternals.identifyBrowser(modernUserAgent)), true);\n  test.equal(isModern(WebAppInternals.identifyBrowser(legacyUserAgent)), false);\n\n  const promises = [];\n\n  Object.keys(WebAppInternals.staticFilesByArch).forEach(arch => {\n    const staticFiles = WebAppInternals.staticFilesByArch[arch];\n\n    Object.keys(staticFiles).forEach(path => {\n      const { type } = staticFiles[path];\n      if (type !== \"asset\") {\n        return;\n      }\n\n      const pathMatch = /\\/(modern|legacy)_test_asset\\.js$/.exec(path);\n      if (! pathMatch) {\n        return;\n      }\n\n      const absUrl = url.resolve(Meteor.absoluteUrl(), path);\n\n      [ // Try to request the modern/legacy assets with both modern and\n        // legacy User Agent strings. (#9953)\n        modernUserAgent,\n        legacyUserAgent,\n      ].forEach(ua => promises.push(new Promise((resolve, reject) => {\n        HTTP.get(absUrl, {\n          headers: {\n            \"User-Agent\": ua\n          }\n        }, (error, response) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          if (response.statusCode !== 200) {\n            reject(new Error(`Bad status code ${\n              response.statusCode\n            } for ${path}`));\n            return;\n          }\n\n          const contentType = response.headers[\"content-type\"];\n          if (! contentType.startsWith(\"application/javascript\")) {\n            reject(new Error(`Bad Content-Type ${contentType} for ${path}`));\n            return;\n          }\n\n          const expectedText = pathMatch[1].toUpperCase();\n          const index = response.content.indexOf(expectedText);\n          if (index < 0) {\n            reject(new Error(`Missing ${\n              JSON.stringify(expectedText)\n            } text in ${path}`));\n            return;\n          }\n\n          resolve(path);\n        });\n      })));\n    });\n  });\n\n  test.isTrue(promises.length > 0);\n\n  return Promise.all(promises);\n});\n\nTinytest.addAsync(\n  \"webapp - additional static javascript\",\n  async function (test) {\n    const origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n    const staticFilesOpts = {\n      staticFiles: {},\n      clientDir: \"/\"\n    };\n\n    // It's okay to set this global state because we're not going to yield\n    // before settng it back to what it was originally.\n    WebAppInternals.setInlineScriptsAllowed(true);\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n\n      const boilerplate = await streamToString(stream);\n\n      // When inline scripts are allowed, the script should be inlined.\n      test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n      // And the script should not be served as its own separate resource,\n      // meaning that the static file handler should pass on this request.\n      const res = new MockResponse();\n      const req = new http.IncomingMessage();\n      req.headers = {};\n      req.method = \"GET\";\n      req.url = \"/\" + additionalScriptPathname;\n      let nextCalled = false;\n      WebAppInternals.staticFilesMiddleware({\n        \"web.browser\": {},\n        \"web.browser.legacy\": {},\n      }, req, res, function () {\n        nextCalled = true;\n      });\n      test.isTrue(nextCalled);\n\n      // When inline scripts are disallowed, the script body should not be\n      // inlined, and the script should be included in a <script src=\"..\">\n      // tag.\n      WebAppInternals.setInlineScriptsAllowed(false);\n    }\n\n    {\n      const { stream } = WebAppInternals.getBoilerplate({\n        browser: \"doesn't-matter\",\n        browser: \"doesn't-matter\",\n        url: \"also-doesnt-matter\"\n      }, \"web.browser\");\n      const boilerplate = await streamToString(stream);\n\n      // The script contents itself should not be present; the pathname\n      // where the script is served should be.\n      test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n      test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n    }\n\n    // And the static file handler should serve the script at that pathname.\n    const res = new MockResponse();\n    const req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware({\n      \"web.browser\": {},\n      \"web.browser.legacy\": {},\n    }, req, res, function () {});\n    const resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n\n    WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n  }\n);\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.addAsync(\n  \"webapp - generating boilerplate should not change runtime config\",\n  async function (test) {\n    // Set a dummy key in the runtime config served in the\n    // boilerplate. Test that the dummy key appears in the boilerplate,\n    // but not in __meteor_runtime_config__ after generating the\n    // boilerplate.\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n    const boilerplate = WebAppInternals.generateBoilerplateInstance(\n      \"web.browser\",\n      [], // empty manifest\n      { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } }\n    );\n\n    const stream = boilerplate.toHTMLStream();\n    const boilerplateHtml = await streamToString(stream)\n    test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n    test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n  }\n);\n\nTinytest.addAsync(\n  \"webapp - WebAppInternals.registerBoilerplateDataCallback\",\n  async function (test) {\n    const key = \"from webapp_tests.js\";\n    let callCount = 0;\n\n    function callback(request, data, arch) {\n      test.equal(arch, \"web.browser\");\n      test.equal(request.url, \"http://example.com\");\n      test.equal(data.dynamicHead.indexOf(\"so dynamic\"), 0);\n      test.equal(data.body, \"\");\n      data.body = \"<div>oyez</div>\";\n      ++callCount;\n    }\n\n    WebAppInternals.registerBoilerplateDataCallback(key, callback);\n\n    test.equal(callCount, 0);\n\n    const req = new http.IncomingMessage();\n    req.url = \"http://example.com\";\n    req.browser = { name: \"headless\" };\n    req.dynamicHead = \"so dynamic\";\n\n    const { stream } = WebAppInternals.getBoilerplate(req, \"web.browser\");\n    const html = await streamToString(stream);\n\n    test.equal(callCount, 1);\n\n    test.isTrue(html.indexOf([\n      \"<body>\",\n      \"<div>oyez</div>\"\n    ].join(\"\")) >= 0);\n\n    test.equal(\n      // Make sure this callback doesn't get called again after this test.\n      WebAppInternals.registerBoilerplateDataCallback(key, null),\n      callback\n    );\n  }\n);\n\n// Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\nTinytest.add(\n  \"webapp - port should be parsed as int unless it is a named pipe\",\n  function (test) {\n    // Named pipes on Windows Server follow the format:\n    // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n    const namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n    const namedPipeServer =\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n    test.equal(\n      WebAppInternals.parsePort(namedPipe),\n      \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(namedPipeServer),\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(8080),\n      8080\n    );\n    test.equal(\n      WebAppInternals.parsePort(\"8080\"),\n      8080\n    );\n    // Ensure strangely formatted ports still work for backwards compatibility\n    test.equal(\n      WebAppInternals.parsePort(\"8080abc\"),\n      8080\n    );\n  }\n);\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^3\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module.basicAuth),\n             'function');\n});\n"]},"sourceType":"script","hash":"23e9f46510d427bb114c6cc9a1e777829c104f49"}
