{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"}},"code":"module.export({\n  default: () => LinkManyMeta\n});\nlet Link;\nmodule.watch(require(\"./base.js\"), {\n  default(v) {\n    Link = v;\n  }\n\n}, 0);\nlet SmartArgs;\nmodule.watch(require(\"./lib/smartArguments.js\"), {\n  default(v) {\n    SmartArgs = v;\n  }\n\n}, 1);\n\nclass LinkManyMeta extends Link {\n  clean() {\n    if (!this.object[this.linkStorageField]) {\n      this.object[this.linkStorageField] = [];\n    }\n  }\n  /**\n   * @param what\n   * @param metadata\n   */\n\n\n  add(what) {\n    let metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.isVirtual) {\n      this._virtualAction('add', what, metadata);\n\n      return this;\n    }\n\n    const _ids = this.identifyIds(what, true);\n\n    this._validateIds(_ids);\n\n    let field = this.linkStorageField;\n    this.object[field] = this.object[field] || [];\n    let metadatas = [];\n\n    _.each(_ids, _id => {\n      let localMetadata = _.clone(metadata);\n\n      localMetadata._id = _id;\n      this.object[field].push(localMetadata);\n      metadatas.push(localMetadata);\n    });\n\n    let modifier = {\n      $addToSet: {\n        [field]: {\n          $each: metadatas\n        }\n      }\n    };\n    this.linker.mainCollection.update(this.object._id, modifier);\n    return this;\n  }\n  /**\n   * @param what\n   * @param extendMetadata\n   */\n\n\n  metadata(what, extendMetadata) {\n    if (this.isVirtual) {\n      this._virtualAction('metadata', what, extendMetadata);\n\n      return this;\n    }\n\n    let field = this.linkStorageField;\n\n    if (what === undefined) {\n      return this.object[field];\n    }\n\n    if (_.isArray(what)) {\n      throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n    }\n\n    const _id = this.identifyId(what);\n\n    let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n\n    if (extendMetadata === undefined) {\n      return existingMetadata;\n    } else {\n      _.extend(existingMetadata, extendMetadata);\n\n      let subfield = field + '._id';\n      let subfieldUpdate = field + '.$';\n      this.linker.mainCollection.update({\n        _id: this.object._id,\n        [subfield]: _id\n      }, {\n        $set: {\n          [subfieldUpdate]: existingMetadata\n        }\n      });\n    }\n\n    return this;\n  }\n\n  remove(what) {\n    if (this.isVirtual) {\n      this._virtualAction('remove', what);\n\n      return this;\n    }\n\n    const _ids = this.identifyIds(what);\n\n    let field = this.linkStorageField;\n    this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n    let modifier = {\n      $pull: {\n        [field]: {\n          $elemMatch: {\n            _id: {\n              $in: _ids\n            }\n          }\n        }\n      }\n    };\n    this.linker.mainCollection.update(this.object._id, modifier);\n    return this;\n  }\n\n  set(what, metadata) {\n    if (this.isVirtual) {\n      this._virtualAction('set', what, metadata);\n\n      return this;\n    }\n\n    throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n  }\n\n  unset(what) {\n    if (this.isVirtual) {\n      this._virtualAction('unset', what);\n\n      return this;\n    }\n\n    throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"],"names":["module","export","default","LinkManyMeta","Link","watch","require","v","SmartArgs","clean","object","linkStorageField","add","what","metadata","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","metadatas","_","each","_id","localMetadata","clone","push","modifier","$addToSet","$each","linker","mainCollection","update","extendMetadata","undefined","isArray","Meteor","Error","identifyId","existingMetadata","find","extend","subfield","subfieldUpdate","$set","remove","filter","link","contains","$pull","$elemMatch","$in","set","unset"],"mappings":"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","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * @param what\n     * @param metadata\n     */\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n            localMetadata._id = _id;\n\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: metadatas}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     * @param extendMetadata\n     */\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n               $set: {\n                   [subfieldUpdate]: existingMetadata\n               }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n        let field = this.linkStorageField;\n\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n\n        let modifier = {\n            $pull: {\n                [field]: {\n                    $elemMatch: {\n                        _id: {\n                            $in: _ids\n                        }\n                    }\n                }\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"sourceType":"script","hash":"09e6da9b999339c01758c6e8f737dd1f79b1c8e0"}
