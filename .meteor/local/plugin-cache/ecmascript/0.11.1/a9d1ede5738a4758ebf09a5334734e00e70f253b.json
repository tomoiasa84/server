{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/mongo/oplog_tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/mongo/oplog_tests.js","filename":"/Users/simiontomoiaga/git/server/packages/mongo/oplog_tests.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/mongo/oplog_tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/oplog_tests.js"}},"code":"var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled = !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function (expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({\n      added: function () {}\n    }); // If there's no oplog at all, we shouldn't ever use it.\n\n    if (!oplogEnabled) expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n  supported(true, {\n    _id: \"asdf\"\n  });\n  supported(true, {\n    _id: 1234\n  });\n  supported(true, {\n    _id: new Mongo.ObjectID()\n  });\n  supported(true, {\n    foo: \"asdf\",\n    bar: 1234,\n    baz: new Mongo.ObjectID(),\n    eeney: true,\n    miney: false,\n    moe: null\n  });\n  supported(true, {});\n  supported(true, {\n    $and: [{\n      foo: \"asdf\"\n    }, {\n      bar: \"baz\"\n    }]\n  });\n  supported(true, {\n    foo: {\n      x: 1\n    }\n  });\n  supported(true, {\n    foo: {\n      $gt: 1\n    }\n  });\n  supported(true, {\n    foo: [1, 2, 3]\n  }); // No $where.\n\n  supported(false, {\n    $where: \"xxx\"\n  });\n  supported(false, {\n    $and: [{\n      foo: \"adsf\"\n    }, {\n      $where: \"xxx\"\n    }]\n  }); // No geoqueries.\n\n  supported(false, {\n    x: {\n      $near: [1, 1]\n    }\n  }); // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n\n  supported(false, {\n    x: {\n      $all: [{\n        $elemMatch: {\n          y: 2\n        }\n      }]\n    }\n  });\n  supported(true, {}, {\n    sort: {\n      x: 1\n    }\n  });\n  supported(true, {}, {\n    sort: {\n      x: 1\n    },\n    limit: 5\n  });\n  supported(false, {}, {\n    sort: {\n      $natural: 1\n    },\n    limit: 5\n  });\n  supported(false, {}, {\n    limit: 5\n  });\n  supported(false, {}, {\n    skip: 2,\n    limit: 5\n  });\n  supported(false, {}, {\n    skip: 2\n  });\n});\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\"mongo-livedata - oplog - entry skipping\", [function (test, expect) {\n  var self = this;\n  self.collectionName = Random.id();\n  self.collection = new Mongo.Collection(self.collectionName);\n\n  self.collection._ensureIndex({\n    species: 1\n  }); // Fill collection with lots of irrelevant objects (red cats) and some\n  // relevant ones (blue dogs).\n  // After updating to mongo 3.2 with the 2.1.18 driver it was no longer\n  // possible to make this test fail with TOO_FAR_BEHIND = 2000.\n  // The documents waiting to be processed would hardly go beyond 1000\n  // using mongo 3.2 with WiredTiger\n\n\n  MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle._defineTooFarBehind(500);\n\n  self.IRRELEVANT_SIZE = 15000;\n  self.RELEVANT_SIZE = 10;\n  var docs = [];\n  var i;\n\n  for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"cat \" + i,\n      species: 'cat',\n      color: 'red'\n    });\n  }\n\n  for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"dog \" + i,\n      species: 'dog',\n      color: 'blue'\n    });\n  } // XXX implement bulk insert #1255\n\n\n  var rawCollection = self.collection.rawCollection();\n  rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n    test.isFalse(err);\n  })));\n}, function (test, expect) {\n  var self = this;\n  test.equal(self.collection.find().count(), self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n  var blueDog5Id = null;\n  var gotSpot = false; // Watch for blue dogs.\n\n  const gotSpotPromise = new Promise(resolve => {\n    self.subHandle = self.collection.find({\n      species: 'dog',\n      color: 'blue'\n    }).observeChanges({\n      added(id, fields) {\n        if (fields.name === 'dog 5') {\n          blueDog5Id = id;\n        }\n      },\n\n      changed(id, fields) {\n        if (EJSON.equals(id, blueDog5Id) && fields.name === 'spot') {\n          gotSpot = true;\n          resolve();\n        }\n      }\n\n    });\n  });\n  test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n  test.isTrue(blueDog5Id);\n  test.isFalse(gotSpot);\n  self.skipped = false;\n  self.skipHandle = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onSkippedEntries(function () {\n    self.skipped = true;\n  }); // Dye all the cats blue. This adds lots of oplog mentries that look like\n  // they might in theory be relevant (since they say \"something you didn't\n  // know about is now blue\", and who knows, maybe it's a dog) which puts\n  // the OplogObserveDriver into FETCHING mode, which performs poorly.\n\n  self.collection.update({\n    species: 'cat'\n  }, {\n    $set: {\n      color: 'blue'\n    }\n  }, {\n    multi: true\n  });\n  self.collection.update(blueDog5Id, {\n    $set: {\n      name: 'spot'\n    }\n  }); // We ought to see the spot change soon!\n\n  return gotSpotPromise;\n}, function (test, expect) {\n  var self = this;\n  test.isTrue(self.skipped); //This gets the TOO_FAR_BEHIND back to its initial value\n\n  MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle._resetTooFarBehind();\n\n  self.skipHandle.stop();\n  self.subHandle.stop();\n  self.collection.remove({});\n}]);","map":{"version":3,"sources":["packages/mongo/oplog_tests.js"],"names":["OplogCollection","Mongo","Collection","Random","id","Tinytest","add","test","oplogEnabled","MongoInternals","defaultRemoteCollectionDriver","mongo","_oplogHandle","supported","expected","selector","options","cursor","find","handle","observeChanges","added","equal","_multiplexer","_observeDriver","_usesOplog","stop","ObjectID","_id","foo","bar","baz","eeney","miney","moe","$and","x","$gt","$where","$near","$all","$elemMatch","y","sort","limit","$natural","skip","process","env","MONGO_OPLOG_URL","testAsyncMulti","expect","self","collectionName","collection","_ensureIndex","species","_defineTooFarBehind","IRRELEVANT_SIZE","RELEVANT_SIZE","docs","i","push","name","color","rawCollection","insert","Meteor","bindEnvironment","err","isFalse","count","blueDog5Id","gotSpot","gotSpotPromise","Promise","resolve","subHandle","fields","changed","EJSON","equals","isTrue","skipped","skipHandle","onSkippedEntries","update","$set","multi","_resetTooFarBehind","remove"],"mappings":"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","sourcesContent":["var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\n\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled =\n        !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function (expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({added: function () {}});\n    // If there's no oplog at all, we shouldn't ever use it.\n    if (!oplogEnabled)\n      expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n\n  supported(true, {_id: \"asdf\"});\n  supported(true, {_id: 1234});\n  supported(true, {_id: new Mongo.ObjectID()});\n\n  supported(true, {foo: \"asdf\",\n                   bar: 1234,\n                   baz: new Mongo.ObjectID(),\n                   eeney: true,\n                   miney: false,\n                   moe: null});\n\n  supported(true, {});\n\n  supported(true, {$and: [{foo: \"asdf\"}, {bar: \"baz\"}]});\n  supported(true, {foo: {x: 1}});\n  supported(true, {foo: {$gt: 1}});\n  supported(true, {foo: [1, 2, 3]});\n\n  // No $where.\n  supported(false, {$where: \"xxx\"});\n  supported(false, {$and: [{foo: \"adsf\"}, {$where: \"xxx\"}]});\n  // No geoqueries.\n  supported(false, {x: {$near: [1,1]}});\n  // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n  supported(false, {x: {$all: [{$elemMatch: {y: 2}}]}});\n\n  supported(true, {}, { sort: {x:1} });\n  supported(true, {}, { sort: {x:1}, limit: 5 });\n  supported(false, {}, { sort: {$natural:1}, limit: 5 });\n  supported(false, {}, { limit: 5 });\n  supported(false, {}, { skip: 2, limit: 5 });\n  supported(false, {}, { skip: 2 });\n});\n\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\n  \"mongo-livedata - oplog - entry skipping\", [\n    function (test, expect) {\n      var self = this;\n      self.collectionName = Random.id();\n      self.collection = new Mongo.Collection(self.collectionName);\n      self.collection._ensureIndex({species: 1});\n\n      // Fill collection with lots of irrelevant objects (red cats) and some\n      // relevant ones (blue dogs).\n\n      // After updating to mongo 3.2 with the 2.1.18 driver it was no longer\n      // possible to make this test fail with TOO_FAR_BEHIND = 2000.\n      // The documents waiting to be processed would hardly go beyond 1000\n      // using mongo 3.2 with WiredTiger\n      MongoInternals.defaultRemoteCollectionDriver()\n        .mongo._oplogHandle._defineTooFarBehind(500);\n\n      self.IRRELEVANT_SIZE = 15000;\n      self.RELEVANT_SIZE = 10;\n      var docs = [];\n      var i;\n      for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"cat \" + i,\n          species: 'cat',\n          color: 'red'\n        });\n      }\n      for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"dog \" + i,\n          species: 'dog',\n          color: 'blue'\n        });\n      }\n      // XXX implement bulk insert #1255\n      var rawCollection = self.collection.rawCollection();\n      rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n        test.isFalse(err);\n      })));\n    },\n\n    function (test, expect) {\n      var self = this;\n\n      test.equal(self.collection.find().count(),\n                 self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n\n      var blueDog5Id = null;\n      var gotSpot = false;\n\n      // Watch for blue dogs.\n      const gotSpotPromise = new Promise(resolve => {\n        self.subHandle = self.collection.find({\n          species: 'dog',\n          color: 'blue',\n        }).observeChanges({\n          added(id, fields) {\n            if (fields.name === 'dog 5') {\n              blueDog5Id = id;\n            }\n          },\n          changed(id, fields) {\n            if (EJSON.equals(id, blueDog5Id) &&\n                fields.name === 'spot') {\n              gotSpot = true;\n              resolve();\n            }\n          },\n        });\n      });\n\n      test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n      test.isTrue(blueDog5Id);\n      test.isFalse(gotSpot);\n\n      self.skipped = false;\n      self.skipHandle = MongoInternals.defaultRemoteCollectionDriver()\n        .mongo._oplogHandle.onSkippedEntries(function () {\n          self.skipped = true;\n        });\n\n      // Dye all the cats blue. This adds lots of oplog mentries that look like\n      // they might in theory be relevant (since they say \"something you didn't\n      // know about is now blue\", and who knows, maybe it's a dog) which puts\n      // the OplogObserveDriver into FETCHING mode, which performs poorly.\n      self.collection.update({species: 'cat'},\n                             {$set: {color: 'blue'}},\n                             {multi: true});\n      self.collection.update(blueDog5Id, {$set: {name: 'spot'}});\n\n      // We ought to see the spot change soon!\n      return gotSpotPromise;\n    },\n\n    function (test, expect) {\n      var self = this;\n      test.isTrue(self.skipped);\n\n      //This gets the TOO_FAR_BEHIND back to its initial value\n      MongoInternals.defaultRemoteCollectionDriver()\n        .mongo._oplogHandle._resetTooFarBehind();\n\n      self.skipHandle.stop();\n      self.subHandle.stop();\n      self.collection.remove({});\n    }\n  ]\n);\n"]},"sourceType":"script","hash":"a9d1ede5738a4758ebf09a5334734e00e70f253b"}
