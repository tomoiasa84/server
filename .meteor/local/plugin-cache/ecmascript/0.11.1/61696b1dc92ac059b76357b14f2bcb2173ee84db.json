{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js"}},"code":"let applyProps;\nmodule.watch(require(\"./applyProps.js\"), {\n  default(v) {\n    applyProps = v;\n  }\n\n}, 0);\n\nfunction compose(node, userId) {\n  return {\n    find(parent) {\n      if (parent) {\n        let {\n          filters,\n          options\n        } = applyProps(node); // composition\n\n        let linker = node.linker;\n        let accessor = linker.createLink(parent); // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n\n        if (linker.isVirtual()) {\n          options.fields = options.fields || {};\n\n          _.extend(options.fields, {\n            [linker.linkStorageField]: 1\n          });\n        }\n\n        return accessor.find(filters, options, userId);\n      }\n    },\n\n    children: _.map(node.collectionNodes, n => compose(n, userId))\n  };\n}\n\nmodule.exportDefault((node, userId, config = {\n  bypassFirewalls: false\n}) => {\n  return {\n    find() {\n      let {\n        filters,\n        options\n      } = applyProps(node);\n      return node.collection.find(filters, options, userId);\n    },\n\n    children: _.map(node.collectionNodes, n => {\n      const userIdToPass = config.bypassFirewalls ? undefined : userId;\n      return compose(n, userIdToPass);\n    })\n  };\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveCompose.js"],"names":["applyProps","module","watch","require","default","v","compose","node","userId","find","parent","filters","options","linker","accessor","createLink","isVirtual","fields","_","extend","linkStorageField","children","map","collectionNodes","n","exportDefault","config","bypassFirewalls","collection","userIdToPass","undefined"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,UAAQC,CAAR,EAAU;AAACL,iBAAWK,CAAX;AAAa;;AAAzB,CAAxC,EAAmE,CAAnE;;AAEf,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA+B;AAC3B,SAAO;AACHC,SAAKC,MAAL,EAAa;AACT,UAAIA,MAAJ,EAAY;AACR,YAAI;AAACC,iBAAD;AAAUC;AAAV,YAAqBZ,WAAWO,IAAX,CAAzB,CADQ,CAGR;;AACA,YAAIM,SAASN,KAAKM,MAAlB;AACA,YAAIC,WAAWD,OAAOE,UAAP,CAAkBL,MAAlB,CAAf,CALQ,CAOR;;AACA,YAAIG,OAAOG,SAAP,EAAJ,EAAwB;AACpBJ,kBAAQK,MAAR,GAAiBL,QAAQK,MAAR,IAAkB,EAAnC;;AACAC,YAAEC,MAAF,CAASP,QAAQK,MAAjB,EAAyB;AACrB,aAACJ,OAAOO,gBAAR,GAA2B;AADN,WAAzB;AAGH;;AAED,eAAON,SAASL,IAAT,CAAcE,OAAd,EAAuBC,OAAvB,EAAgCJ,MAAhC,CAAP;AACH;AACJ,KAnBE;;AAqBHa,cAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4BC,KAAKlB,QAAQkB,CAAR,EAAWhB,MAAX,CAAjC;AArBP,GAAP;AAuBH;;AA1BDP,OAAOwB,aAAP,CA4Be,CAAClB,IAAD,EAAOC,MAAP,EAAekB,SAAS;AAACC,mBAAiB;AAAlB,CAAxB,KAAqD;AAChE,SAAO;AACHlB,WAAO;AACH,UAAI;AAACE,eAAD;AAAUC;AAAV,UAAqBZ,WAAWO,IAAX,CAAzB;AAEA,aAAOA,KAAKqB,UAAL,CAAgBnB,IAAhB,CAAqBE,OAArB,EAA8BC,OAA9B,EAAuCJ,MAAvC,CAAP;AACH,KALE;;AAOHa,cAAUH,EAAEI,GAAF,CAAMf,KAAKgB,eAAX,EAA4BC,KAAK;AACvC,YAAMK,eAAgBH,OAAOC,eAAR,GAA2BG,SAA3B,GAAuCtB,MAA5D;AAEA,aAAOF,QAAQkB,CAAR,EAAWK,YAAX,CAAP;AACH,KAJS;AAPP,GAAP;AAaH,CA1CD","sourcesContent":["import applyProps from './applyProps.js';\n\nfunction compose(node, userId) {\n    return {\n        find(parent) {\n            if (parent) {\n                let {filters, options} = applyProps(node);\n\n                // composition\n                let linker = node.linker;\n                let accessor = linker.createLink(parent);\n\n                // the rule is this, if a child I want to fetch is virtual, then I want to fetch the link storage of those fields\n                if (linker.isVirtual()) {\n                    options.fields = options.fields || {};\n                    _.extend(options.fields, {\n                        [linker.linkStorageField]: 1\n                    });\n                }\n\n                return accessor.find(filters, options, userId);\n            }\n        },\n\n        children: _.map(node.collectionNodes, n => compose(n, userId))\n    }\n}\n\nexport default (node, userId, config = {bypassFirewalls: false}) => {\n    return {\n        find() {\n            let {filters, options} = applyProps(node);\n\n            return node.collection.find(filters, options, userId);\n        },\n\n        children: _.map(node.collectionNodes, n => {\n            const userIdToPass = (config.bypassFirewalls) ? undefined : userId;\n\n            return compose(n, userIdToPass);\n        })\n    }\n}"]},"sourceType":"script","hash":"61696b1dc92ac059b76357b14f2bcb2173ee84db"}
