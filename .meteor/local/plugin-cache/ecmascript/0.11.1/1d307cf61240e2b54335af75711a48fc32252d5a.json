{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/ssr.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/server/ssr.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/ssr.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/ssr.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/ssr.js"}},"code":"module.export({\n  default: () => getRenderer\n});\nlet ApolloClient;\nmodule.watch(require(\"apollo-client\"), {\n  ApolloClient(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet InMemoryCache;\nmodule.watch(require(\"apollo-cache-inmemory\"), {\n  InMemoryCache(v) {\n    InMemoryCache = v;\n  }\n\n}, 1);\n\nfunction getRenderer(options) {\n  let React;\n  module.watch(require(\"react\"), {\n    default(v) {\n      React = v;\n    }\n\n  }, 2);\n  let renderToString;\n  module.watch(require(\"react-dom/server\"), {\n    renderToString(v) {\n      renderToString = v;\n    }\n\n  }, 3);\n  let getDataFromTree, ApolloProvider;\n  module.watch(require(\"react-apollo\"), {\n    getDataFromTree(v) {\n      getDataFromTree = v;\n    },\n\n    ApolloProvider(v) {\n      ApolloProvider = v;\n    }\n\n  }, 4);\n  let SchemaLink;\n  module.watch(require(\"apollo-link-schema\"), {\n    SchemaLink(v) {\n      SchemaLink = v;\n    }\n\n  }, 5);\n\n  const render = sink => Promise.asyncApply(() => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: Promise.await(options.server.context({\n        req: sink.request\n      }))\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache()\n    });\n    const context = {};\n    const WrappedApp = React.createElement(ApolloProvider, {\n      client: client\n    }, options.app(sink));\n    options.handler && Promise.await(options.handler(sink)); // load all data from local server;\n\n    Promise.await(getDataFromTree(WrappedApp));\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  });\n\n  return render;\n}","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/ssr.js"],"names":["module","export","default","getRenderer","ApolloClient","watch","require","v","InMemoryCache","options","React","renderToString","getDataFromTree","ApolloProvider","SchemaLink","render","sink","link","schema","server","context","req","request","getLink","client","ssrMode","cache","WrappedApp","app","handler","body","renderIntoElementById","root","initialState","extract","appendToBody","JSON","stringify"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIC;AAAb,CAAd;AAAyC,IAAIC,YAAJ;AAAiBJ,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACF,eAAaG,CAAb,EAAe;AAACH,mBAAaG,CAAb;AAAe;;AAAhC,CAAtC,EAAwE,CAAxE;AAA2E,IAAIC,aAAJ;AAAkBR,OAAOK,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACE,gBAAcD,CAAd,EAAgB;AAACC,oBAAcD,CAAd;AAAgB;;AAAlC,CAA9C,EAAkF,CAAlF;;AAUxI,SAASJ,WAAT,CAAqBM,OAArB,EAA8B;AAV7C,MAAIC,KAAJ;AAAUV,SAAOK,KAAP,CAAaC,QAAQ,OAAR,CAAb,EAA8B;AAACJ,YAAQK,CAAR,EAAU;AAACG,cAAMH,CAAN;AAAQ;;AAApB,GAA9B,EAAoD,CAApD;AAAuD,MAAII,cAAJ;AAAmBX,SAAOK,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACK,mBAAeJ,CAAf,EAAiB;AAACI,uBAAeJ,CAAf;AAAiB;;AAApC,GAAzC,EAA+E,CAA/E;AAAkF,MAAIK,eAAJ,EAAoBC,cAApB;AAAmCb,SAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACM,oBAAgBL,CAAhB,EAAkB;AAACK,wBAAgBL,CAAhB;AAAkB,KAAtC;;AAAuCM,mBAAeN,CAAf,EAAiB;AAACM,uBAAeN,CAAf;AAAiB;;AAA1E,GAArC,EAAiH,CAAjH;AAAoH,MAAIO,UAAJ;AAAed,SAAOK,KAAP,CAAaC,QAAQ,oBAAR,CAAb,EAA2C;AAACQ,eAAWP,CAAX,EAAa;AAACO,mBAAWP,CAAX;AAAa;;AAA5B,GAA3C,EAAyE,CAAzE;;AAgB1U,QAAMQ,SAAeC,IAAN,6BAAc;AAC3B,UAAMC,OAAO,IAAIH,UAAJ,CAAe;AAC1BI,cAAQT,QAAQU,MAAR,CAAeD,MADG;AAE1BE,6BAAeX,QAAQU,MAAR,CAAeC,OAAf,CAAuB;AAAEC,aAAKL,KAAKM;AAAZ,OAAvB,CAAf;AAF0B,KAAf,CAAb;;AAKA,QAAIb,QAAQc,OAAZ,EAAqB;AACnBN,aAAOR,QAAQc,OAAR,CAAgBN,IAAhB,CAAP;AACD;;AAED,UAAMO,SAAS,IAAIpB,YAAJ,CAAiB;AAC9BqB,eAAS,IADqB;AAE9BR,UAF8B;AAG9BS,aAAO,IAAIlB,aAAJ;AAHuB,KAAjB,CAAf;AAMA,UAAMY,UAAU,EAAhB;AACA,UAAMO,aACJ,oBAAC,cAAD;AAAgB,cAAQH;AAAxB,OAAiCf,QAAQmB,GAAR,CAAYZ,IAAZ,CAAjC,CADF;AAIAP,YAAQoB,OAAR,kBAA0BpB,QAAQoB,OAAR,CAAgBb,IAAhB,CAA1B,EArB2B,CAuB3B;;AACA,kBAAMJ,gBAAgBe,UAAhB,CAAN;AAEA,UAAMG,OAAOnB,eAAegB,UAAf,CAAb;AACAX,SAAKe,qBAAL,CAA2BtB,QAAQuB,IAAR,IAAgB,YAA3C,EAAyDF,IAAzD;AAEA,UAAMG,eAAeT,OAAOU,OAAP,EAArB;AACAlB,SAAKmB,YAAL,CAAmB;wCACiBC,KAAKC,SAAL,CAAeJ,YAAf,CAA6B;KADjE;AAGD,GAjCc,CAAf;;AAmCA,SAAOlB,MAAP;AACD","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n/**\n * @param {() => React.Element} options.app\n * @param {String} options.root The id of element we're gonna render in\n * @param {ApolloServer} options.server The id of element we're gonna render in\n * @param {Function} options.handler Perform additional operations\n * @param {Function} options.getLink Perform additional operations\n */\nexport default function getRenderer(options) {\n  import React from 'react';\n  import { renderToString } from 'react-dom/server';\n  import { getDataFromTree, ApolloProvider } from 'react-apollo';\n  import { SchemaLink } from 'apollo-link-schema';\n\n  const render = async sink => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: await options.server.context({ req: sink.request }),\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache(),\n    });\n\n    const context = {};\n    const WrappedApp = (\n      <ApolloProvider client={client}>{options.app(sink)}</ApolloProvider>\n    );\n\n    options.handler && (await options.handler(sink));\n\n    // load all data from local server;\n    await getDataFromTree(WrappedApp);\n\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  };\n\n  return render;\n}\n"]},"sourceType":"script","hash":"1d307cf61240e2b54335af75711a48fc32252d5a"}
