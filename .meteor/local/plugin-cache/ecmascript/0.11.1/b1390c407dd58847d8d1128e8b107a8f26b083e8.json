{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js"}},"code":"let NamedQuery;\nmodule.watch(require(\"../namedQuery.js\"), {\n  default(v) {\n    NamedQuery = v;\n  }\n\n}, 0);\nlet ExposeSchema, ExposeDefaults;\nmodule.watch(require(\"./schema.js\"), {\n  ExposeSchema(v) {\n    ExposeSchema = v;\n  },\n\n  ExposeDefaults(v) {\n    ExposeDefaults = v;\n  }\n\n}, 1);\nlet mergeDeep;\nmodule.watch(require(\"./lib/mergeDeep.js\"), {\n  default(v) {\n    mergeDeep = v;\n  }\n\n}, 2);\nlet createGraph;\nmodule.watch(require(\"../../query/lib/createGraph.js\"), {\n  default(v) {\n    createGraph = v;\n  }\n\n}, 3);\nlet recursiveCompose;\nmodule.watch(require(\"../../query/lib/recursiveCompose.js\"), {\n  default(v) {\n    recursiveCompose = v;\n  }\n\n}, 4);\nlet prepareForProcess;\nmodule.watch(require(\"../../query/lib/prepareForProcess.js\"), {\n  default(v) {\n    prepareForProcess = v;\n  }\n\n}, 5);\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 6);\nlet intersectDeep;\nmodule.watch(require(\"../../query/lib/intersectDeep\"), {\n  default(v) {\n    intersectDeep = v;\n  }\n\n}, 7);\nlet genCountEndpoint;\nmodule.watch(require(\"../../query/counts/genEndpoint.server\"), {\n  default(v) {\n    genCountEndpoint = v;\n  }\n\n}, 8);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 9);\n\n_.extend(NamedQuery.prototype, {\n  /**\n   * @param config\n   */\n  expose(config = {}) {\n    if (!Meteor.isServer) {\n      throw new Meteor.Error('invalid-environment', `You must run this in server-side code`);\n    }\n\n    if (this.isExposed) {\n      throw new Meteor.Error('query-already-exposed', `You have already exposed: \"${this.name}\" named query`);\n    }\n\n    this.exposeConfig = Object.assign({}, ExposeDefaults, config);\n    check(this.exposeConfig, ExposeSchema);\n\n    if (this.exposeConfig.validateParams) {\n      this.options.validateParams = this.exposeConfig.validateParams;\n    }\n\n    if (!this.isResolver) {\n      this._initNormalQuery();\n    } else {\n      this._initMethod();\n    }\n\n    this.isExposed = true;\n  },\n\n  /**\n   * Initializes a normal NamedQuery (normal == not a resolver)\n   * @private\n   */\n  _initNormalQuery() {\n    const config = this.exposeConfig;\n\n    if (config.method) {\n      this._initMethod();\n    }\n\n    if (config.publication) {\n      this._initPublication();\n    }\n\n    if (!config.method && !config.publication) {\n      throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true');\n    }\n\n    this._initCountMethod();\n\n    this._initCountPublication();\n  },\n\n  /**\n   * Returns the embodied body of the request\n   * @param {*} _embody\n   * @param {*} body\n   */\n  doEmbodimentIfItApplies(body) {\n    // query is not exposed yet, so it doesn't have embodiment logic\n    if (!this.exposeConfig) {\n      return;\n    }\n\n    const {\n      embody\n    } = this.exposeConfig;\n\n    if (!embody) {\n      return;\n    }\n\n    if (_.isFunction(embody)) {\n      embody.call(this, body, this.params);\n    } else {\n      mergeDeep(body, embody);\n    }\n  },\n\n  /**\n   * @private\n   */\n  _initMethod() {\n    const self = this;\n    Meteor.methods({\n      [this.name](newParams) {\n        self._unblockIfNecessary(this); // security is done in the fetching because we provide a context\n\n\n        return self.clone(newParams).fetch(this);\n      }\n\n    });\n  },\n\n  /**\n   * @returns {void}\n   * @private\n   */\n  _initCountMethod() {\n    const self = this;\n    Meteor.methods({\n      [this.name + '.count'](newParams) {\n        self._unblockIfNecessary(this); // security is done in the fetching because we provide a context\n\n\n        return self.clone(newParams).getCount(this);\n      }\n\n    });\n  },\n\n  /**\n   * @returns {*}\n   * @private\n   */\n  _initCountPublication() {\n    const self = this;\n    genCountEndpoint(self.name, {\n      getCursor({\n        session\n      }) {\n        const query = self.clone(session.params);\n        return query.getCursorForCounting();\n      },\n\n      getSession(newParams) {\n        self.doValidateParams(newParams);\n\n        self._callFirewall(this, this.userId, params);\n\n        return {\n          name: self.name,\n          params: newParams\n        };\n      }\n\n    });\n  },\n\n  /**\n   * @private\n   */\n  _initPublication() {\n    const self = this;\n    Meteor.publishComposite(this.name, function (params = {}) {\n      self._unblockIfNecessary(this);\n\n      self.doValidateParams(params);\n\n      self._callFirewall(this, this.userId, params);\n\n      let body = deepClone(self.body);\n\n      if (params.$body) {\n        body = intersectDeep(body, params.$body);\n      }\n\n      self.doEmbodimentIfItApplies(body);\n      body = prepareForProcess(body, params);\n      const rootNode = createGraph(self.collection, body);\n      return recursiveCompose(rootNode);\n    });\n  },\n\n  /**\n   * @param context\n   * @param userId\n   * @param params\n   * @private\n   */\n  _callFirewall(context, userId, params) {\n    const {\n      firewall\n    } = this.exposeConfig;\n\n    if (!firewall) {\n      return;\n    }\n\n    if (_.isArray(firewall)) {\n      firewall.forEach(fire => {\n        fire.call(context, userId, params);\n      });\n    } else {\n      firewall.call(context, userId, params);\n    }\n  },\n\n  /**\n   * @param context\n   * @private\n   */\n  _unblockIfNecessary(context) {\n    if (this.exposeConfig.unblock) {\n      if (context.unblock) {\n        context.unblock();\n      }\n    }\n  }\n\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/expose/extension.js"],"names":["NamedQuery","module","watch","require","default","v","ExposeSchema","ExposeDefaults","mergeDeep","createGraph","recursiveCompose","prepareForProcess","deepClone","intersectDeep","genCountEndpoint","check","_","extend","prototype","expose","config","Meteor","isServer","Error","isExposed","name","exposeConfig","Object","assign","validateParams","options","isResolver","_initNormalQuery","_initMethod","method","publication","_initPublication","_initCountMethod","_initCountPublication","doEmbodimentIfItApplies","body","embody","isFunction","call","params","self","methods","newParams","_unblockIfNecessary","clone","fetch","getCount","getCursor","session","query","getCursorForCounting","getSession","doValidateParams","_callFirewall","userId","publishComposite","$body","rootNode","collection","context","firewall","isArray","forEach","fire","unblock"],"mappings":"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","sourcesContent":["import NamedQuery from '../namedQuery.js';\nimport { ExposeSchema, ExposeDefaults } from './schema.js';\nimport mergeDeep from './lib/mergeDeep.js';\nimport createGraph from '../../query/lib/createGraph.js';\nimport recursiveCompose from '../../query/lib/recursiveCompose.js';\nimport prepareForProcess from '../../query/lib/prepareForProcess.js';\nimport deepClone from 'lodash.clonedeep';\nimport intersectDeep from '../../query/lib/intersectDeep';\nimport genCountEndpoint from '../../query/counts/genEndpoint.server';\nimport { check } from 'meteor/check';\n\n_.extend(NamedQuery.prototype, {\n    /**\n     * @param config\n     */\n    expose(config = {}) {\n        if (!Meteor.isServer) {\n            throw new Meteor.Error(\n                'invalid-environment',\n                `You must run this in server-side code`\n            );\n        }\n\n        if (this.isExposed) {\n            throw new Meteor.Error(\n                'query-already-exposed',\n                `You have already exposed: \"${this.name}\" named query`\n            );\n        }\n\n        this.exposeConfig = Object.assign({}, ExposeDefaults, config);\n        check(this.exposeConfig, ExposeSchema);\n\n        if (this.exposeConfig.validateParams) {\n            this.options.validateParams = this.exposeConfig.validateParams;\n        }\n\n        if (!this.isResolver) {\n            this._initNormalQuery();\n        } else {\n            this._initMethod();\n        }\n\n        this.isExposed = true;\n    },\n\n    /**\n     * Initializes a normal NamedQuery (normal == not a resolver)\n     * @private\n     */\n    _initNormalQuery() {\n        const config = this.exposeConfig;\n        if (config.method) {\n            this._initMethod();\n        }\n\n        if (config.publication) {\n            this._initPublication();\n        }\n\n        if (!config.method && !config.publication) {\n            throw new Meteor.Error(\n                'weird',\n                'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true'\n            );\n        }\n\n        this._initCountMethod();\n        this._initCountPublication();\n    },\n\n    /**\n     * Returns the embodied body of the request\n     * @param {*} _embody\n     * @param {*} body\n     */\n    doEmbodimentIfItApplies(body) {\n        // query is not exposed yet, so it doesn't have embodiment logic\n        if (!this.exposeConfig) {\n            return;\n        }\n\n        const { embody } = this.exposeConfig;\n\n        if (!embody) {\n            return;\n        }\n\n        if (_.isFunction(embody)) {\n            embody.call(this, body, this.params);\n        } else {\n            mergeDeep(body, embody);\n        }\n    },\n\n    /**\n     * @private\n     */\n    _initMethod() {\n        const self = this;\n        Meteor.methods({\n            [this.name](newParams) {\n                self._unblockIfNecessary(this);\n\n                // security is done in the fetching because we provide a context\n                return self.clone(newParams).fetch(this);\n            },\n        });\n    },\n\n    /**\n     * @returns {void}\n     * @private\n     */\n    _initCountMethod() {\n        const self = this;\n\n        Meteor.methods({\n            [this.name + '.count'](newParams) {\n                self._unblockIfNecessary(this);\n\n                // security is done in the fetching because we provide a context\n                return self.clone(newParams).getCount(this);\n            },\n        });\n    },\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _initCountPublication() {\n        const self = this;\n\n        genCountEndpoint(self.name, {\n            getCursor({ session }) {\n                const query = self.clone(session.params);\n                return query.getCursorForCounting();\n            },\n\n            getSession(newParams) {\n                self.doValidateParams(newParams);\n                self._callFirewall(this, this.userId, params);\n\n                return { name: self.name, params: newParams };\n            },\n        });\n    },\n\n    /**\n     * @private\n     */\n    _initPublication() {\n        const self = this;\n\n        Meteor.publishComposite(this.name, function(params = {}) {\n            self._unblockIfNecessary(this);\n            self.doValidateParams(params);\n            self._callFirewall(this, this.userId, params);\n\n            let body = deepClone(self.body);\n            if (params.$body) {\n                body = intersectDeep(body, params.$body);\n            }\n\n            self.doEmbodimentIfItApplies(body);\n            body = prepareForProcess(body, params);\n\n            const rootNode = createGraph(self.collection, body);\n\n            return recursiveCompose(rootNode);\n        });\n    },\n\n    /**\n     * @param context\n     * @param userId\n     * @param params\n     * @private\n     */\n    _callFirewall(context, userId, params) {\n        const { firewall } = this.exposeConfig;\n        if (!firewall) {\n            return;\n        }\n\n        if (_.isArray(firewall)) {\n            firewall.forEach(fire => {\n                fire.call(context, userId, params);\n            });\n        } else {\n            firewall.call(context, userId, params);\n        }\n    },\n\n    /**\n     * @param context\n     * @private\n     */\n    _unblockIfNecessary(context) {\n        if (this.exposeConfig.unblock) {\n            if (context.unblock) {\n                context.unblock();\n            }\n        }\n    },\n});\n"]},"sourceType":"script","hash":"b1390c407dd58847d8d1128e8b107a8f26b083e8"}
