{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembler.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembler.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembler.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembler.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembler.js"}},"code":"let createSearchFilters;\nmodule.watch(require(\"../../links/lib/createSearchFilters\"), {\n  default(v) {\n    createSearchFilters = v;\n  }\n\n}, 0);\nlet cleanObjectForMetaFilters;\nmodule.watch(require(\"./lib/cleanObjectForMetaFilters\"), {\n  default(v) {\n    cleanObjectForMetaFilters = v;\n  }\n\n}, 1);\nlet sift;\nmodule.watch(require(\"sift\"), {\n  default(v) {\n    sift = v;\n  }\n\n}, 2);\nmodule.exportDefault((childCollectionNode, _ref) => {\n  let {\n    limit,\n    skip,\n    metaFilters\n  } = _ref;\n\n  if (childCollectionNode.results.length === 0) {\n    return;\n  }\n\n  const parent = childCollectionNode.parent;\n  const linker = childCollectionNode.linker;\n  const strategy = linker.strategy;\n  const isSingle = linker.isSingle();\n  const isMeta = linker.isMeta();\n  const fieldStorage = linker.linkStorageField; // cleaning the parent results from a child\n  // this may be the wrong approach but it works for now\n\n  if (isMeta && metaFilters) {\n    const metaFiltersTest = sift(metaFilters);\n\n    _.each(parent.results, parentResult => {\n      cleanObjectForMetaFilters(parentResult, fieldStorage, metaFiltersTest);\n    });\n  }\n\n  const resultsByKeyId = _.groupBy(childCollectionNode.results, '_id');\n\n  if (strategy === 'one') {\n    parent.results.forEach(parentResult => {\n      if (!parentResult[fieldStorage]) {\n        return;\n      }\n\n      parentResult[childCollectionNode.linkName] = filterAssembledData(resultsByKeyId[parentResult[fieldStorage]], {\n        limit,\n        skip\n      });\n    });\n  }\n\n  if (strategy === 'many') {\n    parent.results.forEach(parentResult => {\n      if (!parentResult[fieldStorage]) {\n        return;\n      }\n\n      let data = [];\n      parentResult[fieldStorage].forEach(_id => {\n        data.push(_.first(resultsByKeyId[_id]));\n      });\n      parentResult[childCollectionNode.linkName] = filterAssembledData(data, {\n        limit,\n        skip\n      });\n    });\n  }\n\n  if (strategy === 'one-meta') {\n    parent.results.forEach(parentResult => {\n      if (!parentResult[fieldStorage]) {\n        return;\n      }\n\n      const _id = parentResult[fieldStorage]._id;\n      parentResult[childCollectionNode.linkName] = filterAssembledData(resultsByKeyId[_id], {\n        limit,\n        skip\n      });\n    });\n  }\n\n  if (strategy === 'many-meta') {\n    parent.results.forEach(parentResult => {\n      const _ids = _.pluck(parentResult[fieldStorage], '_id');\n\n      let data = [];\n\n      _ids.forEach(_id => {\n        data.push(_.first(resultsByKeyId[_id]));\n      });\n\n      parentResult[childCollectionNode.linkName] = filterAssembledData(data, {\n        limit,\n        skip\n      });\n    });\n  }\n});\n\nfunction filterAssembledData(data, _ref2) {\n  let {\n    limit,\n    skip\n  } = _ref2;\n\n  if (limit && Array.isArray(data)) {\n    return data.slice(skip, limit);\n  }\n\n  return data;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/assembler.js"],"names":["createSearchFilters","module","watch","require","default","v","cleanObjectForMetaFilters","sift","exportDefault","childCollectionNode","limit","skip","metaFilters","results","length","parent","linker","strategy","isSingle","isMeta","fieldStorage","linkStorageField","metaFiltersTest","_","each","parentResult","resultsByKeyId","groupBy","forEach","linkName","filterAssembledData","data","_id","push","first","_ids","pluck","Array","isArray","slice"],"mappings":"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","sourcesContent":["import createSearchFilters from '../../links/lib/createSearchFilters';\nimport cleanObjectForMetaFilters from './lib/cleanObjectForMetaFilters';\nimport sift from 'sift';\n\nexport default (childCollectionNode, { limit, skip, metaFilters }) => {\n    if (childCollectionNode.results.length === 0) {\n        return;\n    }\n\n    const parent = childCollectionNode.parent;\n    const linker = childCollectionNode.linker;\n\n    const strategy = linker.strategy;\n    const isSingle = linker.isSingle();\n    const isMeta = linker.isMeta();\n    const fieldStorage = linker.linkStorageField;\n\n    // cleaning the parent results from a child\n    // this may be the wrong approach but it works for now\n    if (isMeta && metaFilters) {\n        const metaFiltersTest = sift(metaFilters);\n        _.each(parent.results, parentResult => {\n            cleanObjectForMetaFilters(\n                parentResult,\n                fieldStorage,\n                metaFiltersTest\n            );\n        });\n    }\n\n    const resultsByKeyId = _.groupBy(childCollectionNode.results, '_id');\n\n    if (strategy === 'one') {\n        parent.results.forEach(parentResult => {\n            if (!parentResult[fieldStorage]) {\n                return;\n            }\n\n            parentResult[childCollectionNode.linkName] = filterAssembledData(\n                resultsByKeyId[parentResult[fieldStorage]],\n                { limit, skip }\n            );\n        });\n    }\n\n    if (strategy === 'many') {\n        parent.results.forEach(parentResult => {\n            if (!parentResult[fieldStorage]) {\n                return;\n            }\n\n            let data = [];\n            parentResult[fieldStorage].forEach(_id => {\n                data.push(_.first(resultsByKeyId[_id]));\n            });\n\n            parentResult[childCollectionNode.linkName] = filterAssembledData(\n                data,\n                { limit, skip }\n            );\n        });\n    }\n\n    if (strategy === 'one-meta') {\n        parent.results.forEach(parentResult => {\n            if (!parentResult[fieldStorage]) {\n                return;\n            }\n\n            const _id = parentResult[fieldStorage]._id;\n            parentResult[childCollectionNode.linkName] = filterAssembledData(\n                resultsByKeyId[_id],\n                { limit, skip }\n            );\n        });\n    }\n\n    if (strategy === 'many-meta') {\n        parent.results.forEach(parentResult => {\n            const _ids = _.pluck(parentResult[fieldStorage], '_id');\n            let data = [];\n            _ids.forEach(_id => {\n                data.push(_.first(resultsByKeyId[_id]));\n            });\n\n            parentResult[childCollectionNode.linkName] = filterAssembledData(\n                data,\n                { limit, skip }\n            );\n        });\n    }\n};\n\nfunction filterAssembledData(data, { limit, skip }) {\n    if (limit && Array.isArray(data)) {\n        return data.slice(skip, limit);\n    }\n\n    return data;\n}\n"]},"sourceType":"script","hash":"12e4cf13b82b9b58394d930975e5090ad4ba2afa"}
