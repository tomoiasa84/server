{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/__tests__/morpher/client.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/__tests__/morpher/client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/__tests__/morpher/client.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar db, setClient;\nmodule.watch(require(\"apollo-morpher\"), {\n  \"default\": function (v) {\n    db = v;\n  },\n  setClient: function (v) {\n    setClient = v;\n  }\n}, 0);\nvar client;\nmodule.watch(require(\"../apolloClient\"), {\n  \"default\": function (v) {\n    client = v;\n  }\n}, 1);\nsetClient(client);\ndescribe('Morpher', function () {\n  it('Should work with insert()', function (done) {\n    db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith'\n    }).then(function (result) {\n      assert.isString(result._id);\n      done();\n    });\n  });\n  it('Should work with update()', function () {\n    function _callee() {\n      var _ref, _id, response;\n\n      return _regenerator.default.async(function () {\n        function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'John',\n                  lastName: 'Smith'\n                }));\n\n              case 2:\n                _ref = _context.sent;\n                _id = _ref._id;\n                _context.next = 6;\n                return _regenerator.default.awrap(db.users.update({\n                  _id: _id\n                }, {\n                  $set: {\n                    lastName: 'Brown'\n                  }\n                }));\n\n              case 6:\n                response = _context.sent;\n                assert.equal('ok', response);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return _callee$;\n      }(), null, this);\n    }\n\n    return _callee;\n  }());\n  it('Should work with remove()', function () {\n    function _callee2() {\n      var _ref2, _id, response;\n\n      return _regenerator.default.async(function () {\n        function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'John',\n                  lastName: 'Smith'\n                }));\n\n              case 2:\n                _ref2 = _context2.sent;\n                _id = _ref2._id;\n                _context2.next = 6;\n                return _regenerator.default.awrap(db.users.remove({\n                  _id: _id\n                }));\n\n              case 6:\n                response = _context2.sent;\n                assert.equal('ok', response);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }\n\n        return _callee2$;\n      }(), null, this);\n    }\n\n    return _callee2;\n  }());\n  it('Should work with find()', function () {\n    function _callee3() {\n      var _ref3, _id, users;\n\n      return _regenerator.default.async(function () {\n        function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'John',\n                  lastName: 'Smith'\n                }));\n\n              case 2:\n                _ref3 = _context3.sent;\n                _id = _ref3._id;\n                _context3.next = 6;\n                return _regenerator.default.awrap(db.users.find({\n                  _id: 1,\n                  firstName: 1,\n                  lastName: 1\n                }, {\n                  filters: {\n                    _id: _id\n                  }\n                }));\n\n              case 6:\n                users = _context3.sent;\n                assert.lengthOf(users, 1);\n                assert.isObject(users[0]);\n                assert.equal(_id, users[0]._id);\n                assert.equal('John', users[0].firstName);\n                assert.equal('Smith', users[0].lastName);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }\n\n        return _callee3$;\n      }(), null, this);\n    }\n\n    return _callee3;\n  }());\n  it('Should work with findOne()', function () {\n    function _callee4() {\n      var _ref4, _id, user;\n\n      return _regenerator.default.async(function () {\n        function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'John',\n                  lastName: 'Smith'\n                }));\n\n              case 2:\n                _ref4 = _context4.sent;\n                _id = _ref4._id;\n                _context4.next = 6;\n                return _regenerator.default.awrap(db.users.findOne({\n                  _id: 1,\n                  firstName: 1,\n                  lastName: 1\n                }, {\n                  filters: {\n                    _id: _id\n                  }\n                }));\n\n              case 6:\n                user = _context4.sent;\n                assert.isObject(user);\n                assert.equal(_id, user._id);\n                assert.equal('John', user.firstName);\n                assert.equal('Smith', user.lastName);\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }\n\n        return _callee4$;\n      }(), null, this);\n    }\n\n    return _callee4;\n  }());\n  it('Should work with count()', function () {\n    function _callee5() {\n      var d1, d2, count;\n      return _regenerator.default.async(function () {\n        function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _regenerator.default.awrap(db.users.remove({\n                  firstName: 'JohnCountable'\n                }));\n\n              case 2:\n                _context5.next = 4;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'JohnCountable'\n                }));\n\n              case 4:\n                d1 = _context5.sent;\n                _context5.next = 7;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'JohnCountable'\n                }));\n\n              case 7:\n                d2 = _context5.sent;\n                _context5.next = 10;\n                return _regenerator.default.awrap(db.users.count({\n                  filters: {\n                    firstName: 'JohnCountable'\n                  }\n                }));\n\n              case 10:\n                count = _context5.sent;\n                assert.equal(2, count);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }\n\n        return _callee5$;\n      }(), null, this);\n    }\n\n    return _callee5;\n  }());\n  it('Should work with options', function () {\n    function _callee6() {\n      var d1, d2, results;\n      return _regenerator.default.async(function () {\n        function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regenerator.default.awrap(db.users.remove({\n                  firstName: 'JohnOptionable'\n                }));\n\n              case 2:\n                _context6.next = 4;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'JohnOptionable'\n                }));\n\n              case 4:\n                d1 = _context6.sent;\n                _context6.next = 7;\n                return _regenerator.default.awrap(db.users.insert({\n                  firstName: 'JohnOptionable'\n                }));\n\n              case 7:\n                d2 = _context6.sent;\n                _context6.next = 10;\n                return _regenerator.default.awrap(db.users.find(\"firstName\", {\n                  filters: {\n                    firstName: 'JohnOptionable'\n                  },\n                  options: {\n                    limit: 1\n                  }\n                }));\n\n              case 10:\n                results = _context6.sent;\n                assert.equal(1, results.length);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }\n\n        return _callee6$;\n      }(), null, this);\n    }\n\n    return _callee6;\n  }());\n});","map":{"version":3,"sources":["packages/cultofcoders:apollo/__tests__/morpher/client.js"],"names":["db","setClient","module","watch","require","v","client","describe","it","users","insert","firstName","lastName","then","assert","isString","result","_id","done","update","$set","response","equal","remove","find","filters","lengthOf","isObject","findOne","user","d1","d2","count","options","limit","results","length"],"mappings":"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","sourcesContent":["import db, { setClient } from 'apollo-morpher';\nimport client from '../apolloClient';\nsetClient(client);\n\ndescribe('Morpher', () => {\n  it('Should work with insert()', done => {\n    db.users\n      .insert({\n        firstName: 'John',\n        lastName: 'Smith',\n      })\n      .then(result => {\n        assert.isString(result._id);\n        done();\n      });\n  });\n  it('Should work with update()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const response = await db.users.update(\n      { _id },\n      {\n        $set: { lastName: 'Brown' },\n      }\n    );\n\n    assert.equal('ok', response);\n  });\n\n  it('Should work with remove()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const response = await db.users.remove({ _id });\n\n    assert.equal('ok', response);\n  });\n\n  it('Should work with find()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const users = await db.users.find(\n      {\n        _id: 1,\n        firstName: 1,\n        lastName: 1,\n      },\n      {\n        filters: { _id },\n      }\n    );\n\n    assert.lengthOf(users, 1);\n    assert.isObject(users[0]);\n    assert.equal(_id, users[0]._id);\n    assert.equal('John', users[0].firstName);\n    assert.equal('Smith', users[0].lastName);\n  });\n\n  it('Should work with findOne()', async () => {\n    const { _id } = await db.users.insert({\n      firstName: 'John',\n      lastName: 'Smith',\n    });\n\n    const user = await db.users.findOne(\n      {\n        _id: 1,\n        firstName: 1,\n        lastName: 1,\n      },\n      {\n        filters: { _id },\n      }\n    );\n\n    assert.isObject(user);\n    assert.equal(_id, user._id);\n    assert.equal('John', user.firstName);\n    assert.equal('Smith', user.lastName);\n  });\n\n  it('Should work with count()', async () => {\n    await db.users.remove({\n      firstName: 'JohnCountable',\n    });\n\n    const d1 = await db.users.insert({\n      firstName: 'JohnCountable',\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnCountable',\n    });\n\n    const count = await db.users.count({\n      filters: {\n        firstName: 'JohnCountable',\n      },\n    });\n\n    assert.equal(2, count);\n  });\n\n  it('Should work with options', async () => {\n    await db.users.remove({\n      firstName: 'JohnOptionable',\n    });\n\n    const d1 = await db.users.insert({\n      firstName: 'JohnOptionable',\n    });\n    const d2 = await db.users.insert({\n      firstName: 'JohnOptionable',\n    });\n\n    const results = await db.users.find(`firstName`, {\n      filters: {\n        firstName: 'JohnOptionable',\n      },\n      options: {\n        limit: 1,\n      },\n    });\n\n    assert.equal(1, results.length);\n  });\n});\n"]},"sourceType":"script","hash":"ab1f39c3be2e19904b2980d6e8bf4ec82bc0e1b8"}
