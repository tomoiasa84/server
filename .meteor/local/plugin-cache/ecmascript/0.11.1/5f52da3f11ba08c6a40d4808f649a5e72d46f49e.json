{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js"}},"code":"let prepareForProcess;\nmodule.watch(require(\"../query/lib/prepareForProcess.js\"), {\n  default(v) {\n    prepareForProcess = v;\n  }\n\n}, 0);\nlet Base;\nmodule.watch(require(\"./namedQuery.base\"), {\n  default(v) {\n    Base = v;\n  }\n\n}, 1);\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 2);\nlet MemoryResultCacher;\nmodule.watch(require(\"./cache/MemoryResultCacher\"), {\n  default(v) {\n    MemoryResultCacher = v;\n  }\n\n}, 3);\nlet intersectDeep;\nmodule.watch(require(\"../query/lib/intersectDeep\"), {\n  default(v) {\n    intersectDeep = v;\n  }\n\n}, 4);\nmodule.exportDefault(class extends Base {\n  /**\n   * Retrieves the data.\n   * @returns {*}\n   */\n  fetch(context) {\n    this._performSecurityChecks(context, this.params);\n\n    if (this.isResolver) {\n      return this._fetchResolverData(context);\n    } else {\n      body = deepClone(this.body);\n\n      if (this.params.$body) {\n        body = intersectDeep(body, this.params.$body);\n      } // we must apply emobdyment here\n\n\n      this.doEmbodimentIfItApplies(body);\n      const query = this.collection.createQuery(deepClone(body), {\n        params: deepClone(this.params)\n      });\n\n      if (this.cacher) {\n        const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n        return this.cacher.fetch(cacheId, {\n          query\n        });\n      }\n\n      return query.fetch();\n    }\n  }\n  /**\n   * @param args\n   * @returns {*}\n   */\n\n\n  fetchOne() {\n    return _.first(this.fetch(...arguments));\n  }\n  /**\n   * Gets the count of matching elements.\n   *\n   * @returns {any}\n   */\n\n\n  getCount(context) {\n    this._performSecurityChecks(context, this.params);\n\n    const countCursor = this.getCursorForCounting();\n\n    if (this.cacher) {\n      const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n      return this.cacher.fetch(cacheId, {\n        countCursor\n      });\n    }\n\n    return countCursor.count();\n  }\n  /**\n   * Returns the cursor for counting\n   * This is most likely used for counts cursor\n   */\n\n\n  getCursorForCounting() {\n    let body = deepClone(this.body);\n    this.doEmbodimentIfItApplies(body);\n    body = prepareForProcess(body, this.params);\n    return this.collection.find(body.$filters || {}, {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n  /**\n   * @param cacher\n   */\n\n\n  cacheResults(cacher) {\n    if (!cacher) {\n      cacher = new MemoryResultCacher();\n    }\n\n    this.cacher = cacher;\n  }\n  /**\n   * Configure resolve. This doesn't actually call the resolver, it just sets it\n   * @param fn\n   */\n\n\n  resolve(fn) {\n    if (!this.isResolver) {\n      throw new Meteor.Error('invalid-call', \"You cannot use resolve() on a non resolver NamedQuery\");\n    }\n\n    this.resolver = fn;\n  }\n  /**\n   * @returns {*}\n   * @private\n   */\n\n\n  _fetchResolverData(context) {\n    const resolver = this.resolver;\n    const self = this;\n    const query = {\n      fetch() {\n        return resolver.call(context, self.params);\n      }\n\n    };\n\n    if (this.cacher) {\n      const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n      return this.cacher.fetch(cacheId, {\n        query\n      });\n    }\n\n    return query.fetch();\n  }\n  /**\n   * @param context Meteor method/publish context\n   * @param params\n   *\n   * @private\n   */\n\n\n  _performSecurityChecks(context, params) {\n    if (context && this.exposeConfig) {\n      this._callFirewall(context, context.userId, params);\n    }\n\n    this.doValidateParams(params);\n  }\n\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js"],"names":["prepareForProcess","module","watch","require","default","v","Base","deepClone","MemoryResultCacher","intersectDeep","exportDefault","fetch","context","_performSecurityChecks","params","isResolver","_fetchResolverData","body","$body","doEmbodimentIfItApplies","query","collection","createQuery","cacher","cacheId","generateQueryId","queryName","fetchOne","_","first","getCount","countCursor","getCursorForCounting","count","find","$filters","fields","_id","cacheResults","resolve","fn","Meteor","Error","resolver","self","call","exposeConfig","_callFirewall","userId","doValidateParams"],"mappings":"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","sourcesContent":["import prepareForProcess from '../query/lib/prepareForProcess.js';\nimport Base from './namedQuery.base';\nimport deepClone from 'lodash.clonedeep';\nimport MemoryResultCacher from './cache/MemoryResultCacher';\nimport intersectDeep from '../query/lib/intersectDeep';\n\nexport default class extends Base {\n    /**\n     * Retrieves the data.\n     * @returns {*}\n     */\n    fetch(context) {\n        this._performSecurityChecks(context, this.params);\n\n        if (this.isResolver) {\n            return this._fetchResolverData(context);\n        } else {\n            body = deepClone(this.body);\n            if (this.params.$body) {\n                body = intersectDeep(body, this.params.$body);\n            }\n            \n            // we must apply emobdyment here\n            this.doEmbodimentIfItApplies(body);\n\n            const query = this.collection.createQuery(\n                deepClone(body),\n                {\n                    params: deepClone(this.params)\n                }\n            );\n\n            if (this.cacher) {\n                const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {query});\n            }\n\n            return query.fetch();\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     *\n     * @returns {any}\n     */\n    getCount(context) {\n        this._performSecurityChecks(context, this.params);\n\n        const countCursor = this.getCursorForCounting();\n\n        if (this.cacher) {\n            const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n\n            return this.cacher.fetch(cacheId, {countCursor});\n        }\n\n        return countCursor.count();\n    }\n\n    /**\n     * Returns the cursor for counting\n     * This is most likely used for counts cursor\n     */\n    getCursorForCounting() {\n        let body = deepClone(this.body);\n        this.doEmbodimentIfItApplies(body);\n        body = prepareForProcess(body, this.params);\n\n        return this.collection.find(body.$filters || {}, {fields: {_id: 1}});\n    }\n\n    /**\n     * @param cacher\n     */\n    cacheResults(cacher) {\n        if (!cacher) {\n            cacher = new MemoryResultCacher();\n        }\n\n        this.cacher = cacher;\n    }\n\n    /**\n     * Configure resolve. This doesn't actually call the resolver, it just sets it\n     * @param fn\n     */\n    resolve(fn) {\n        if (!this.isResolver) {\n            throw new Meteor.Error('invalid-call', `You cannot use resolve() on a non resolver NamedQuery`);\n        }\n\n        this.resolver = fn;\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _fetchResolverData(context) {\n        const resolver = this.resolver;\n        const self = this;\n        const query = {\n            fetch() {\n                return resolver.call(context, self.params);\n            }\n        };\n\n        if (this.cacher) {\n            const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n            return this.cacher.fetch(cacheId, {query});\n        }\n\n        return query.fetch();\n    }\n\n    /**\n     * @param context Meteor method/publish context\n     * @param params\n     *\n     * @private\n     */\n    _performSecurityChecks(context, params) {\n        if (context && this.exposeConfig) {\n            this._callFirewall(context, context.userId, params);\n        }\n\n        this.doValidateParams(params);\n    }\n}"]},"sourceType":"script","hash":"5f52da3f11ba08c6a40d4808f649a5e72d46f49e"}
