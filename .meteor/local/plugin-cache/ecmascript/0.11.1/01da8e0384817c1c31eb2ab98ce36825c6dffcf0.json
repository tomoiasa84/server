{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js"}},"code":"module.export({\n  default: () => addReducers,\n  handleAddElement: () => handleAddElement,\n  handleAddReducer: () => handleAddReducer,\n  handleAddLink: () => handleAddLink,\n  handleAddField: () => handleAddField\n});\nlet dot;\nmodule.watch(require(\"dot-object\"), {\n  default(v) {\n    dot = v;\n  }\n\n}, 0);\nlet createNodes;\nmodule.watch(require(\"../../lib/createGraph\"), {\n  createNodes(v) {\n    createNodes = v;\n  }\n\n}, 1);\nlet CollectionNode;\nmodule.watch(require(\"../../nodes/collectionNode\"), {\n  default(v) {\n    CollectionNode = v;\n  }\n\n}, 2);\nlet FieldNode;\nmodule.watch(require(\"../../nodes/fieldNode\"), {\n  default(v) {\n    FieldNode = v;\n  }\n\n}, 3);\nlet ReducerNode;\nmodule.watch(require(\"../../nodes/reducerNode\"), {\n  default(v) {\n    ReducerNode = v;\n  }\n\n}, 4);\nlet embedReducerWithLink;\nmodule.watch(require(\"./embedReducerWithLink\"), {\n  default(v) {\n    embedReducerWithLink = v;\n  }\n\n}, 5);\n\nfunction addReducers(root) {\n  // we add reducers last, after we have added all the fields.\n  root.reducerNodes.forEach(reducer => {\n    _.each(reducer.body, (body, fieldName) => {\n      handleAddElement(root, fieldName, body);\n    });\n  });\n}\n\nfunction handleAddElement(root, fieldName, body) {\n  // if it's a link\n  const collection = root.collection;\n  const linker = collection.getLinker(fieldName);\n\n  if (linker) {\n    return handleAddLink(fieldName, body, root, linker);\n  }\n\n  const reducer = collection.getReducer(fieldName);\n\n  if (reducer) {\n    return handleAddReducer(fieldName, reducer, root);\n  } // we assume it's a field in this case\n\n\n  return handleAddField(fieldName, body, root);\n}\n\nfunction handleAddReducer(fieldName, reducer, root) {\n  if (!root.hasReducerNode(fieldName)) {\n    let reducerNode = new ReducerNode(fieldName, reducer);\n    root.add(reducerNode);\n    reducerNode.scheduledForDeletion = true;\n\n    _.each(reducer.body, (body, fieldName) => {\n      handleAddElement(root, fieldName, body);\n    });\n  }\n}\n\nfunction handleAddLink(fieldName, body, root, linker) {\n  if (root.hasCollectionNode(fieldName)) {\n    const collectionNode = root.getCollectionNode(fieldName);\n    embedReducerWithLink(body, collectionNode);\n  } else {\n    // add\n    let collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n    collectionNode.scheduledForDeletion = true;\n    root.add(collectionNode, linker);\n    createNodes(collectionNode);\n  }\n}\n\nfunction handleAddField(fieldName, body, root) {\n  if (_.isObject(body)) {\n    // if reducer specifies a nested field\n    const dots = dot.dot({\n      [fieldName]: body\n    });\n\n    _.each(dots, (value, key) => {\n      if (!root.hasField(key)) {\n        let fieldNode = new FieldNode(key, value);\n        fieldNode.scheduledForDeletion = true;\n        root.add(fieldNode);\n      }\n    });\n  } else {\n    // if reducer does not specify a nested field, and the field does not exist.\n    if (!root.hasField(fieldName)) {\n      let fieldNode = new FieldNode(fieldName, body);\n      fieldNode.scheduledForDeletion = true;\n      root.add(fieldNode);\n    }\n  }\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js"],"names":["module","export","default","addReducers","handleAddElement","handleAddReducer","handleAddLink","handleAddField","dot","watch","require","v","createNodes","CollectionNode","FieldNode","ReducerNode","embedReducerWithLink","root","reducerNodes","forEach","reducer","_","each","body","fieldName","collection","linker","getLinker","getReducer","hasReducerNode","reducerNode","add","scheduledForDeletion","hasCollectionNode","collectionNode","getCollectionNode","getLinkedCollection","isObject","dots","value","key","hasField","fieldNode"],"mappings":"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","sourcesContent":["import dot from 'dot-object';\nimport { createNodes } from '../../lib/createGraph';\nimport CollectionNode from '../../nodes/collectionNode';\nimport FieldNode from '../../nodes/fieldNode';\nimport ReducerNode from '../../nodes/reducerNode';\nimport embedReducerWithLink from './embedReducerWithLink';\n\nexport default function addReducers(root) {\n    // we add reducers last, after we have added all the fields.\n    root.reducerNodes.forEach(reducer => {\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    });\n}\n\n/**\n * @param root\n * @param fieldName\n * @param body\n */\nexport function handleAddElement(root, fieldName, body) {\n    // if it's a link\n    const collection = root.collection;\n    const linker = collection.getLinker(fieldName);\n    if (linker) {\n        return handleAddLink(fieldName, body, root, linker);\n    }\n\n    const reducer = collection.getReducer(fieldName);\n    if (reducer) {\n        return handleAddReducer(fieldName, reducer, root);\n    }\n\n    // we assume it's a field in this case\n    return handleAddField(fieldName, body, root);\n}\n\n/**\n * @param fieldName\n * @param reducer\n * @param root\n */\nexport function handleAddReducer(fieldName, reducer, root) {\n    if (!root.hasReducerNode(fieldName)) {\n        let reducerNode = new ReducerNode(fieldName, reducer);\n        root.add(reducerNode);\n        reducerNode.scheduledForDeletion = true;\n\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n * @param linker\n */\nexport function handleAddLink(fieldName, body, root, linker) {\n    if (root.hasCollectionNode(fieldName)) {\n        const collectionNode = root.getCollectionNode(fieldName);\n\n        embedReducerWithLink(body, collectionNode);\n    } else {\n        // add\n        let collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n        collectionNode.scheduledForDeletion = true;\n        root.add(collectionNode, linker);\n\n        createNodes(collectionNode);\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n */\nexport function handleAddField(fieldName, body, root) {\n    if (_.isObject(body)) {\n        // if reducer specifies a nested field\n        const dots = dot.dot({\n            [fieldName]: body\n        });\n\n        _.each(dots, (value, key) => {\n            if (!root.hasField(key)) {\n                let fieldNode = new FieldNode(key, value);\n                fieldNode.scheduledForDeletion = true;\n\n                root.add(fieldNode);\n            }\n        });\n    } else {\n        // if reducer does not specify a nested field, and the field does not exist.\n        if (!root.hasField(fieldName)) {\n            let fieldNode = new FieldNode(fieldName, body);\n            fieldNode.scheduledForDeletion = true;\n\n            root.add(fieldNode);\n        }\n    }\n}\n"]},"sourceType":"script","hash":"01da8e0384817c1c31eb2ab98ce36825c6dffcf0"}
