{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/units/units.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/testing/units/units.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/units/units.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/testing/units/units.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/testing/units/units.js"}},"code":"var restrictFields;\nmodule.watch(require(\"../../lib/restrictFields.js\"), {\n  \"default\": function (v) {\n    restrictFields = v;\n  }\n}, 0);\nvar enforceMaxLimit;\nmodule.watch(require(\"../../lib/enforceMaxLimit.js\"), {\n  \"default\": function (v) {\n    enforceMaxLimit = v;\n  }\n}, 1);\nvar cleanBody;\nmodule.watch(require(\"../../lib/cleanBody.js\"), {\n  \"default\": function (v) {\n    cleanBody = v;\n  }\n}, 2);\nvar cleanOptions, cleanFilters;\nmodule.watch(require(\"../../lib/cleanSelectors.js\"), {\n  cleanOptions: function (v) {\n    cleanOptions = v;\n  },\n  cleanFilters: function (v) {\n    cleanFilters = v;\n  }\n}, 3);\nvar enforceMaxDepth, getDepth;\nmodule.watch(require(\"../../lib/enforceMaxDepth.js\"), {\n  \"default\": function (v) {\n    enforceMaxDepth = v;\n  },\n  getDepth: function (v) {\n    getDepth = v;\n  }\n}, 4);\nvar CollectionNode;\nmodule.watch(require(\"../../../query/nodes/collectionNode.js\"), {\n  \"default\": function (v) {\n    CollectionNode = v;\n  }\n}, 5);\ndescribe('Unit Tests', function () {\n  it('Should be able to restrict fields', function () {\n    var filters = {\n      test: 1,\n      shouldRestrict: 1,\n      'shouldRestrict.this': 1,\n      shouldRestrict2: 1,\n      $and: [{\n        shouldRestrict: 1,\n        'shouldRestrict.this': 1,\n        test: 1\n      }, {\n        test: 1,\n        shouldRestrict: 1,\n        'shouldRestrict.this': 1\n      }],\n      $or: [{\n        $and: [{\n          test: 1,\n          shouldRestrict: 1,\n          'shouldRestrict.this': 1\n        }]\n      }],\n      $nor: [{\n        test: 1,\n        shouldRestrict: 1,\n        'shouldRestrict.this': 1\n      }],\n      $not: {\n        test: 1,\n        shouldRestrict: 1,\n        'shouldRestrict.this': 1\n      }\n    };\n    var options = {\n      sort: {\n        test: 1,\n        shouldRestrict: 1,\n        shouldRestrict2: 1,\n        'shouldRestrict.this': 1\n      },\n      fields: {\n        test: 1,\n        shouldRestrict: 1,\n        shouldRestrict2: 1,\n        'shouldRestrict.this': 1\n      }\n    };\n    restrictFields(filters, options, ['shouldRestrict', 'shouldRestrict2']);\n    assert.lengthOf(_.keys(filters), 5);\n    assert.equal(filters.test, 1);\n    assert.isUndefined(filters.shouldRestrict);\n    assert.isUndefined(filters['shouldRestrict.this']);\n    assert.lengthOf(_.keys(options.sort), 1);\n    assert.equal(options.sort.test, 1);\n    assert.isUndefined(options.sort.shouldRestrict, 1);\n    assert.isUndefined(options.sort['shouldRestrict.this']);\n    assert.lengthOf(_.keys(options.fields), 1);\n    assert.equal(options.fields.test, 1);\n    assert.isUndefined(options.fields['shouldRestrict.this']);\n    assert.isUndefined(options.fields['shouldRestrict']);\n    assert.isDefined(filters.$not.test);\n    assert.isUndefined(filters.$not.shouldRestrict);\n    assert.isUndefined(filters.$not['shouldRestrict.this']);\n    assert.isDefined(filters.$nor[0].test);\n    assert.isUndefined(filters.$nor[0].shouldRestrict);\n    assert.isUndefined(filters.$nor[0]['shouldRestrict.this']);\n    assert.isDefined(filters.$and[0].test);\n    assert.isUndefined(filters.$and[0].shouldRestrict);\n    assert.isUndefined(filters.$and[0]['shouldRestrict.this']);\n    assert.isDefined(filters.$and[1].test);\n    assert.isUndefined(filters.$and[1].shouldRestrict);\n    assert.isUndefined(filters.$and[1]['shouldRestrict.this']);\n    assert.isDefined(filters.$or[0].$and[0].test);\n    assert.isUndefined(filters.$or[0].$and[0].shouldRestrict);\n    assert.isUndefined(filters.$or[0].$and[0]['shouldRestrict.this']);\n    var options2 = {\n      fields: {\n        test: 1\n      }\n    };\n    restrictFields({}, options2, ['test']);\n    assert.isUndefined(options2.fields.test);\n    assert.isDefined(options2.fields._id);\n  });\n  it('Should restrict links # getLinks', function () {\n    var getLinks;\n    module.watch(require(\"../../lib/restrictLinks.js\"), {\n      getLinks: function (v) {\n        getLinks = v;\n      }\n    }, 6);\n    var data = getLinks({\n      collection: {\n        __exposure: {\n          config: {\n            restrictLinks: ['1', '2']\n          }\n        }\n      }\n    });\n    assert.lengthOf(data, 2);\n    data = getLinks({\n      collection: {\n        __exposure: {\n          config: {\n            restrictLinks: function () {\n              return ['1', '2'];\n            }\n          }\n        }\n      }\n    });\n    assert.lengthOf(data, 2);\n  });\n  it('Should be able to enforce a maxLimit', function () {\n    var options = {};\n    enforceMaxLimit(options, 100);\n    assert.equal(options.limit, 100);\n    options = {\n      limit: 101\n    };\n    enforceMaxLimit(options, 100);\n    assert.equal(options.limit, 100);\n    options = {\n      limit: 99\n    };\n    enforceMaxLimit(options, 100);\n    assert.equal(options.limit, 99);\n  });\n  it('Should be able to get the propper depth of a node', function () {\n    var root = new CollectionNode();\n    var subroot1 = new CollectionNode();\n    var subroot2 = new CollectionNode();\n    root.add(subroot1);\n    root.add(subroot2);\n    var subsubroot1 = new CollectionNode();\n    subroot1.add(subsubroot1);\n    subsubroot1.add(new CollectionNode());\n    subroot2.add(new CollectionNode());\n    assert.equal(4, getDepth(root));\n  });\n  it('Should be able to enforce depth of a node', function () {\n    var root = new CollectionNode();\n    var subroot1 = new CollectionNode();\n    var subroot2 = new CollectionNode();\n    root.add(subroot1);\n    root.add(subroot2);\n    var subsubroot1 = new CollectionNode();\n    subroot1.add(subsubroot1);\n    subsubroot1.add(new CollectionNode());\n    subroot2.add(new CollectionNode());\n    assert.equal(4, getDepth(root));\n\n    var fn = function () {\n      enforceMaxDepth(root, 3);\n    };\n\n    assert.throws(fn, /graph request is too deep/);\n  });\n  it('Should work intersect with computation and with infinite recursion avoidance', function () {\n    var link2 = function (item) {\n      return {\n        item: item,\n        link1: link1\n      };\n    };\n\n    var link1 = function (item) {\n      return {\n        item: item,\n        link2: link2\n      };\n    };\n\n    var obj1 = {\n      a: 1,\n      link1: link1\n    };\n    var obj2 = {\n      $filters: {\n        a: {\n          $gt: 2\n        },\n        b: {\n          $gt: 2\n        },\n        $and: [{\n          a: {\n            $gt: 2\n          },\n          b: {\n            $gt: 2\n          }\n        }, {\n          b: {\n            $gt: 2\n          }\n        }],\n        $not: {\n          a: {\n            $gt: 2\n          },\n          b: {\n            $gt: 2\n          }\n        }\n      },\n      a: {\n        a1: 1\n      },\n      link1: {\n        item: 1,\n        link2: {\n          item: 1,\n          link1: {\n            item: 1\n          }\n        }\n      }\n    };\n    var result = cleanBody(obj1, obj2, 'test');\n    assert.isObject(result.a);\n    assert.isDefined(result.a.a1);\n    assert.isObject(result.link1);\n    assert.equal(result.link1.item, 'test');\n    assert.isObject(result.link1.link2);\n    assert.equal(result.link1.link2.item, 'test');\n    assert.isObject(result.link1.link2.link1);\n    assert.equal(result.link1.link2.link1.item, 'test');\n    assert.isObject(result.$filters);\n    assert.isObject(result.$filters.a);\n    assert.isUndefined(result.$filters.b);\n    assert.equal(result.$filters.a.$gt, 2);\n    assert.isArray(result.$filters.$and);\n    assert.equal(result.$filters.$and[0].a.$gt, 2);\n    assert.isUndefined(result.$filters.$and[0].b);\n    assert.isUndefined(result.$filters.$and[1].b);\n    assert.equal(result.$filters.$and[0].a.$gt, 2);\n    assert.isObject(result.$filters.$not);\n    assert.isUndefined(result.$filters.$not.b);\n    assert.equal(result.$filters.$not.a.$gt, 2);\n  });\n  it('Should work with cleanBody allow all method', function () {\n    var body = cleanBody({\n      a: true\n    }, {\n      a: {\n        b: {\n          c: 1\n        }\n      }\n    });\n    assert.isObject(body.a);\n    assert.isObject(body.a.b);\n    assert.equal(body.a.b.c, 1);\n  });\n  it('Should properly clean selectors', function () {\n    var filters = {\n      'profile.firstName': 'Theodor'\n    };\n    cleanFilters(filters, ['profile']);\n    assert.equal(filters['profile.firstName'], 'Theodor');\n  });\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/testing/units/units.js"],"names":["restrictFields","module","watch","require","v","enforceMaxLimit","cleanBody","cleanOptions","cleanFilters","enforceMaxDepth","getDepth","CollectionNode","describe","it","filters","test","shouldRestrict","shouldRestrict2","$and","$or","$nor","$not","options","sort","fields","assert","lengthOf","_","keys","equal","isUndefined","isDefined","options2","_id","getLinks","data","collection","__exposure","config","restrictLinks","limit","root","subroot1","subroot2","add","subsubroot1","fn","throws","link2","item","link1","obj1","a","obj2","$filters","$gt","b","a1","result","isObject","isArray","body","c"],"mappings":"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","sourcesContent":["import restrictFields from '../../lib/restrictFields.js';\nimport enforceMaxLimit from '../../lib/enforceMaxLimit.js';\nimport cleanBody from '../../lib/cleanBody.js';\nimport { cleanOptions, cleanFilters } from '../../lib/cleanSelectors.js';\nimport enforceMaxDepth, {getDepth} from '../../lib/enforceMaxDepth.js';\nimport CollectionNode from '../../../query/nodes/collectionNode.js';\n\ndescribe('Unit Tests', function () {\n    it('Should be able to restrict fields', function () {\n        let filters = {\n            test: 1,\n            shouldRestrict: 1,\n            'shouldRestrict.this': 1,\n            shouldRestrict2: 1,\n            $and: [{\n                shouldRestrict: 1,\n                'shouldRestrict.this': 1,\n                test: 1,\n            }, {\n                test: 1,\n                shouldRestrict: 1,\n                'shouldRestrict.this': 1\n            }],\n            $or: [{\n                $and: [{\n                    test: 1,\n                    shouldRestrict: 1,\n                    'shouldRestrict.this': 1\n                }]\n            }],\n            $nor: [{\n                test: 1,\n                shouldRestrict: 1,\n                'shouldRestrict.this': 1\n            }],\n            $not: {\n                test: 1,\n                shouldRestrict: 1,\n                'shouldRestrict.this': 1\n            }\n        };\n\n        let options = {\n            sort: {\n                test: 1,\n                shouldRestrict: 1,\n                shouldRestrict2: 1,\n                'shouldRestrict.this': 1\n            },\n            fields: {\n                test: 1,\n                shouldRestrict: 1,\n                shouldRestrict2: 1,\n                'shouldRestrict.this': 1\n            }\n        };\n\n        restrictFields(filters, options, ['shouldRestrict', 'shouldRestrict2']);\n\n        assert.lengthOf(_.keys(filters), 5);\n        assert.equal(filters.test, 1);\n        assert.isUndefined(filters.shouldRestrict);\n        assert.isUndefined(filters['shouldRestrict.this']);\n\n        assert.lengthOf(_.keys(options.sort), 1);\n        assert.equal(options.sort.test, 1);\n        assert.isUndefined(options.sort.shouldRestrict, 1);\n        assert.isUndefined(options.sort['shouldRestrict.this']);\n\n        assert.lengthOf(_.keys(options.fields), 1);\n        assert.equal(options.fields.test, 1);\n        assert.isUndefined(options.fields['shouldRestrict.this']);\n        assert.isUndefined(options.fields['shouldRestrict']);\n\n        assert.isDefined(filters.$not.test);\n        assert.isUndefined(filters.$not.shouldRestrict);\n        assert.isUndefined(filters.$not['shouldRestrict.this']);\n        assert.isDefined(filters.$nor[0].test);\n        assert.isUndefined(filters.$nor[0].shouldRestrict);\n        assert.isUndefined(filters.$nor[0]['shouldRestrict.this']);\n        assert.isDefined(filters.$and[0].test);\n        assert.isUndefined(filters.$and[0].shouldRestrict);\n        assert.isUndefined(filters.$and[0]['shouldRestrict.this']);\n        assert.isDefined(filters.$and[1].test);\n        assert.isUndefined(filters.$and[1].shouldRestrict);\n        assert.isUndefined(filters.$and[1]['shouldRestrict.this']);\n        assert.isDefined(filters.$or[0].$and[0].test);\n        assert.isUndefined(filters.$or[0].$and[0].shouldRestrict);\n        assert.isUndefined(filters.$or[0].$and[0]['shouldRestrict.this']);\n\n        let options2 = {fields: {test: 1}};\n        restrictFields({}, options2, ['test']);\n        assert.isUndefined(options2.fields.test);\n        assert.isDefined(options2.fields._id);\n    });\n\n    it('Should restrict links # getLinks', function () {\n        import { getLinks } from '../../lib/restrictLinks.js';\n\n        let data = getLinks({\n            collection: {\n                __exposure: {\n                    config: {\n                        restrictLinks: ['1', '2']\n                    }\n                }\n            }\n        });\n\n        assert.lengthOf(data, 2);\n\n        data = getLinks({\n            collection: {\n                __exposure: {\n                    config: {\n                        restrictLinks: function() {\n                            return ['1', '2']\n                        }\n                    }\n                }\n            }\n        });\n\n        assert.lengthOf(data, 2);\n    });\n\n    it('Should be able to enforce a maxLimit', function () {\n        let options = {};\n\n        enforceMaxLimit(options, 100);\n        assert.equal(options.limit, 100);\n\n        options = {limit: 101};\n        enforceMaxLimit(options, 100);\n        assert.equal(options.limit, 100);\n\n        options = {limit: 99};\n        enforceMaxLimit(options, 100);\n        assert.equal(options.limit, 99);\n    });\n\n    it('Should be able to get the propper depth of a node', function () {\n        let root = new CollectionNode();\n\n        let subroot1 = new CollectionNode();\n        let subroot2 = new CollectionNode();\n        root.add(subroot1);\n        root.add(subroot2);\n\n        let subsubroot1 = new CollectionNode();\n        subroot1.add(subsubroot1);\n\n        subsubroot1.add(new CollectionNode());\n\n        subroot2.add(new CollectionNode());\n\n        assert.equal(4, getDepth(root));\n    });\n\n    it('Should be able to enforce depth of a node', function () {\n        let root = new CollectionNode();\n\n        let subroot1 = new CollectionNode();\n        let subroot2 = new CollectionNode();\n        root.add(subroot1);\n        root.add(subroot2);\n\n        let subsubroot1 = new CollectionNode();\n        subroot1.add(subsubroot1);\n\n        subsubroot1.add(new CollectionNode());\n\n        subroot2.add(new CollectionNode());\n\n        assert.equal(4, getDepth(root));\n\n        const fn = () => {\n            enforceMaxDepth(root, 3);\n        };\n\n        assert.throws(fn, /graph request is too deep/);\n    });\n\n    it('Should work intersect with computation and with infinite recursion avoidance', function () {\n        const link2 = (item) => {\n            return {\n                item,\n                link1\n            }\n        };\n\n        const link1 = (item) => {\n            return {\n                item,\n                link2\n            }\n        };\n\n        const obj1 = {\n            a: 1,\n            link1\n        };\n\n        const obj2 = {\n            $filters: {\n                a: {$gt: 2},\n                b: {$gt: 2},\n                $and: [\n                    {\n                        a: {$gt: 2},\n                        b: {$gt: 2}\n                    },\n                    {\n                        b: {$gt: 2}\n                    }\n                ],\n                $not: {\n                    a: {$gt: 2},\n                    b: {$gt: 2}\n                }\n            },\n            a: {\n                a1: 1\n            },\n            link1: {\n                item: 1,\n                link2: {\n                    item: 1,\n                    link1: {\n                        item: 1\n                    }\n                }\n            }\n        };\n\n        const result = cleanBody(obj1, obj2, 'test');\n\n        assert.isObject(result.a);\n        assert.isDefined(result.a.a1);\n        assert.isObject(result.link1);\n        assert.equal(result.link1.item, 'test');\n        assert.isObject(result.link1.link2);\n        assert.equal(result.link1.link2.item, 'test');\n        assert.isObject(result.link1.link2.link1);\n        assert.equal(result.link1.link2.link1.item, 'test');\n\n        assert.isObject(result.$filters);\n        assert.isObject(result.$filters.a);\n        assert.isUndefined(result.$filters.b);\n        assert.equal(result.$filters.a.$gt, 2);\n\n        assert.isArray(result.$filters.$and);\n        assert.equal(result.$filters.$and[0].a.$gt, 2);\n        assert.isUndefined(result.$filters.$and[0].b);\n        assert.isUndefined(result.$filters.$and[1].b);\n        assert.equal(result.$filters.$and[0].a.$gt, 2);\n        assert.isObject(result.$filters.$not);\n        assert.isUndefined(result.$filters.$not.b);\n        assert.equal(result.$filters.$not.a.$gt, 2);\n    });\n\n    it('Should work with cleanBody allow all method', function () {\n        const body = cleanBody({\n            a: true\n        }, {\n            a: {\n                b: {\n                    c: 1\n                }\n            }\n        });\n\n        assert.isObject(body.a);\n        assert.isObject(body.a.b);\n        assert.equal(body.a.b.c, 1);\n    });\n\n    it('Should properly clean selectors', function () {\n        let filters = {\n            'profile.firstName': 'Theodor'\n        };\n\n        cleanFilters(filters, ['profile'])\n\n        assert.equal(filters['profile.firstName'], 'Theodor');\n    })\n});"]},"sourceType":"script","hash":"8149001b8a05bc25cd1457abbb8be70fa373b079"}
