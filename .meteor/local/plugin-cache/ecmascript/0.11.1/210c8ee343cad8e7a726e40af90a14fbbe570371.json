{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher-schema-directives/LinkDirective.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher-schema-directives/LinkDirective.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher-schema-directives/LinkDirective.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher-schema-directives/LinkDirective.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher-schema-directives/LinkDirective.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  default: () => LinkDirective\n});\nlet SchemaDirectiveVisitor;\nmodule.watch(require(\"graphql-tools\"), {\n  SchemaDirectiveVisitor(v) {\n    SchemaDirectiveVisitor = v;\n  }\n\n}, 0);\nlet GraphQLList, GraphQLObjectType, GraphQLNonNull;\nmodule.watch(require(\"graphql/type\"), {\n  GraphQLList(v) {\n    GraphQLList = v;\n  },\n\n  GraphQLObjectType(v) {\n    GraphQLObjectType = v;\n  },\n\n  GraphQLNonNull(v) {\n    GraphQLNonNull = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet setupMongoDirective;\nmodule.watch(require(\"./MongoDirective\"), {\n  setupMongoDirective(v) {\n    setupMongoDirective = v;\n  }\n\n}, 3);\n\nclass LinkDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const {\n      objectType\n    } = details;\n    const {\n      args\n    } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error('collection-not-found', \"You are trying to set the link: \".concat(field.name, \" but your object type does not have @mongo directive set-up\"));\n    }\n\n    const isArrayField = field.type instanceof GraphQLList;\n    let referencedType;\n\n    if (isArrayField) {\n      referencedType = field.type.ofType;\n    } else {\n      referencedType = field.type;\n    }\n\n    if (referencedType instanceof GraphQLNonNull) {\n      referencedType = referencedType.ofType;\n    } else {\n      if (!(referencedType instanceof GraphQLObjectType)) {\n        throw new Meteor.Error('invalid-type', \"You are trying to attach a link on a invalid type. @link directive only works with GraphQLObjectType \");\n      }\n    }\n\n    let referencedCollectionName = referencedType._mongoCollectionName;\n\n    if (!referencedCollectionName) {\n      const objectNodeDirectives = referencedType.astNode.directives;\n      const mongoDirective = objectNodeDirectives.find(directive => {\n        return directive.name.value === 'mongo';\n      });\n\n      if (mongoDirective) {\n        const nameArgument = mongoDirective.arguments.find(argument => argument.name.value === 'name');\n        setupMongoDirective(referencedType, {\n          name: nameArgument.value.value\n        });\n        referencedCollectionName = nameArgument.value.value;\n      } else {\n        throw new Meteor.Error('invalid-collection', \"The referenced type does not have a collection setup using @mongo directive\");\n      }\n    }\n\n    const thisCollectionName = objectType._mongoCollectionName;\n    const referencedCollection = Mongo.Collection.get(referencedCollectionName);\n    const thisCollection = Mongo.Collection.get(thisCollectionName);\n    let config = {};\n\n    if (args.to) {\n      config = Object.assign({}, args);\n      config.inversedBy = args.to;\n      delete config.to;\n    } else {\n      if (args.field) {\n        config = Object.assign({\n          type: isArrayField ? 'many' : 'one',\n          field: args.field,\n          index: true\n        }, args);\n      } else {\n        throw new Meteor.Error(\"invalid-args\", \"You have provided invalid arguments for this link in \".concat(thisCollectionName, \". The \\\"field\\\" property is missing.\"));\n      }\n    }\n\n    thisCollection.addLinks({\n      [field.name]: (0, _objectSpread2.default)({\n        collection: referencedCollection\n      }, config)\n    });\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher-schema-directives/LinkDirective.js"],"names":["module","export","default","LinkDirective","SchemaDirectiveVisitor","watch","require","v","GraphQLList","GraphQLObjectType","GraphQLNonNull","Mongo","setupMongoDirective","visitFieldDefinition","field","details","objectType","args","_mongoCollectionName","Meteor","Error","name","isArrayField","type","referencedType","ofType","referencedCollectionName","objectNodeDirectives","astNode","directives","mongoDirective","find","directive","value","nameArgument","arguments","argument","thisCollectionName","referencedCollection","Collection","get","thisCollection","config","to","Object","assign","inversedBy","index","addLinks","collection"],"mappings":"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","sourcesContent":["import { SchemaDirectiveVisitor } from 'graphql-tools';\nimport { GraphQLList, GraphQLObjectType, GraphQLNonNull } from 'graphql/type';\nimport { Mongo } from 'meteor/mongo';\nimport { setupMongoDirective } from './MongoDirective';\n\nexport default class LinkDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const { objectType } = details;\n    const { args } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error(\n        'collection-not-found',\n        `You are trying to set the link: ${\n          field.name\n        } but your object type does not have @mongo directive set-up`\n      );\n    }\n\n    const isArrayField = field.type instanceof GraphQLList;\n    let referencedType;\n\n    if (isArrayField) {\n      referencedType = field.type.ofType;\n    } else {\n      referencedType = field.type;\n    }\n\n    if (referencedType instanceof GraphQLNonNull) {\n      referencedType = referencedType.ofType;\n    } else {\n      if (!(referencedType instanceof GraphQLObjectType)) {\n        throw new Meteor.Error(\n          'invalid-type',\n          `You are trying to attach a link on a invalid type. @link directive only works with GraphQLObjectType `\n        );\n      }\n    }\n\n    let referencedCollectionName = referencedType._mongoCollectionName;\n    if (!referencedCollectionName) {\n      const objectNodeDirectives = referencedType.astNode.directives;\n      const mongoDirective = objectNodeDirectives.find(directive => {\n        return directive.name.value === 'mongo';\n      });\n\n      if (mongoDirective) {\n        const nameArgument = mongoDirective.arguments.find(\n          argument => argument.name.value === 'name'\n        );\n\n        setupMongoDirective(referencedType, {\n          name: nameArgument.value.value,\n        });\n\n        referencedCollectionName = nameArgument.value.value;\n      } else {\n        throw new Meteor.Error(\n          'invalid-collection',\n          `The referenced type does not have a collection setup using @mongo directive`\n        );\n      }\n    }\n\n    const thisCollectionName = objectType._mongoCollectionName;\n\n    const referencedCollection = Mongo.Collection.get(referencedCollectionName);\n    const thisCollection = Mongo.Collection.get(thisCollectionName);\n\n    let config = {};\n    if (args.to) {\n      config = Object.assign({}, args);\n      config.inversedBy = args.to;\n      delete config.to;\n    } else {\n      if (args.field) {\n        config = Object.assign(\n          {\n            type: isArrayField ? 'many' : 'one',\n            field: args.field,\n            index: true,\n          },\n          args\n        );\n      } else {\n        throw new Meteor.Error(\n          `invalid-args`,\n          `You have provided invalid arguments for this link in ${thisCollectionName}. The \"field\" property is missing.`\n        );\n      }\n    }\n\n    thisCollection.addLinks({\n      [field.name]: {\n        collection: referencedCollection,\n        ...config,\n      },\n    });\n  }\n}\n"]},"sourceType":"script","hash":"210c8ee343cad8e7a726e40af90a14fbbe570371"}
