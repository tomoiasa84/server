{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js"}},"code":"module.export({\n  createNodes: () => createNodes,\n  addFieldNode: () => addFieldNode\n});\nlet CollectionNode;\nmodule.watch(require(\"../nodes/collectionNode.js\"), {\n  default(v) {\n    CollectionNode = v;\n  }\n\n}, 0);\nlet FieldNode;\nmodule.watch(require(\"../nodes/fieldNode.js\"), {\n  default(v) {\n    FieldNode = v;\n  }\n\n}, 1);\nlet ReducerNode;\nmodule.watch(require(\"../nodes/reducerNode.js\"), {\n  default(v) {\n    ReducerNode = v;\n  }\n\n}, 2);\nlet dotize;\nmodule.watch(require(\"./dotize.js\"), {\n  default(v) {\n    dotize = v;\n  }\n\n}, 3);\nlet createReducers;\nmodule.watch(require(\"../reducers/lib/createReducers\"), {\n  default(v) {\n    createReducers = v;\n  }\n\n}, 4);\nconst specialFields = ['$filters', '$options', '$postFilters', '$postOptions', '$postFilter'];\n/**\n * Creates node objects from the body. The root is always a collection node.\n *\n * @param root\n */\n\nfunction createNodes(root) {\n  // this is a fix for phantomjs tests (don't really understand it.)\n  if (!_.isObject(root.body)) {\n    return;\n  }\n\n  _.each(root.body, (body, fieldName) => {\n    if (!body) {\n      return;\n    } // if it's a prop\n\n\n    if (_.contains(specialFields, fieldName)) {\n      root.addProp(fieldName, body);\n      return;\n    } // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n    // TODO: find another way to do this\n\n\n    if (root.collection.default) {\n      root.collection = root.collection.default;\n    } // checking if it is a link.\n\n\n    let linker = root.collection.getLinker(fieldName);\n\n    if (linker) {\n      // check if it is a cached link\n      // if yes, then we need to explicitly define this at collection level\n      // so when we transform the data for delivery, we move it to the link name\n      if (linker.isDenormalized()) {\n        if (linker.isSubBodyDenormalized(body)) {\n          handleDenormalized(root, linker, body, fieldName);\n          return;\n        }\n      }\n\n      let subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n      root.add(subroot, linker);\n      createNodes(subroot);\n      return;\n    } // checking if it's a reducer\n\n\n    const reducer = root.collection.getReducer(fieldName);\n\n    if (reducer) {\n      let reducerNode = new ReducerNode(fieldName, reducer);\n      root.add(reducerNode);\n    } // it's most likely a field then\n\n\n    addFieldNode(body, fieldName, root);\n  });\n\n  createReducers(root);\n\n  if (root.fieldNodes.length === 0) {\n    root.add(new FieldNode('_id', 1));\n  }\n}\n\nfunction addFieldNode(body, fieldName, root) {\n  // it's not a link and not a special variable => we assume it's a field\n  if (_.isObject(body)) {\n    let dotted = dotize.convert({\n      [fieldName]: body\n    });\n\n    _.each(dotted, (value, key) => {\n      root.add(new FieldNode(key, value));\n    });\n  } else {\n    let fieldNode = new FieldNode(fieldName, body);\n    root.add(fieldNode);\n  }\n}\n\nmodule.exportDefault(function (collection, body) {\n  let root = new CollectionNode(collection, body);\n  createNodes(root);\n  return root;\n});\n;\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\n\nfunction handleDenormalized(root, linker, body, fieldName) {\n  Object.assign(body, {\n    _id: 1\n  });\n  const cacheField = linker.linkConfig.denormalize.field;\n  root.snapCache(cacheField, fieldName); // if it's one and direct also include the link storage\n\n  if (!linker.isMany() && !linker.isVirtual()) {\n    addFieldNode(1, linker.linkStorageField, root);\n  }\n\n  addFieldNode(body, cacheField, root);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/createGraph.js"],"names":["module","export","createNodes","addFieldNode","CollectionNode","watch","require","default","v","FieldNode","ReducerNode","dotize","createReducers","specialFields","root","_","isObject","body","each","fieldName","contains","addProp","collection","linker","getLinker","isDenormalized","isSubBodyDenormalized","handleDenormalized","subroot","getLinkedCollection","add","reducer","getReducer","reducerNode","fieldNodes","length","dotted","convert","value","key","fieldNode","exportDefault","Object","assign","_id","cacheField","linkConfig","denormalize","field","snapCache","isMany","isVirtual","linkStorageField"],"mappings":"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","sourcesContent":["import CollectionNode from '../nodes/collectionNode.js';\nimport FieldNode from '../nodes/fieldNode.js';\nimport ReducerNode from '../nodes/reducerNode.js';\nimport dotize from './dotize.js';\nimport createReducers from '../reducers/lib/createReducers';\n\nconst specialFields = [\n    '$filters',\n    '$options',\n    '$postFilters',\n    '$postOptions',\n    '$postFilter'\n];\n\n/**\n * Creates node objects from the body. The root is always a collection node.\n *\n * @param root\n */\nexport function createNodes(root) {\n    // this is a fix for phantomjs tests (don't really understand it.)\n    if (!_.isObject(root.body)) {\n        return;\n    }\n\n    _.each(root.body, (body, fieldName) => {\n        if (!body) {\n            return;\n        }\n\n        // if it's a prop\n        if (_.contains(specialFields, fieldName)) {\n            root.addProp(fieldName, body);\n\n            return;\n        }\n\n        // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n        // TODO: find another way to do this\n        if (root.collection.default) {\n          root.collection = root.collection.default;\n        }\n\n        // checking if it is a link.\n        let linker = root.collection.getLinker(fieldName);\n\n        if (linker) {\n            // check if it is a cached link\n            // if yes, then we need to explicitly define this at collection level\n            // so when we transform the data for delivery, we move it to the link name\n            if (linker.isDenormalized()) {\n                if (linker.isSubBodyDenormalized(body)) {\n                    handleDenormalized(root, linker, body, fieldName);\n                    return;\n                }\n            }\n\n            let subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n            root.add(subroot, linker);\n\n            createNodes(subroot);\n            return;\n        }\n\n        // checking if it's a reducer\n        const reducer = root.collection.getReducer(fieldName);\n\n        if (reducer) {\n            let reducerNode = new ReducerNode(fieldName, reducer);\n            root.add(reducerNode);\n        }\n\n        // it's most likely a field then\n        addFieldNode(body, fieldName, root);\n    });\n\n    createReducers(root);\n\n    if (root.fieldNodes.length === 0) {\n        root.add(new FieldNode('_id', 1));\n    }\n}\n\n/**\n * @param body\n * @param fieldName\n * @param root\n */\nexport function addFieldNode(body, fieldName, root) {\n    // it's not a link and not a special variable => we assume it's a field\n    if (_.isObject(body)) {\n        let dotted = dotize.convert({[fieldName]: body});\n        _.each(dotted, (value, key) => {\n            root.add(new FieldNode(key, value));\n        });\n    } else {\n        let fieldNode = new FieldNode(fieldName, body);\n        root.add(fieldNode);\n    }\n}\n\n/**\n * @param collection\n * @param body\n * @returns {CollectionNode}\n */\nexport default function (collection, body) {\n    let root = new CollectionNode(collection, body);\n    createNodes(root);\n\n    return root;\n};\n\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\nfunction handleDenormalized(root, linker, body, fieldName) {\n    Object.assign(body, {_id: 1});\n\n    const cacheField = linker.linkConfig.denormalize.field;\n    root.snapCache(cacheField, fieldName);\n\n    // if it's one and direct also include the link storage\n    if (!linker.isMany() && !linker.isVirtual()) {\n        addFieldNode(1, linker.linkStorageField, root);\n    }\n\n    addFieldNode(body, cacheField, root);\n}"]},"sourceType":"script","hash":"c8e8c9545e6673283002e2fa6624abb18e611736"}
