{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js"}},"code":"module.export({\n  \"default\": function () {\n    return addReducers;\n  },\n  handleAddElement: function () {\n    return handleAddElement;\n  },\n  handleAddReducer: function () {\n    return handleAddReducer;\n  },\n  handleAddLink: function () {\n    return handleAddLink;\n  },\n  handleAddField: function () {\n    return handleAddField;\n  }\n});\nvar dot;\nmodule.watch(require(\"dot-object\"), {\n  \"default\": function (v) {\n    dot = v;\n  }\n}, 0);\nvar createNodes;\nmodule.watch(require(\"../../lib/createGraph\"), {\n  createNodes: function (v) {\n    createNodes = v;\n  }\n}, 1);\nvar CollectionNode;\nmodule.watch(require(\"../../nodes/collectionNode\"), {\n  \"default\": function (v) {\n    CollectionNode = v;\n  }\n}, 2);\nvar FieldNode;\nmodule.watch(require(\"../../nodes/fieldNode\"), {\n  \"default\": function (v) {\n    FieldNode = v;\n  }\n}, 3);\nvar ReducerNode;\nmodule.watch(require(\"../../nodes/reducerNode\"), {\n  \"default\": function (v) {\n    ReducerNode = v;\n  }\n}, 4);\nvar embedReducerWithLink;\nmodule.watch(require(\"./embedReducerWithLink\"), {\n  \"default\": function (v) {\n    embedReducerWithLink = v;\n  }\n}, 5);\n\nfunction addReducers(root) {\n  // we add reducers last, after we have added all the fields.\n  root.reducerNodes.forEach(function (reducer) {\n    _.each(reducer.body, function (body, fieldName) {\n      handleAddElement(root, fieldName, body);\n    });\n  });\n}\n\nfunction handleAddElement(root, fieldName, body) {\n  // if it's a link\n  var collection = root.collection;\n  var linker = collection.getLinker(fieldName);\n\n  if (linker) {\n    return handleAddLink(fieldName, body, root, linker);\n  }\n\n  var reducer = collection.getReducer(fieldName);\n\n  if (reducer) {\n    return handleAddReducer(fieldName, reducer, root);\n  } // we assume it's a field in this case\n\n\n  return handleAddField(fieldName, body, root);\n}\n\nfunction handleAddReducer(fieldName, reducer, root) {\n  if (!root.hasReducerNode(fieldName)) {\n    var reducerNode = new ReducerNode(fieldName, reducer);\n    root.add(reducerNode);\n    reducerNode.scheduledForDeletion = true;\n\n    _.each(reducer.body, function (body, fieldName) {\n      handleAddElement(root, fieldName, body);\n    });\n  }\n}\n\nfunction handleAddLink(fieldName, body, root, linker) {\n  if (root.hasCollectionNode(fieldName)) {\n    var collectionNode = root.getCollectionNode(fieldName);\n    embedReducerWithLink(body, collectionNode);\n  } else {\n    // add\n    var _collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n\n    _collectionNode.scheduledForDeletion = true;\n    root.add(_collectionNode, linker);\n    createNodes(_collectionNode);\n  }\n}\n\nfunction handleAddField(fieldName, body, root) {\n  if (_.isObject(body)) {\n    var _dot$dot;\n\n    // if reducer specifies a nested field\n    var dots = dot.dot((_dot$dot = {}, _dot$dot[fieldName] = body, _dot$dot));\n\n    _.each(dots, function (value, key) {\n      if (!root.hasField(key)) {\n        var fieldNode = new FieldNode(key, value);\n        fieldNode.scheduledForDeletion = true;\n        root.add(fieldNode);\n      }\n    });\n  } else {\n    // if reducer does not specify a nested field, and the field does not exist.\n    if (!root.hasField(fieldName)) {\n      var fieldNode = new FieldNode(fieldName, body);\n      fieldNode.scheduledForDeletion = true;\n      root.add(fieldNode);\n    }\n  }\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/reducers/lib/createReducers.js"],"names":["module","export","addReducers","handleAddElement","handleAddReducer","handleAddLink","handleAddField","dot","watch","require","v","createNodes","CollectionNode","FieldNode","ReducerNode","embedReducerWithLink","root","reducerNodes","forEach","_","each","reducer","body","fieldName","collection","linker","getLinker","getReducer","hasReducerNode","reducerNode","add","scheduledForDeletion","hasCollectionNode","collectionNode","getCollectionNode","getLinkedCollection","isObject","dots","value","key","hasField","fieldNode"],"mappings":"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","sourcesContent":["import dot from 'dot-object';\nimport { createNodes } from '../../lib/createGraph';\nimport CollectionNode from '../../nodes/collectionNode';\nimport FieldNode from '../../nodes/fieldNode';\nimport ReducerNode from '../../nodes/reducerNode';\nimport embedReducerWithLink from './embedReducerWithLink';\n\nexport default function addReducers(root) {\n    // we add reducers last, after we have added all the fields.\n    root.reducerNodes.forEach(reducer => {\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    });\n}\n\n/**\n * @param root\n * @param fieldName\n * @param body\n */\nexport function handleAddElement(root, fieldName, body) {\n    // if it's a link\n    const collection = root.collection;\n    const linker = collection.getLinker(fieldName);\n    if (linker) {\n        return handleAddLink(fieldName, body, root, linker);\n    }\n\n    const reducer = collection.getReducer(fieldName);\n    if (reducer) {\n        return handleAddReducer(fieldName, reducer, root);\n    }\n\n    // we assume it's a field in this case\n    return handleAddField(fieldName, body, root);\n}\n\n/**\n * @param fieldName\n * @param reducer\n * @param root\n */\nexport function handleAddReducer(fieldName, reducer, root) {\n    if (!root.hasReducerNode(fieldName)) {\n        let reducerNode = new ReducerNode(fieldName, reducer);\n        root.add(reducerNode);\n        reducerNode.scheduledForDeletion = true;\n\n        _.each(reducer.body, (body, fieldName) => {\n            handleAddElement(root, fieldName, body);\n        })\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n * @param linker\n */\nexport function handleAddLink(fieldName, body, root, linker) {\n    if (root.hasCollectionNode(fieldName)) {\n        const collectionNode = root.getCollectionNode(fieldName);\n\n        embedReducerWithLink(body, collectionNode);\n    } else {\n        // add\n        let collectionNode = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n        collectionNode.scheduledForDeletion = true;\n        root.add(collectionNode, linker);\n\n        createNodes(collectionNode);\n    }\n}\n\n/**\n * @param fieldName\n * @param body\n * @param root\n */\nexport function handleAddField(fieldName, body, root) {\n    if (_.isObject(body)) {\n        // if reducer specifies a nested field\n        const dots = dot.dot({\n            [fieldName]: body\n        });\n\n        _.each(dots, (value, key) => {\n            if (!root.hasField(key)) {\n                let fieldNode = new FieldNode(key, value);\n                fieldNode.scheduledForDeletion = true;\n\n                root.add(fieldNode);\n            }\n        });\n    } else {\n        // if reducer does not specify a nested field, and the field does not exist.\n        if (!root.hasField(fieldName)) {\n            let fieldNode = new FieldNode(fieldName, body);\n            fieldNode.scheduledForDeletion = true;\n\n            root.add(fieldNode);\n        }\n    }\n}\n"]},"sourceType":"script","hash":"3493a620dd5b9713c9eec53b59a3da4cd2dda98a"}
