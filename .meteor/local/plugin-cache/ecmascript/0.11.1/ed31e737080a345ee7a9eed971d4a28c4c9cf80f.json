{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/tests.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/herteby:denormalize/tests.js","filename":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/tests.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/herteby:denormalize/tests.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/herteby:denormalize/tests.js"}},"code":"var Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\n\nvar _;\n\nmodule.watch(require(\"lodash\"), {\n  \"default\": function (v) {\n    _ = v;\n  }\n}, 1);\nvar MigrationHistory, migrate, autoMigrate;\nmodule.watch(require(\"./migrations.js\"), {\n  MigrationHistory: function (v) {\n    MigrationHistory = v;\n  },\n  migrate: function (v) {\n    migrate = v;\n  },\n  autoMigrate: function (v) {\n    autoMigrate = v;\n  }\n}, 2);\n\nfunction report(result, expected) {\n  var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  var keys = _.union(_.keys(result), _.keys(expected));\n\n  _.each(keys, function (key) {\n    if (!_.isEqual(result[key], expected[key])) {\n      console.log('MISMATCH:', key);\n      console.log('Expected:', JSON.stringify(expected[key], null, ' '));\n      console.log('     Got:', JSON.stringify(result[key], null, ' '));\n    }\n  });\n}\n\nfunction compare(result, expected) {\n  try {\n    assert.deepEqual(result, expected);\n  } catch (err) {\n    report(result, expected);\n    throw err;\n  }\n}\n\nPosts = new Mongo.Collection('posts'); //parent\n\nComments = new Mongo.Collection('comments'); //inversed\n\nUsers = new Mongo.Collection('users'); //single\n\nImages = new Mongo.Collection('images'); //many\n\nTags = new Mongo.Collection('tags'); //many-inversed\n\nLikes = new Mongo.Collection('likes'); // count\n\nCustomers = new Mongo.Collection('customers'); //recursive caches\n\nBills = new Mongo.Collection('bills'); //recursive caches\n\nItems = new Mongo.Collection('items'); //recursive caches\n\ndescribe('setup', function () {\n  it('clear collections', function () {\n    Posts.remove({});\n    Comments.remove({});\n    Users.remove({});\n    Images.remove({});\n    Tags.remove({});\n    Likes.remove({});\n    MigrationHistory.remove({});\n  });\n  it('clear hooks', function () {\n    //Remove all collection hooks so that migration tests work properly\n    _.each([Posts, Comments, Users, Images, Tags, Likes], function (collection) {\n      collection._hookAspects.insert.after = [];\n      collection._hookAspects.update.after = [];\n      collection._hookAspects.remove.after = [];\n    });\n  });\n  it('insert migrants', function () {\n    //These users inserted before the caches have been declared, so they will need to be migrated\n    Users.insert({\n      _id: 'migrant1',\n      username: 'Simon',\n      profile: {\n        first_name: 'Simon',\n        last_name: 'Herteby'\n      }\n    });\n    Users.insert({\n      _id: 'migrant2',\n      username: 'bill_gates@microsoft.com',\n      profile: {\n        first_name: 'Bill',\n        last_name: 'Gates'\n      }\n    });\n    Users.insert({\n      _id: 'migrant3',\n      username: 'steve_jobs@apple.com',\n      profile: {\n        first_name: 'Steve',\n        last_name: 'Jobs'\n      }\n    });\n  });\n  it('Set up caches', function () {\n    Posts.cache({\n      type: 'one',\n      collection: Users,\n      cacheField: '_author',\n      referenceField: 'authorId',\n      fields: {\n        username: 1,\n        profile: {\n          first_name: 1,\n          last_name: 1\n        }\n      }\n    });\n    Posts.cache({\n      type: 'inversed',\n      collection: Comments,\n      cacheField: '_comments',\n      referenceField: 'postId',\n      fields: {\n        message: 1\n      }\n    });\n    Posts.cache({\n      type: 'many',\n      collection: Images,\n      cacheField: '_images',\n      referenceField: 'imageIds',\n      fields: {\n        filename: 1\n      }\n    });\n    Posts.cache({\n      type: 'many-inversed',\n      collection: Tags,\n      cacheField: '_tags',\n      referenceField: 'postIds',\n      fields: {\n        name: 1\n      }\n    });\n    Posts.cacheCount({\n      collection: Likes,\n      cacheField: '_likes.all',\n      referenceField: 'postId'\n    });\n    Posts.cacheCount({\n      collection: Likes,\n      cacheField: '_likes.sweden',\n      referenceField: 'postId',\n      selector: {\n        country: 'Sweden'\n      }\n    });\n    Users.cacheField({\n      cacheField: '_defaultTransform',\n      fields: ['username', 'profile.first_name', 'profile.last_name']\n    });\n    Users.cacheField({\n      cacheField: 'nested._customTransform',\n      fields: ['username', 'profile.first_name', 'profile.last_name'],\n      transform: function (doc) {\n        return [doc.username, _.get(doc, 'profile.first_name'), _.get(doc, 'profile.last_name')];\n      }\n    });\n  });\n});\ndescribe('Migration', function () {\n  describe('migrate()', function () {\n    it('user should not have cache before migration', function () {\n      var migrant1 = Users.findOne('migrant1');\n      compare(migrant1, {\n        _id: 'migrant1',\n        username: 'Simon',\n        profile: {\n          first_name: 'Simon',\n          last_name: 'Herteby'\n        }\n      });\n    });\n    it('migrated document should have the correct caches', function () {\n      migrate('users', '_defaultTransform', 'migrant1');\n      migrate('users', 'nested._customTransform', {\n        _id: 'migrant1'\n      });\n      var migrant1 = Users.findOne('migrant1');\n      compare(migrant1, {\n        _id: 'migrant1',\n        username: 'Simon',\n        profile: {\n          first_name: 'Simon',\n          last_name: 'Herteby'\n        },\n        _defaultTransform: 'Simon, Simon, Herteby',\n        nested: {\n          _customTransform: ['Simon', 'Simon', 'Herteby']\n        }\n      });\n    });\n    it('documents not matching selector should not have caches', function () {\n      var migrant2 = Users.findOne('migrant2');\n      var migrant3 = Users.findOne('migrant3');\n      compare(migrant2, {\n        _id: 'migrant2',\n        username: 'bill_gates@microsoft.com',\n        profile: {\n          first_name: 'Bill',\n          last_name: 'Gates'\n        }\n      });\n      compare(migrant3, {\n        _id: 'migrant3',\n        username: 'steve_jobs@apple.com',\n        profile: {\n          first_name: 'Steve',\n          last_name: 'Jobs'\n        }\n      });\n    });\n  });\n  describe('autoMigrate()', function () {\n    it('migrated documents should have the correct caches', function () {\n      autoMigrate();\n      console.log(\"(Don't worry about the console log saying 'migrated 0 docs' a bunch of times. That is correct.)\");\n      var migrant2 = Users.findOne('migrant2');\n      var migrant3 = Users.findOne('migrant3');\n      compare(migrant2, {\n        _id: 'migrant2',\n        username: 'bill_gates@microsoft.com',\n        profile: {\n          first_name: 'Bill',\n          last_name: 'Gates'\n        },\n        _defaultTransform: 'bill_gates@microsoft.com, Bill, Gates',\n        nested: {\n          _customTransform: ['bill_gates@microsoft.com', 'Bill', 'Gates']\n        }\n      });\n      compare(migrant3, {\n        _id: 'migrant3',\n        username: 'steve_jobs@apple.com',\n        profile: {\n          first_name: 'Steve',\n          last_name: 'Jobs'\n        },\n        _defaultTransform: 'steve_jobs@apple.com, Steve, Jobs',\n        nested: {\n          _customTransform: ['steve_jobs@apple.com', 'Steve', 'Jobs']\n        }\n      });\n    });\n  });\n});\ndescribe('Insert parent - no children', function () {\n  it('one cache should not exist', function () {\n    Posts.insert({\n      _id: 'post1',\n      authorId: 'user1',\n      imageIds: ['dog', 'cat']\n    });\n    assert.isUndefined(Posts.findOne('post1')._author);\n  });\n  it('many cache should be empty array', function () {\n    assert.isArray(Posts.findOne('post1')._images);\n    assert.strictEqual(Posts.findOne('post1')._images.length, 0);\n  });\n  it('inversed cache should be empty array', function () {\n    assert.isArray(Posts.findOne('post1')._comments);\n    assert.strictEqual(Posts.findOne('post1')._comments.length, 0);\n  });\n  it('many-inversed cache should be empty array', function () {\n    assert.isArray(Posts.findOne('post1')._tags);\n    assert.strictEqual(Posts.findOne('post1')._tags.length, 0);\n  });\n  it('unfiltered count should be 0', function () {\n    assert.strictEqual(Posts.findOne('post1')._likes.all, 0);\n  });\n  it('filtered count should be 0', function () {\n    assert.strictEqual(Posts.findOne('post1')._likes.sweden, 0);\n  });\n});\ndescribe('Type: one', function () {\n  describe('Insert child', function () {\n    it('child should be deeply equal except _id', function () {\n      Users.insert({\n        _id: 'user1',\n        username: 'Simon',\n        profile: {\n          first_name: 'Simon',\n          last_name: 'Herteby'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var user = Users.findOne('user1', {\n        fields: {\n          _id: 0,\n          username: 1,\n          profile: 1\n        }\n      });\n      compare(post._author, user);\n    });\n  });\n  describe('Update child', function () {\n    it('cache should have the new values', function () {\n      Users.update('user1', {\n        $set: {\n          'profile.last_name': 'Svensson'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var user = Users.findOne('user1', {\n        fields: {\n          _id: 0,\n          username: 1,\n          profile: 1\n        }\n      });\n      compare(post._author, user);\n    });\n  });\n  describe('Update parent referenceField', function () {\n    it('cache should reflect the new child', function () {\n      Users.insert({\n        _id: 'user2',\n        username: 'Karl',\n        profile: {\n          first_name: 'Karl',\n          last_name: 'Henriksson'\n        }\n      });\n      Posts.update('post1', {\n        $set: {\n          authorId: 'user2'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var user = Users.findOne('user2', {\n        fields: {\n          _id: 0,\n          username: 1,\n          profile: 1\n        }\n      });\n      compare(post._author, user);\n    });\n  });\n  describe('Remove child', function () {\n    it('cache should be undefined', function () {\n      Users.remove('user2');\n      var post = Posts.findOne('post1');\n      assert.isUndefined(post._author);\n    });\n  });\n  describe('Insert another parent', function () {\n    it('new parent should have child in cache', function () {\n      Posts.insert({\n        _id: 'post2',\n        authorId: 'user1'\n      });\n      var post = Posts.findOne('post2');\n      var user = Users.findOne('user1', {\n        fields: {\n          _id: 0,\n          username: 1,\n          profile: 1\n        }\n      });\n      compare(post._author, user);\n    });\n  });\n});\ndescribe('Type: many', function () {\n  describe('Insert child', function () {\n    it('cache should contain child', function () {\n      Images.insert({\n        _id: 'cat',\n        filename: 'cat.jpg'\n      });\n      var post = Posts.findOne('post1');\n      var image = Images.findOne('cat');\n      compare(post._images, [image]);\n    });\n  });\n  describe('Insert another child', function () {\n    it('cache should contain both children', function () {\n      Images.insert({\n        _id: 'dog',\n        filename: 'dog.png'\n      });\n      var post = Posts.findOne('post1');\n      var cat = Images.findOne('cat');\n      var dog = Images.findOne('dog');\n      compare(post._images, [cat, dog]);\n    });\n  });\n  describe('Update children', function () {\n    it('cache should contain both updated children', function () {\n      Images.find().forEach(function (image) {\n        Images.update(image._id, {\n          $set: {\n            filename: image.filename + '.zip'\n          }\n        });\n      });\n      var post = Posts.findOne('post1');\n      var cat = Images.findOne('cat');\n      var dog = Images.findOne('dog');\n      compare(post._images, [cat, dog]);\n    });\n  });\n  describe('Remove child', function () {\n    it('cache should only contain the remaining child', function () {\n      Images.remove('cat');\n      var post = Posts.findOne('post1');\n      var dog = Images.findOne('dog');\n      compare(post._images, [dog]);\n    });\n  });\n  describe('Insert unlinked child', function () {\n    it('cache should not contain the inserted child', function () {\n      Images.insert({\n        _id: 'horse',\n        filename: 'horse.gif'\n      });\n      var post = Posts.findOne('post1');\n      var dog = Images.findOne('dog');\n      compare(post._images, [dog]);\n    });\n  });\n  describe('Add child to parent referenceField', function () {\n    it('cache should contain both children', function () {\n      Posts.update('post1', {\n        $push: {\n          imageIds: 'horse'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var horse = Images.findOne('horse');\n      var dog = Images.findOne('dog');\n      compare(post._images, [dog, horse]);\n    });\n  });\n  describe('Remove child from parent referenceField', function () {\n    it('cache should only contain remaining child', function () {\n      Posts.update('post1', {\n        $pull: {\n          imageIds: 'dog'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var horse = Images.findOne('horse');\n      compare(post._images, [horse]);\n    });\n  });\n  describe('Insert another parent', function () {\n    it('cache should have correct children', function () {\n      Posts.insert({\n        _id: 'post3',\n        imageIds: ['dog', 'horse']\n      });\n      var post = Posts.findOne('post3');\n      var dog = Images.findOne('dog');\n      var horse = Images.findOne('horse');\n      compare(post._images, [dog, horse]);\n    });\n  });\n});\ndescribe('Type: inversed', function () {\n  describe('Insert child', function () {\n    it('cache should contain child', function () {\n      Comments.insert({\n        _id: 'comment1',\n        message: 'Hello world!',\n        postId: 'post1'\n      });\n      var post = Posts.findOne('post1');\n      var comment = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment]);\n    });\n  });\n  describe('Insert another child', function () {\n    it('cache should contain both children', function () {\n      Comments.insert({\n        _id: 'comment2',\n        message: 'Hello world!',\n        postId: 'post1'\n      });\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment2 = Comments.findOne('comment2', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1, comment2]);\n    });\n  });\n  describe('Insert unlinked child', function () {\n    it('cache should not contain new child', function () {\n      Comments.insert({\n        _id: 'comment3',\n        message: 'Hello world again!'\n      });\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment2 = Comments.findOne('comment2', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1, comment2]);\n    });\n  });\n  describe('Update child referenceField', function () {\n    it('cache should contain new and previous children', function () {\n      Comments.update('comment3', {\n        $set: {\n          postId: 'post1'\n        }\n      });\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment2 = Comments.findOne('comment2', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment3 = Comments.findOne('comment3', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1, comment2, comment3]);\n    });\n  });\n  describe('Update children', function () {\n    it('cache should contain updated children', function () {\n      Comments.update({}, {\n        $set: {\n          message: 'Goodbye world!'\n        }\n      }, {\n        multi: true\n      });\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment2 = Comments.findOne('comment2', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment3 = Comments.findOne('comment3', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1, comment2, comment3]);\n    });\n  });\n  describe('Remove child', function () {\n    it('cache should only contain remaining children', function () {\n      Comments.remove('comment2');\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      var comment3 = Comments.findOne('comment3', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1, comment3]);\n    });\n  });\n  describe('Remove parent from child referenceField', function () {\n    it('cache should only contain remaining child', function () {\n      Comments.update('comment3', {\n        $unset: {\n          postId: 1\n        }\n      });\n      var post = Posts.findOne('post1');\n      var comment1 = Comments.findOne('comment1', {\n        fields: {\n          postId: 0\n        }\n      });\n      compare(post._comments, [comment1]);\n    });\n  });\n  describe('Insert another parent', function () {\n    it('cache should contain all children', function () {\n      Comments.update({}, {\n        $set: {\n          postId: 'post4'\n        }\n      }, {\n        multi: true\n      });\n      Posts.insert({\n        _id: 'post4'\n      });\n      var post = Posts.findOne('post4');\n      var comments = Comments.find({}, {\n        fields: {\n          postId: 0\n        }\n      }).fetch();\n      compare(post._comments, comments);\n    });\n  });\n});\ndescribe('Type: many-inversed', function () {\n  describe('Insert child', function () {\n    it('parent1 should contain child', function () {\n      Tags.insert({\n        _id: 'tag1',\n        name: 'Red',\n        postIds: ['post1', 'post2']\n      });\n      var post1 = Posts.findOne('post1');\n      var tag = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag]);\n    });\n    it('parent2 should contain child', function () {\n      var post2 = Posts.findOne('post2');\n      var tag = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag]);\n    });\n    it('parent3 should not contain child', function () {\n      var post3 = Posts.findOne('post3');\n      compare(post3._tags, []);\n    });\n  });\n  describe('Insert another child', function () {\n    it('parent1 should contain both children', function () {\n      Tags.insert({\n        _id: 'tag2',\n        name: 'Blue',\n        postIds: ['post1', 'post2']\n      });\n      var post1 = Posts.findOne('post1');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag1, tag2]);\n    });\n    it('parent2 should contain both children', function () {\n      var post2 = Posts.findOne('post1');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag1, tag2]);\n    });\n  });\n  describe('Insert unlinked child', function () {\n    it('cache should not contain new child', function () {\n      Tags.insert({\n        _id: 'tag3',\n        name: 'Green'\n      });\n      var post = Posts.findOne('post1');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post._tags, [tag1, tag2]);\n    });\n  });\n  describe('Update child referenceField', function () {\n    it('parent1 should now contain the child', function () {\n      Tags.update('tag3', {\n        $set: {\n          'postIds': ['post1', 'post2']\n        }\n      });\n      var post1 = Posts.findOne('post1');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag1, tag2, tag3]);\n    });\n    it('parent2 should now contain the child', function () {\n      var post2 = Posts.findOne('post2');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag1, tag2, tag3]);\n    });\n  });\n  describe('Update child referenceField', function () {\n    it('parent1 should contain updated children', function () {\n      Tags.find().forEach(function (tag) {\n        Tags.update(tag._id, {\n          $set: {\n            name: 'color-' + tag.name\n          }\n        });\n      });\n      var post1 = Posts.findOne('post1');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag1, tag2, tag3]);\n    });\n    it('parent2 should contain updated children', function () {\n      var post2 = Posts.findOne('post2');\n      var tag1 = Tags.findOne('tag1', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag1, tag2, tag3]);\n    });\n  });\n  describe('Remove child', function () {\n    it('parent1 should only contain remaining children', function () {\n      Tags.remove('tag1');\n      var post1 = Posts.findOne('post1');\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag2, tag3]);\n    });\n    it('parent2 should only contain remaining children', function () {\n      var post2 = Posts.findOne('post2');\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag2, tag3]);\n    });\n  });\n  describe('Remove parent2 from child referenceField', function () {\n    it('parent1 should still contain child', function () {\n      Tags.update('tag3', {\n        $pull: {\n          postIds: 'post2'\n        }\n      });\n      var post1 = Posts.findOne('post1');\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      var tag3 = Tags.findOne('tag3', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post1._tags, [tag2, tag3]);\n    });\n    it('parent2 should not contain child', function () {\n      var post2 = Posts.findOne('post2');\n      var tag2 = Tags.findOne('tag2', {\n        fields: {\n          postIds: 0\n        }\n      });\n      compare(post2._tags, [tag2]);\n    });\n  });\n  describe('Insert another parent', function () {\n    it('new parent should contain all children', function () {\n      Tags.update({}, {\n        $push: {\n          postIds: 'post5'\n        }\n      }, {\n        multi: true\n      });\n      Posts.insert({\n        _id: 'post5'\n      });\n      var post = Posts.findOne('post5');\n      var tags = Tags.find({}, {\n        fields: {\n          postIds: 0\n        }\n      }).fetch();\n      compare(post._tags, tags);\n    });\n  });\n});\ndescribe('cacheCount', function () {\n  describe('Insert child matching filter', function () {\n    it('unfiltered count should be 1', function () {\n      Likes.insert({\n        _id: 'like1',\n        postId: 'post1',\n        country: 'Sweden'\n      });\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.all, 1);\n    });\n    it('filtered count should be 1', function () {\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.sweden, 1);\n    });\n  });\n  describe('Insert child not matching filter', function () {\n    it('unfiltered count should be 2', function () {\n      Likes.insert({\n        _id: 'like2',\n        postId: 'post1',\n        country: 'Norway'\n      });\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.all, 2);\n    });\n    it('filtered count should be 1', function () {\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.sweden, 1);\n    });\n  });\n  describe('Insert new parent', function () {\n    it('unfiltered count should be 2', function () {\n      Likes.insert({\n        _id: 'like3',\n        postId: 'post6',\n        country: 'Sweden'\n      });\n      Likes.insert({\n        _id: 'like4',\n        postId: 'post6'\n      });\n      Posts.insert({\n        _id: 'post6'\n      });\n      var post = Posts.findOne('post6');\n      assert.strictEqual(post._likes.all, 2);\n    });\n    it('filtered count should be 1', function () {\n      var post = Posts.findOne('post6');\n      assert.strictEqual(post._likes.sweden, 1);\n    });\n  });\n  describe('Remove child not matching filter', function () {\n    it('unfiltered count should be 1', function () {\n      Likes.remove('like2');\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.all, 1);\n    });\n    it('filtered count should be 1', function () {\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.sweden, 1);\n    });\n  });\n  describe('Remove child matching filter', function () {\n    it('unfiltered count should be 1', function () {\n      Likes.remove('like1');\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.all, 0);\n    });\n    it('filtered count should be 1', function () {\n      var post = Posts.findOne('post1');\n      assert.strictEqual(post._likes.sweden, 0);\n    });\n  });\n});\ndescribe('cacheField', function () {\n  describe('Insert document', function () {\n    it('default transform field should be correct', function (done) {\n      Users.insert({\n        _id: 'simon',\n        username: 'Simon89',\n        profile: {\n          first_name: 'Simon',\n          last_name: 'Herteby'\n        }\n      });\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          assert.strictEqual(user._defaultTransform, 'Simon89, Simon, Herteby');\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n    it('custom transform field should be correct', function (done) {\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          compare(user.nested._customTransform, ['Simon89', 'Simon', 'Herteby']);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('Update document', function () {\n    it('default transform field should be correct', function (done) {\n      Users.update('simon', {\n        $set: {\n          profile: {\n            first_name: 'Karl',\n            last_name: 'Svensson'\n          }\n        }\n      });\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          assert.strictEqual(user._defaultTransform, 'Simon89, Karl, Svensson');\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n    it('custom transform field should be correct', function (done) {\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          compare(user.nested._customTransform, ['Simon89', 'Karl', 'Svensson']);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('Unset field', function () {\n    it('default transform field should be correct', function (done) {\n      Users.update('simon', {\n        $unset: {\n          username: 1\n        }\n      });\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          assert.strictEqual(user._defaultTransform, 'Karl, Svensson');\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n    it('custom transform field should be correct', function (done) {\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          compare(user.nested._customTransform, [null, 'Karl', 'Svensson']);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('Unset nested field', function () {\n    it('default transform field should be correct', function (done) {\n      Users.update('simon', {\n        $unset: {\n          'profile.first_name': 1\n        }\n      });\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          assert.strictEqual(user._defaultTransform, 'Svensson');\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n    it('custom transform field should be correct', function (done) {\n      Meteor.setTimeout(function () {\n        var user = Users.findOne('simon');\n\n        try {\n          compare(user.nested._customTransform, [null, null, 'Svensson']);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n}); //Run the same tests but with nested fields\n//This needs to be put in a test due to async tests\n\ndescribe('Prepare for next tests', function () {\n  it('clear collections', function () {\n    Posts.remove({});\n    Comments.remove({});\n    Users.remove({});\n    Images.remove({});\n    Tags.remove({});\n    Likes.remove({});\n  });\n  it('set up caches', function () {\n    Posts.cache({\n      type: 'one',\n      collection: Users,\n      cacheField: 'caches._author',\n      referenceField: 'nested.authorId',\n      fields: {\n        username: 1,\n        profile: {\n          first_name: 1,\n          last_name: 1\n        }\n      }\n    });\n    Posts.cache({\n      type: 'inversed',\n      collection: Comments,\n      cacheField: 'caches._comments',\n      referenceField: 'nested.postId',\n      fields: {\n        message: 1\n      }\n    });\n    Posts.cache({\n      type: 'many',\n      collection: Images,\n      cacheField: 'caches._images',\n      referenceField: 'nested.images:_id',\n      fields: {\n        filename: 1\n      }\n    });\n    Posts.cache({\n      type: 'many-inversed',\n      collection: Tags,\n      cacheField: 'caches._tags',\n      referenceField: 'nested.postIds:_id',\n      fields: {\n        name: 1\n      }\n    });\n    Posts.cacheCount({\n      collection: Likes,\n      cacheField: 'caches._likes.all',\n      referenceField: 'nested.postId'\n    });\n    Posts.cacheCount({\n      collection: Likes,\n      cacheField: 'caches._likes.sweden',\n      referenceField: 'nested.postId',\n      selector: {\n        country: 'Sweden'\n      }\n    });\n  });\n});\ndescribe('Same tests with nested referenceFields and cacheFields', function () {\n  describe('Insert parent - no children', function () {\n    it('one cache should not exist', function () {\n      Posts.insert({\n        _id: 'post1',\n        nested: {\n          authorId: 'user1',\n          images: [{\n            _id: 'dog'\n          }, {\n            _id: 'cat'\n          }]\n        }\n      });\n      var post = Posts.findOne('post1');\n      assert.isUndefined(post.caches._author);\n    });\n    it('many cache should be empty array', function () {\n      var post = Posts.findOne('post1');\n      assert.isArray(post.caches._images);\n      assert.strictEqual(post.caches._images.length, 0);\n    });\n    it('inverse cache should be empty array', function () {\n      var post = Posts.findOne('post1');\n      assert.isArray(post.caches._comments);\n      assert.strictEqual(post.caches._comments.length, 0);\n    });\n    it('many-inverse cache should be empty array', function () {\n      var post = Posts.findOne('post1');\n      assert.isArray(post.caches._tags);\n      assert.strictEqual(post.caches._tags.length, 0);\n    });\n  });\n  describe('Type: one', function () {\n    describe('Insert child', function () {\n      it('child should be deeply equal except _id', function () {\n        Users.insert({\n          _id: 'user1',\n          username: 'Simon',\n          profile: {\n            first_name: 'Simon',\n            last_name: 'Herteby'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var user = Users.findOne('user1', {\n          fields: {\n            _id: 0,\n            username: 1,\n            profile: 1\n          }\n        });\n        compare(post.caches._author, user);\n      });\n    });\n    describe('Update child', function () {\n      it('cache should have the new values', function () {\n        Users.update('user1', {\n          $set: {\n            'profile.last_name': 'Svensson'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var user = Users.findOne('user1', {\n          fields: {\n            _id: 0,\n            username: 1,\n            profile: 1\n          }\n        });\n        compare(post.caches._author, user);\n      });\n    });\n    describe('Update parent referenceField', function () {\n      it('cache should reflect the new child', function () {\n        Users.insert({\n          _id: 'user2',\n          username: 'Karl',\n          profile: {\n            first_name: 'Karl',\n            last_name: 'Henriksson'\n          }\n        });\n        Posts.update('post1', {\n          $set: {\n            'nested.authorId': 'user2'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var user = Users.findOne('user2', {\n          fields: {\n            _id: 0,\n            username: 1,\n            profile: 1\n          }\n        });\n        compare(post.caches._author, user);\n      });\n    });\n    describe('Remove child', function () {\n      it('cache should be undefined', function () {\n        Users.remove('user2');\n        var post = Posts.findOne('post1');\n        assert.isUndefined(post.caches._author);\n      });\n    });\n    describe('Insert another parent', function () {\n      it('new parent should have child in cache', function () {\n        Posts.insert({\n          _id: 'post2',\n          nested: {\n            authorId: 'user1'\n          }\n        });\n        var post = Posts.findOne('post2');\n        var user = Users.findOne('user1', {\n          fields: {\n            _id: 0,\n            username: 1,\n            profile: 1\n          }\n        });\n        compare(post.caches._author, user);\n      });\n    });\n  });\n  describe('Type: many', function () {\n    describe('Insert child', function () {\n      it('cache should contain child', function () {\n        Images.insert({\n          _id: 'cat',\n          filename: 'cat.jpg'\n        });\n        var post = Posts.findOne('post1');\n        var image = Images.findOne('cat');\n        compare(post.caches._images, [image]);\n      });\n    });\n    describe('Insert another child', function () {\n      it('cache should contain both children', function () {\n        Images.insert({\n          _id: 'dog',\n          filename: 'dog.png'\n        });\n        var post = Posts.findOne('post1');\n        var cat = Images.findOne('cat');\n        var dog = Images.findOne('dog');\n        compare(post.caches._images, [cat, dog]);\n      });\n    });\n    describe('Update children', function () {\n      it('cache should contain both updated children', function () {\n        Images.find().forEach(function (image) {\n          Images.update(image._id, {\n            $set: {\n              filename: image.filename + '.zip'\n            }\n          });\n        });\n        var post = Posts.findOne('post1');\n        var cat = Images.findOne('cat');\n        var dog = Images.findOne('dog');\n        compare(post.caches._images, [cat, dog]);\n      });\n    });\n    describe('Remove child', function () {\n      it('cache should only contain the remaining child', function () {\n        Images.remove('cat');\n        var post = Posts.findOne('post1');\n        var dog = Images.findOne('dog');\n        compare(post.caches._images, [dog]);\n      });\n    });\n    describe('Insert unlinked child', function () {\n      it('cache should not contain the inserted child', function () {\n        Images.insert({\n          _id: 'horse',\n          filename: 'horse.gif'\n        });\n        var post = Posts.findOne('post1');\n        var dog = Images.findOne('dog');\n        compare(post.caches._images, [dog]);\n      });\n    });\n    describe('Add child to parent referenceField', function () {\n      it('cache should contain both children', function () {\n        Posts.update('post1', {\n          $push: {\n            'nested.images': {\n              _id: 'horse'\n            }\n          }\n        });\n        var post = Posts.findOne('post1');\n        var horse = Images.findOne('horse');\n        var dog = Images.findOne('dog');\n        compare(post.caches._images, [dog, horse]);\n      });\n    });\n    describe('Remove child from parent referenceField', function () {\n      it('cache should only contain remaining child', function () {\n        Posts.update('post1', {\n          $pull: {\n            'nested.images': {\n              _id: 'dog'\n            }\n          }\n        });\n        var post = Posts.findOne('post1');\n        var horse = Images.findOne('horse');\n        compare(post.caches._images, [horse]);\n      });\n    });\n    describe('Insert another parent', function () {\n      it('cache should have correct children', function () {\n        Posts.insert({\n          _id: 'post3',\n          nested: {\n            images: [{\n              _id: 'dog'\n            }, {\n              _id: 'horse'\n            }]\n          }\n        });\n        var post = Posts.findOne('post3');\n        var dog = Images.findOne('dog');\n        var horse = Images.findOne('horse');\n        compare(post.caches._images, [dog, horse]);\n      });\n    });\n  });\n  describe('Type: inversed', function () {\n    describe('Insert child', function () {\n      it('cache should contain child', function () {\n        Comments.insert({\n          _id: 'comment1',\n          message: 'Hello world!',\n          nested: {\n            postId: 'post1'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var comment = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment]);\n      });\n    });\n    describe('Insert another child', function () {\n      it('cache should contain both children', function () {\n        Comments.insert({\n          _id: 'comment2',\n          message: 'Hello world!',\n          nested: {\n            postId: 'post1'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment2 = Comments.findOne('comment2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1, comment2]);\n      });\n    });\n    describe('Insert unlinked child', function () {\n      it('cache should not contain new child', function () {\n        Comments.insert({\n          _id: 'comment3',\n          message: 'Hello world again!'\n        });\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment2 = Comments.findOne('comment2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1, comment2]);\n      });\n    });\n    describe('Update child referenceField', function () {\n      it('cache should contain new and previous children', function () {\n        Comments.update('comment3', {\n          $set: {\n            'nested.postId': 'post1'\n          }\n        });\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment2 = Comments.findOne('comment2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment3 = Comments.findOne('comment3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1, comment2, comment3]);\n      });\n    });\n    describe('Update children', function () {\n      it('cache should contain updated children', function () {\n        Comments.update({}, {\n          $set: {\n            message: 'Goodbye world!'\n          }\n        }, {\n          multi: true\n        });\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment2 = Comments.findOne('comment2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment3 = Comments.findOne('comment3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1, comment2, comment3]);\n      });\n    });\n    describe('Remove child', function () {\n      it('cache should only contain remaining children', function () {\n        Comments.remove('comment2');\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var comment3 = Comments.findOne('comment3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1, comment3]);\n      });\n    });\n    describe('Remove parent from child referenceField', function () {\n      it('cache should only contain remaining child', function () {\n        Comments.update('comment3', {\n          $unset: {\n            'nested.postId': 1\n          }\n        });\n        var post = Posts.findOne('post1');\n        var comment1 = Comments.findOne('comment1', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._comments, [comment1]);\n      });\n    });\n    describe('Insert another parent', function () {\n      it('cache should contain all children', function () {\n        Comments.update({}, {\n          $set: {\n            'nested.postId': 'post4'\n          }\n        }, {\n          multi: true\n        });\n        Posts.insert({\n          _id: 'post4'\n        });\n        var post = Posts.findOne('post4');\n        var comments = Comments.find({}, {\n          fields: {\n            nested: 0\n          }\n        }).fetch();\n        compare(post.caches._comments, comments);\n      });\n    });\n  });\n  describe('Type: many-inversed', function () {\n    describe('Insert child', function () {\n      it('parent1 should contain child', function () {\n        Tags.insert({\n          _id: 'tag1',\n          name: 'Red',\n          nested: {\n            postIds: [{\n              _id: 'post1'\n            }, {\n              _id: 'post2'\n            }]\n          }\n        });\n        var post1 = Posts.findOne('post1');\n        var tag = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag]);\n      });\n      it('parent2 should contain child', function () {\n        var post2 = Posts.findOne('post2');\n        var tag = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag]);\n      });\n      it('parent3 should not contain child', function () {\n        var post3 = Posts.findOne('post3');\n        compare(post3.caches._tags, []);\n      });\n    });\n    describe('Insert another child', function () {\n      it('parent1 should contain both children', function () {\n        Tags.insert({\n          _id: 'tag2',\n          name: 'Blue',\n          nested: {\n            postIds: [{\n              _id: 'post1'\n            }, {\n              _id: 'post2'\n            }]\n          }\n        });\n        var post1 = Posts.findOne('post1');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag1, tag2]);\n      });\n      it('parent2 should contain both children', function () {\n        var post2 = Posts.findOne('post2');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag1, tag2]);\n      });\n    });\n    describe('Insert unlinked child', function () {\n      it('cache should not contain new child', function () {\n        Tags.insert({\n          _id: 'tag3',\n          name: 'Green'\n        });\n        var post = Posts.findOne('post1');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post.caches._tags, [tag1, tag2]);\n      });\n    });\n    describe('Update child referenceField', function () {\n      it('parent1 should now contain the child', function () {\n        Tags.update('tag3', {\n          $set: {\n            'nested.postIds': [{\n              _id: 'post1'\n            }, {\n              _id: 'post2'\n            }]\n          }\n        });\n        var post1 = Posts.findOne('post1');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag1, tag2, tag3]);\n      });\n      it('parent2 should now contain the child', function () {\n        var post2 = Posts.findOne('post2');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag1, tag2, tag3]);\n      });\n    });\n    describe('Update children', function () {\n      it('parent1 should contain updated children', function () {\n        Tags.find().forEach(function (tag) {\n          Tags.update(tag._id, {\n            $set: {\n              name: 'color-' + tag.name\n            }\n          });\n        });\n        var post1 = Posts.findOne('post1');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag1, tag2, tag3]);\n      });\n      it('parent2 should contain updated children', function () {\n        var post2 = Posts.findOne('post2');\n        var tag1 = Tags.findOne('tag1', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag1, tag2, tag3]);\n      });\n    });\n    describe('Remove child', function () {\n      it('parent1 should only contain remaining children', function () {\n        Tags.remove('tag1');\n        var post1 = Posts.findOne('post1');\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag2, tag3]);\n      });\n      it('parent2 should only contain remaining children', function () {\n        var post2 = Posts.findOne('post2');\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag2, tag3]);\n      });\n    });\n    describe('Remove parent2 from child referenceField', function () {\n      it('parent1 should still contain child', function () {\n        Tags.update('tag3', {\n          $pull: {\n            'nested.postIds': {\n              _id: 'post2'\n            }\n          }\n        });\n        var post1 = Posts.findOne('post1');\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        var tag3 = Tags.findOne('tag3', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post1.caches._tags, [tag2, tag3]);\n      });\n      it('parent2 should not contain child', function () {\n        var post2 = Posts.findOne('post2');\n        var tag2 = Tags.findOne('tag2', {\n          fields: {\n            nested: 0\n          }\n        });\n        compare(post2.caches._tags, [tag2]);\n      });\n    });\n    describe('Insert another parent', function () {\n      it('new parent should contain all children', function () {\n        Tags.update({}, {\n          $push: {\n            'nested.postIds': {\n              _id: 'post5'\n            }\n          }\n        }, {\n          multi: true\n        });\n        Posts.insert({\n          _id: 'post5'\n        });\n        var post = Posts.findOne('post5');\n        var tags = Tags.find({}, {\n          fields: {\n            nested: 0\n          }\n        }).fetch();\n        compare(post.caches._tags, tags);\n      });\n    });\n  });\n  describe('cacheCount', function () {\n    describe('Insert child matching filter', function () {\n      it('unfiltered count should be 1', function () {\n        Likes.insert({\n          _id: 'like1',\n          nested: {\n            postId: 'post1'\n          },\n          country: 'Sweden'\n        });\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.all, 1);\n      });\n      it('filtered count should be 1', function () {\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.sweden, 1);\n      });\n    });\n    describe('Insert child not matching filter', function () {\n      it('unfiltered count should be 2', function () {\n        Likes.insert({\n          _id: 'like2',\n          nested: {\n            postId: 'post1'\n          },\n          country: 'Norway'\n        });\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.all, 2);\n      });\n      it('filtered count should be 1', function () {\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.sweden, 1);\n      });\n    });\n    describe('Insert new parent', function () {\n      it('unfiltered count should be 2', function () {\n        Likes.insert({\n          _id: 'like3',\n          nested: {\n            postId: 'post6'\n          },\n          country: 'Sweden'\n        });\n        Likes.insert({\n          _id: 'like4',\n          nested: {\n            postId: 'post6'\n          }\n        });\n        Posts.insert({\n          _id: 'post6'\n        });\n        var post = Posts.findOne('post6');\n        assert.strictEqual(post.caches._likes.all, 2);\n      });\n      it('filtered count should be 1', function () {\n        var post = Posts.findOne('post6');\n        assert.strictEqual(post.caches._likes.sweden, 1);\n      });\n    });\n    describe('Remove child not matching filter', function () {\n      it('unfiltered count should be 1', function () {\n        Likes.remove('like2');\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.all, 1);\n      });\n      it('filtered count should be 1', function () {\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.sweden, 1);\n      });\n    });\n    describe('Remove child matching filter', function () {\n      it('unfiltered count should be 1', function () {\n        Likes.remove('like1');\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.all, 0);\n      });\n      it('filtered count should be 1', function () {\n        var post = Posts.findOne('post1');\n        assert.strictEqual(post.caches._likes.sweden, 0);\n      });\n    });\n  });\n});\ndescribe('Recursive caching', function () {\n  it('clear collections', function () {\n    Customers.remove({});\n    Bills.remove({});\n    Items.remove({});\n  });\n  it('clear hooks', function () {\n    //Remove all collection hooks so that migration tests work properly\n    _.each([Customers, Bills, Items], function (collection) {\n      collection._hookAspects.insert.after = [];\n      collection._hookAspects.update.after = [];\n      collection._hookAspects.remove.after = [];\n    });\n  });\n  it('set up caches', function () {\n    //Option one\n    Customers.cache({\n      cacheField: '_bills',\n      collection: Bills,\n      type: 'inverse',\n      referenceField: 'customerId',\n      fields: ['_sum', '_items']\n    });\n    Bills.cache({\n      cacheField: '_items',\n      collection: Items,\n      type: 'many',\n      referenceField: 'itemIds',\n      fields: ['name', 'price']\n    }); //Option two\n\n    Customers.cache({\n      cacheField: '_bills2',\n      collection: Bills,\n      type: 'inverse',\n      referenceField: 'customerId',\n      fields: ['itemIds', '_sum']\n    });\n    Customers.cache({\n      cacheField: '_items',\n      collection: Items,\n      type: 'many',\n      referenceField: '_bills2:itemIds',\n      fields: ['name', 'price']\n    });\n    Bills.cacheField({\n      fields: ['_items'],\n      cacheField: '_sum',\n      transform: function (doc) {\n        var price = _.sum(_.map(doc._items, 'price'));\n\n        return price;\n      }\n    });\n  });\n  describe('Insert documents', function () {\n    it('All caches should have correct values', function (done) {\n      Customers.insert({\n        _id: 'customer1'\n      });\n      Bills.insert({\n        _id: 'bill1',\n        customerId: 'customer1',\n        itemIds: ['item1', 'item2']\n      });\n      Bills.insert({\n        _id: 'bill2',\n        customerId: 'customer1',\n        itemIds: ['item3', 'item4']\n      });\n      Items.insert({\n        _id: 'item1',\n        name: 'Muffin',\n        price: 30\n      });\n      Items.insert({\n        _id: 'item2',\n        name: 'Coffee',\n        price: 25\n      });\n      Items.insert({\n        _id: 'item3',\n        name: 'Cake',\n        price: 40\n      });\n      Items.insert({\n        _id: 'item4',\n        name: 'Tea',\n        price: 25\n      });\n      var expected = {\n        _bills: [{\n          _id: 'bill1',\n          _items: [{\n            _id: 'item1',\n            name: 'Muffin',\n            price: 30\n          }, {\n            _id: 'item2',\n            name: 'Coffee',\n            price: 25\n          }],\n          _sum: 55\n        }, {\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill1',\n          _sum: 55,\n          itemIds: ['item1', 'item2']\n        }, {\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item1',\n          name: 'Muffin',\n          price: 30\n        }, {\n          _id: 'item2',\n          name: 'Coffee',\n          price: 25\n        }, {\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(expected, customer);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('update a child', function (done) {\n    it('all caches should be updated with correct values', function (done) {\n      Bills.update('bill1', {\n        $push: {\n          itemIds: 'item3'\n        }\n      });\n      var expected = {\n        _bills: [{\n          _id: 'bill1',\n          _items: [{\n            _id: 'item1',\n            name: 'Muffin',\n            price: 30\n          }, {\n            _id: 'item2',\n            name: 'Coffee',\n            price: 25\n          }, {\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }],\n          _sum: 95\n        }, {\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill1',\n          _sum: 95,\n          itemIds: ['item1', 'item2', 'item3']\n        }, {\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item1',\n          name: 'Muffin',\n          price: 30\n        }, {\n          _id: 'item2',\n          name: 'Coffee',\n          price: 25\n        }, {\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(customer, expected);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('update a grandchild', function (done) {\n    it('all caches should be updated with correct values', function (done) {\n      Items.update('item1', {\n        $set: {\n          price: 15\n        }\n      });\n      var expected = {\n        _bills: [{\n          _id: 'bill1',\n          _items: [{\n            _id: 'item1',\n            name: 'Muffin',\n            price: 15\n          }, {\n            _id: 'item2',\n            name: 'Coffee',\n            price: 25\n          }, {\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }],\n          _sum: 80\n        }, {\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill1',\n          _sum: 80,\n          itemIds: ['item1', 'item2', 'item3']\n        }, {\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item1',\n          name: 'Muffin',\n          price: 15\n        }, {\n          _id: 'item2',\n          name: 'Coffee',\n          price: 25\n        }, {\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(customer, expected);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('remove a grandchild', function (done) {\n    it('all caches should be updated with correct values', function (done) {\n      Items.remove('item2');\n      var expected = {\n        _bills: [{\n          _id: 'bill1',\n          _items: [{\n            _id: 'item1',\n            name: 'Muffin',\n            price: 15\n          }, {\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }],\n          _sum: 55\n        }, {\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill1',\n          _sum: 55,\n          itemIds: ['item1', 'item2', 'item3']\n        }, //item2 will still be in itemIds\n        {\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item1',\n          name: 'Muffin',\n          price: 15\n        }, {\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(customer, expected);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('add a grandchild', function (done) {\n    it('all caches should be updated with correct values', function (done) {\n      Items.insert({\n        _id: 'item2',\n        name: 'Espresso',\n        price: 35\n      });\n      var expected = {\n        _bills: [{\n          _id: 'bill1',\n          _items: [{\n            _id: 'item1',\n            name: 'Muffin',\n            price: 15\n          }, {\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item2',\n            name: 'Espresso',\n            price: 35\n          }],\n          _sum: 90\n        }, {\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill1',\n          _sum: 90,\n          itemIds: ['item1', 'item2', 'item3']\n        }, //item2 will still be in itemIds\n        {\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item1',\n          name: 'Muffin',\n          price: 15\n        }, {\n          _id: 'item2',\n          name: 'Espresso',\n          price: 35\n        }, {\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(customer, expected);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n  describe('remove a child', function (done) {\n    it('all caches should be updated with correct values', function (done) {\n      Bills.remove('bill1');\n      var expected = {\n        _bills: [{\n          _id: 'bill2',\n          _items: [{\n            _id: 'item3',\n            name: 'Cake',\n            price: 40\n          }, {\n            _id: 'item4',\n            name: 'Tea',\n            price: 25\n          }],\n          _sum: 65\n        }],\n        _bills2: [{\n          _id: 'bill2',\n          _sum: 65,\n          itemIds: ['item3', 'item4']\n        }],\n        _items: [{\n          _id: 'item3',\n          name: 'Cake',\n          price: 40\n        }, {\n          _id: 'item4',\n          name: 'Tea',\n          price: 25\n        }]\n      };\n      Meteor.setTimeout(function () {\n        var customer = Customers.findOne('customer1', {\n          fields: {\n            _id: 0\n          }\n        });\n\n        try {\n          compare(customer, expected);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      }, 100);\n    });\n  });\n});","map":{"version":3,"sources":["packages/herteby:denormalize/tests.js"],"names":["Mongo","module","watch","require","v","_","MigrationHistory","migrate","autoMigrate","report","result","expected","path","keys","union","each","isEqual","key","console","log","JSON","stringify","compare","assert","deepEqual","err","Posts","Collection","Comments","Users","Images","Tags","Likes","Customers","Bills","Items","describe","it","remove","collection","_hookAspects","insert","after","update","_id","username","profile","first_name","last_name","cache","type","cacheField","referenceField","fields","message","filename","name","cacheCount","selector","country","transform","doc","get","migrant1","findOne","_defaultTransform","nested","_customTransform","migrant2","migrant3","authorId","imageIds","isUndefined","_author","isArray","_images","strictEqual","length","_comments","_tags","_likes","all","sweden","post","user","$set","image","cat","dog","find","forEach","$push","horse","$pull","postId","comment","comment1","comment2","comment3","multi","$unset","comments","fetch","postIds","post1","tag","post2","post3","tag1","tag2","tag3","tags","done","Meteor","setTimeout","images","caches","price","sum","map","_items","customerId","itemIds","_bills","_sum","_bills2","customer"],"mappings":"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","sourcesContent":["import {Mongo} from 'meteor/mongo'\nimport _ from 'lodash'\nimport {MigrationHistory, migrate, autoMigrate} from './migrations.js'\nfunction report(result, expected, path = ''){\n  let keys = _.union(_.keys(result), _.keys(expected))\n  _.each(keys, key => {\n    if(!_.isEqual(result[key], expected[key])){\n      console.log('MISMATCH:', key)\n      console.log('Expected:', JSON.stringify(expected[key], null, ' '))\n      console.log('     Got:', JSON.stringify(result[key], null, ' '))\n    }\n  })\n}\nfunction compare(result, expected){\n  try{\n    assert.deepEqual(result, expected)\n  } catch(err){\n    report(result, expected)\n    throw err\n  }  \n}\n\n\nPosts = new Mongo.Collection('posts') //parent\nComments = new Mongo.Collection('comments') //inversed\nUsers = new Mongo.Collection('users') //single\nImages = new Mongo.Collection('images') //many\nTags = new Mongo.Collection('tags') //many-inversed\nLikes = new Mongo.Collection('likes') // count\nCustomers = new Mongo.Collection('customers') //recursive caches\nBills = new Mongo.Collection('bills') //recursive caches\nItems = new Mongo.Collection('items') //recursive caches\n\n\n\ndescribe('setup', function(){\n  it('clear collections', function(){\n    Posts.remove({})\n    Comments.remove({})\n    Users.remove({})\n    Images.remove({})\n    Tags.remove({})\n    Likes.remove({})\n    MigrationHistory.remove({})\n  })\n  it('clear hooks', function(){\n    //Remove all collection hooks so that migration tests work properly\n    _.each([Posts, Comments, Users, Images, Tags, Likes], collection => {\n      collection._hookAspects.insert.after = []\n      collection._hookAspects.update.after = []\n      collection._hookAspects.remove.after = []\n    })\n  })\n  it('insert migrants', function(){\n    //These users inserted before the caches have been declared, so they will need to be migrated\n    Users.insert({\n      _id:'migrant1',\n      username:'Simon',\n      profile:{\n        first_name:'Simon',\n        last_name:'Herteby'\n      }\n    })\n    Users.insert({\n      _id:'migrant2',\n      username:'bill_gates@microsoft.com',\n      profile:{\n        first_name:'Bill',\n        last_name:'Gates'\n      }\n    })\n    Users.insert({\n      _id:'migrant3',\n      username:'steve_jobs@apple.com',\n      profile:{\n        first_name:'Steve',\n        last_name:'Jobs'\n      }\n    })\n  })\n  it('Set up caches', function(){\n    Posts.cache({\n      type:'one',\n      collection:Users,\n      cacheField:'_author',\n      referenceField:'authorId',\n      fields:{\n        username:1, \n        profile:{\n          first_name:1,\n          last_name:1\n        }\n      },\n    })\n    Posts.cache({\n      type:'inversed',\n      collection:Comments,\n      cacheField:'_comments',\n      referenceField:'postId',\n      fields:{message:1},\n    })\n    Posts.cache({\n      type:'many',\n      collection:Images,\n      cacheField:'_images',\n      referenceField:'imageIds',\n      fields:{filename:1}\n    })\n    Posts.cache({\n      type:'many-inversed',\n      collection:Tags,\n      cacheField:'_tags',\n      referenceField:'postIds',\n      fields:{name:1}\n    })\n    Posts.cacheCount({\n      collection:Likes,\n      cacheField:'_likes.all',\n      referenceField:'postId'\n    })\n    Posts.cacheCount({\n      collection:Likes,\n      cacheField:'_likes.sweden',\n      referenceField:'postId',\n      selector:{country:'Sweden'}\n    })\n    Users.cacheField({\n      cacheField:'_defaultTransform',\n      fields:['username', 'profile.first_name', 'profile.last_name']\n    })\n    Users.cacheField({\n      cacheField:'nested._customTransform',\n      fields:['username', 'profile.first_name', 'profile.last_name'],\n      transform(doc){\n        return [doc.username, _.get(doc, 'profile.first_name'), _.get(doc, 'profile.last_name')]\n      }\n    })\n  })\n})\n\ndescribe('Migration', function(){\n  describe('migrate()', function(){\n    it('user should not have cache before migration', function(){\n      let migrant1 = Users.findOne('migrant1')\n      compare(migrant1, {\n        _id:'migrant1',\n        username:'Simon',\n        profile:{\n          first_name:'Simon',\n          last_name:'Herteby'\n        }\n      })      \n    })\n    it('migrated document should have the correct caches', function(){\n      migrate('users', '_defaultTransform', 'migrant1')\n      migrate('users', 'nested._customTransform', {_id:'migrant1'})\n      let migrant1 = Users.findOne('migrant1')\n      compare(migrant1, {\n        _id:'migrant1',\n        username:'Simon',\n        profile:{\n          first_name:'Simon',\n          last_name:'Herteby'\n        },\n        _defaultTransform:'Simon, Simon, Herteby',\n        nested:{_customTransform:['Simon', 'Simon', 'Herteby']}\n      })\n    })\n    it('documents not matching selector should not have caches', function(){\n      let migrant2 = Users.findOne('migrant2')\n      let migrant3 = Users.findOne('migrant3')\n      compare(migrant2, {\n        _id:'migrant2',\n        username:'bill_gates@microsoft.com',\n        profile:{\n          first_name:'Bill',\n          last_name:'Gates'\n        }\n      })\n      compare(migrant3, {\n        _id:'migrant3',\n        username:'steve_jobs@apple.com',\n        profile:{\n          first_name:'Steve',\n          last_name:'Jobs'\n        }\n      })   \n    })\n  })\n  describe('autoMigrate()', function(){\n    it('migrated documents should have the correct caches', function(){\n      autoMigrate()\n      console.log(\"(Don't worry about the console log saying 'migrated 0 docs' a bunch of times. That is correct.)\")\n      let migrant2 = Users.findOne('migrant2')\n      let migrant3 = Users.findOne('migrant3')\n      compare(migrant2, {\n        _id:'migrant2',\n        username:'bill_gates@microsoft.com',\n        profile:{\n          first_name:'Bill',\n          last_name:'Gates'\n        },\n        _defaultTransform:'bill_gates@microsoft.com, Bill, Gates',\n        nested:{_customTransform:['bill_gates@microsoft.com', 'Bill', 'Gates']}\n      })\n      compare(migrant3, {\n        _id:'migrant3',\n        username:'steve_jobs@apple.com',\n        profile:{\n          first_name:'Steve',\n          last_name:'Jobs'\n        },\n        _defaultTransform:'steve_jobs@apple.com, Steve, Jobs',\n        nested:{_customTransform:['steve_jobs@apple.com', 'Steve', 'Jobs']}\n      })\n    })\n  })\n})\n\ndescribe('Insert parent - no children', function(){\n  it('one cache should not exist', function(){\n    Posts.insert({\n      _id:'post1',\n      authorId:'user1',\n      imageIds:['dog', 'cat']\n    })\n    assert.isUndefined(Posts.findOne('post1')._author)\n  })\n  it('many cache should be empty array', function(){\n    assert.isArray(Posts.findOne('post1')._images)\n    assert.strictEqual(Posts.findOne('post1')._images.length, 0)\n  })\n  it('inversed cache should be empty array', function(){\n    assert.isArray(Posts.findOne('post1')._comments)\n    assert.strictEqual(Posts.findOne('post1')._comments.length, 0)\n  })\n  it('many-inversed cache should be empty array', function(){\n    assert.isArray(Posts.findOne('post1')._tags)\n    assert.strictEqual(Posts.findOne('post1')._tags.length, 0)\n  })\n  it('unfiltered count should be 0', function(){\n    assert.strictEqual(Posts.findOne('post1')._likes.all, 0)\n  })\n  it('filtered count should be 0', function(){\n    assert.strictEqual(Posts.findOne('post1')._likes.sweden, 0)\n  })\n})\ndescribe('Type: one', function(){\n  describe('Insert child', function(){\n    it('child should be deeply equal except _id', function(){\n      Users.insert({\n        _id:'user1',\n        username:'Simon',\n        profile:{\n          first_name:'Simon',\n          last_name:'Herteby'\n        }\n      })\n      let post = Posts.findOne('post1')\n      let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n      compare(post._author, user)\n    })\n  })\n  describe('Update child', function(){\n    it('cache should have the new values', function(){\n      Users.update('user1', {$set:{'profile.last_name':'Svensson'}})\n      let post = Posts.findOne('post1')\n      let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n      compare(post._author, user)\n    })\n  })\n  \n  describe('Update parent referenceField', function(){\n    it('cache should reflect the new child', function(){\n      Users.insert({\n        _id:'user2',\n        username:'Karl',\n        profile:{\n          first_name:'Karl',\n          last_name:'Henriksson'\n        }\n      })\n      Posts.update('post1', {$set:{authorId:'user2'}})\n      let post = Posts.findOne('post1')\n      let user = Users.findOne('user2', {fields:{_id:0, username:1, profile:1}})\n      compare(post._author, user)\n    })\n  })\n  describe('Remove child', function(){\n    it('cache should be undefined', function(){\n      Users.remove('user2')\n      let post = Posts.findOne('post1')\n      assert.isUndefined(post._author)\n    })\n  })\n  describe('Insert another parent', function(){ \n    it('new parent should have child in cache', function(){\n      Posts.insert({\n        _id:'post2',\n        authorId:'user1'\n      })\n      let post = Posts.findOne('post2')\n      let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n      compare(post._author, user)\n    })\n  })\n})\n\n\ndescribe('Type: many', function(){\n  describe('Insert child', function(){\n    it('cache should contain child', function(){\n      Images.insert({\n        _id:'cat',\n        filename:'cat.jpg'\n      })\n      let post = Posts.findOne('post1')\n      let image = Images.findOne('cat')\n      compare(post._images, [image])\n    })\n  })\n  describe('Insert another child', function(){\n    it('cache should contain both children', function(){\n      Images.insert({\n        _id:'dog',\n        filename:'dog.png'\n      })\n      let post = Posts.findOne('post1')\n      let cat = Images.findOne('cat')\n      let dog = Images.findOne('dog')\n      compare(post._images, [cat, dog])\n    })\n  })\n  describe('Update children', function(){\n    it('cache should contain both updated children', function(){\n      Images.find().forEach(image => {\n        Images.update(image._id, {$set:{filename:image.filename + '.zip'}})\n      })\n      let post = Posts.findOne('post1')\n      let cat = Images.findOne('cat')\n      let dog = Images.findOne('dog')\n      compare(post._images, [cat, dog])\n    })\n  })\n  describe('Remove child', function(){\n    it('cache should only contain the remaining child', function(){\n      Images.remove('cat')\n      let post = Posts.findOne('post1')\n      let dog = Images.findOne('dog')\n      compare(post._images, [dog])\n    })\n  })\n  describe('Insert unlinked child', function(){\n    it('cache should not contain the inserted child', function(){\n      Images.insert({\n        _id:'horse',\n        filename:'horse.gif'\n      })\n      let post = Posts.findOne('post1')\n      let dog = Images.findOne('dog')\n      compare(post._images, [dog])\n    })\n  })\n  describe('Add child to parent referenceField', function(){\n    it('cache should contain both children', function(){\n      Posts.update('post1', {$push:{imageIds:'horse'}})\n      let post = Posts.findOne('post1')\n      let horse = Images.findOne('horse')\n      let dog = Images.findOne('dog')\n      compare(post._images, [dog, horse])\n    })\n  })\n  describe('Remove child from parent referenceField', function(){\n    it('cache should only contain remaining child', function(){\n      Posts.update('post1', {$pull:{imageIds:'dog'}})\n      let post = Posts.findOne('post1')\n      let horse = Images.findOne('horse')\n      compare(post._images, [horse])\n    })\n  })\n  describe('Insert another parent', function(){\n    it('cache should have correct children', function(){\n      Posts.insert({\n        _id:'post3',\n        imageIds:['dog', 'horse']\n      })\n      let post = Posts.findOne('post3')\n      let dog = Images.findOne('dog')\n      let horse = Images.findOne('horse')\n      compare(post._images, [dog, horse])\n    })\n  })\n})\n\n\ndescribe('Type: inversed', function(){\n  describe('Insert child', function(){\n    it('cache should contain child', function(){\n      Comments.insert({\n        _id:'comment1',\n        message:'Hello world!',\n        postId:'post1'\n      })\n      let post = Posts.findOne('post1')\n      let comment = Comments.findOne('comment1', {fields:{postId:0}})\n      compare(post._comments, [comment])\n    })\n  })\n  describe('Insert another child', function(){\n    it('cache should contain both children', function(){\n      Comments.insert({\n        _id:'comment2',\n        message:'Hello world!',\n        postId:'post1'\n      })\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      let comment2 = Comments.findOne('comment2', {fields:{postId:0}})\n      compare(post._comments, [comment1, comment2])\n    })\n  })\n  describe('Insert unlinked child', function(){\n    it('cache should not contain new child', function(){\n      Comments.insert({\n        _id:'comment3',\n        message:'Hello world again!',\n      })\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      let comment2 = Comments.findOne('comment2', {fields:{postId:0}})\n      compare(post._comments, [comment1, comment2])\n    })\n  })\n  describe('Update child referenceField', function(){\n    it('cache should contain new and previous children', function(){\n      Comments.update('comment3', {$set:{postId:'post1'}})\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      let comment2 = Comments.findOne('comment2', {fields:{postId:0}})\n      let comment3 = Comments.findOne('comment3', {fields:{postId:0}})\n      compare(post._comments, [comment1, comment2, comment3])\n    })\n  })\n  describe('Update children', function(){\n    it('cache should contain updated children', function(){\n      Comments.update({}, {$set:{message:'Goodbye world!'}}, {multi:true})\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      let comment2 = Comments.findOne('comment2', {fields:{postId:0}})\n      let comment3 = Comments.findOne('comment3', {fields:{postId:0}})\n      compare(post._comments, [comment1, comment2, comment3])\n    })\n  })\n  describe('Remove child', function(){\n    it('cache should only contain remaining children', function(){\n      Comments.remove('comment2')\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      let comment3 = Comments.findOne('comment3', {fields:{postId:0}})\n      compare(post._comments, [comment1, comment3])\n    })\n  })\n  describe('Remove parent from child referenceField', function(){\n    it('cache should only contain remaining child', function(){\n      Comments.update('comment3', {$unset:{postId:1}})\n      let post = Posts.findOne('post1')\n      let comment1 = Comments.findOne('comment1', {fields:{postId:0}})\n      compare(post._comments, [comment1])\n    })\n  })\n  describe('Insert another parent', function(){\n    it('cache should contain all children', function(){\n      Comments.update({}, {$set:{postId:'post4'}}, {multi:true})\n      Posts.insert({\n        _id:'post4'\n      })\n      let post = Posts.findOne('post4')\n      let comments = Comments.find({}, {fields:{postId:0}}).fetch()\n      compare(post._comments, comments)\n    })\n  })\n})\n\n\ndescribe('Type: many-inversed', function(){\n  describe('Insert child', function(){\n    it('parent1 should contain child', function(){\n      Tags.insert({\n        _id:'tag1',\n        name:'Red',\n        postIds:['post1', 'post2']\n      })\n      let post1 = Posts.findOne('post1')\n      let tag = Tags.findOne('tag1', {fields:{postIds:0}})\n      compare(post1._tags, [tag])\n    })\n    it('parent2 should contain child', function(){\n      let post2 = Posts.findOne('post2')\n      let tag = Tags.findOne('tag1', {fields:{postIds:0}})\n      compare(post2._tags, [tag])\n    })\n    it('parent3 should not contain child', function(){\n      let post3 = Posts.findOne('post3')\n      compare(post3._tags, [])\n    })\n  })\n  describe('Insert another child', function(){\n    it('parent1 should contain both children', function(){\n      Tags.insert({\n        _id:'tag2',\n        name:'Blue',\n        postIds:['post1', 'post2']\n      })\n      let post1 = Posts.findOne('post1')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      compare(post1._tags, [tag1, tag2])\n    })\n    it('parent2 should contain both children', function(){\n      let post2 = Posts.findOne('post1')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      compare(post2._tags, [tag1, tag2])\n    })\n  })\n  describe('Insert unlinked child', function(){\n    it('cache should not contain new child', function(){\n      Tags.insert({\n        _id:'tag3',\n        name:'Green'\n      })\n      let post = Posts.findOne('post1')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      compare(post._tags, [tag1, tag2])\n    })\n  })\n  describe('Update child referenceField', function(){\n    it('parent1 should now contain the child', function(){\n      Tags.update('tag3', {$set:{'postIds':['post1', 'post2']}})\n      let post1 = Posts.findOne('post1')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post1._tags, [tag1, tag2, tag3])\n    })\n    it('parent2 should now contain the child', function(){\n      let post2 = Posts.findOne('post2')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post2._tags, [tag1, tag2, tag3])\n    })\n  })\n  describe('Update child referenceField', function(){\n    it('parent1 should contain updated children', function(){\n      Tags.find().forEach(tag => {\n        Tags.update(tag._id, {$set:{name:'color-' + tag.name}})\n      })\n      let post1 = Posts.findOne('post1')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post1._tags, [tag1, tag2, tag3])\n    })\n    it('parent2 should contain updated children', function(){\n      let post2 = Posts.findOne('post2')\n      let tag1 = Tags.findOne('tag1', {fields:{postIds:0}})\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post2._tags, [tag1, tag2, tag3])\n    })\n  })\n  describe('Remove child', function(){\n    it('parent1 should only contain remaining children', function(){\n      Tags.remove('tag1')\n      let post1 = Posts.findOne('post1')\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post1._tags, [tag2, tag3])\n    })\n    it('parent2 should only contain remaining children', function(){\n      let post2 = Posts.findOne('post2')\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post2._tags, [tag2, tag3])\n    })\n  })\n  describe('Remove parent2 from child referenceField', function(){\n    it('parent1 should still contain child', function(){\n      Tags.update('tag3', {$pull:{postIds:'post2'}})\n      let post1 = Posts.findOne('post1')\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      let tag3 = Tags.findOne('tag3', {fields:{postIds:0}})\n      compare(post1._tags, [tag2, tag3])\n    })\n    it('parent2 should not contain child', function(){\n      let post2 = Posts.findOne('post2')\n      let tag2 = Tags.findOne('tag2', {fields:{postIds:0}})\n      compare(post2._tags, [tag2])\n    })\n  })\n  describe('Insert another parent', function(){\n    it('new parent should contain all children', function(){\n      Tags.update({}, {$push:{postIds:'post5'}}, {multi:true})\n      Posts.insert({\n        _id:'post5'\n      })\n      let post = Posts.findOne('post5')\n      let tags = Tags.find({}, {fields:{postIds:0}}).fetch()\n      compare(post._tags, tags)\n    })\n  })\n})\n\ndescribe('cacheCount', function(){\n  describe('Insert child matching filter', function(){\n    it('unfiltered count should be 1', function(){\n      Likes.insert({\n        _id:'like1',\n        postId:'post1',\n        country:'Sweden'\n      })\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.all, 1)\n    })\n    it('filtered count should be 1', function(){\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.sweden, 1)\n    })\n  })\n  describe('Insert child not matching filter', function(){\n    it('unfiltered count should be 2', function(){\n      Likes.insert({\n        _id:'like2',\n        postId:'post1',\n        country:'Norway'\n      })\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.all, 2)\n    })\n    it('filtered count should be 1', function(){\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.sweden, 1)\n    })\n  })\n  describe('Insert new parent', function(){\n    it('unfiltered count should be 2', function(){\n      Likes.insert({\n        _id:'like3',\n        postId:'post6',\n        country:'Sweden'\n      })\n      Likes.insert({\n        _id:'like4',\n        postId:'post6',\n      })\n      Posts.insert({_id:'post6'})\n      let post = Posts.findOne('post6')\n      assert.strictEqual(post._likes.all, 2)\n    })\n    it('filtered count should be 1', function(){\n      let post = Posts.findOne('post6')\n      assert.strictEqual(post._likes.sweden, 1)\n    })\n  })\n  describe('Remove child not matching filter', function(){\n    it('unfiltered count should be 1', function(){\n      Likes.remove('like2')\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.all, 1)\n    })\n    it('filtered count should be 1', function(){\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.sweden, 1)\n    })\n  })\n  describe('Remove child matching filter', function(){\n\n    it('unfiltered count should be 1', function(){\n      Likes.remove('like1')\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.all, 0)\n    })\n    it('filtered count should be 1', function(){\n      let post = Posts.findOne('post1')\n      assert.strictEqual(post._likes.sweden, 0)\n    })\n  })\n})\n\ndescribe('cacheField', function(){\n  describe('Insert document', function(){\n    it('default transform field should be correct', function(done){\n      Users.insert({\n        _id:'simon',\n        username:'Simon89',\n        profile:{\n          first_name:'Simon',\n          last_name:'Herteby'\n        }\n      })\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          assert.strictEqual(user._defaultTransform, 'Simon89, Simon, Herteby')\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n    it('custom transform field should be correct', function(done){\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          compare(user.nested._customTransform, ['Simon89', 'Simon', 'Herteby'])\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('Update document', function(){\n    it('default transform field should be correct', function(done){\n      Users.update('simon', {$set:{profile:{first_name:'Karl', last_name:'Svensson'}}})\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          assert.strictEqual(user._defaultTransform, 'Simon89, Karl, Svensson')\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n    it('custom transform field should be correct', function(done){\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          compare(user.nested._customTransform, ['Simon89', 'Karl', 'Svensson'])\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('Unset field', function(){\n    it('default transform field should be correct', function(done){\n      Users.update('simon', {$unset:{username:1}})\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          assert.strictEqual(user._defaultTransform, 'Karl, Svensson')\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n    it('custom transform field should be correct', function(done){\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          compare(user.nested._customTransform, [null, 'Karl', 'Svensson'])\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('Unset nested field', function(){\n    it('default transform field should be correct', function(done){\n      Users.update('simon', {$unset:{'profile.first_name':1}})\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          assert.strictEqual(user._defaultTransform, 'Svensson')\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n    it('custom transform field should be correct', function(done){\n      Meteor.setTimeout(function(){\n        let user = Users.findOne('simon')\n        try {\n          compare(user.nested._customTransform, [null, null, 'Svensson'])\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n})\n\n//Run the same tests but with nested fields\n\n//This needs to be put in a test due to async tests\ndescribe('Prepare for next tests', function(){\n  it('clear collections', function(){\n    Posts.remove({})\n    Comments.remove({})\n    Users.remove({})\n    Images.remove({})\n    Tags.remove({})\n    Likes.remove({})\n  })\n  it('set up caches', function(){\n    Posts.cache({\n      type:'one',\n      collection:Users,\n      cacheField:'caches._author',\n      referenceField:'nested.authorId',\n      fields:{\n        username:1, \n        profile:{\n          first_name:1,\n          last_name:1\n        }\n      },\n    })\n    Posts.cache({\n      type:'inversed',\n      collection:Comments,\n      cacheField:'caches._comments',\n      referenceField:'nested.postId',\n      fields:{message:1},\n    })\n    Posts.cache({\n      type:'many',\n      collection:Images,\n      cacheField:'caches._images',\n      referenceField:'nested.images:_id',\n      fields:{filename:1}\n    })\n    Posts.cache({\n      type:'many-inversed',\n      collection:Tags,\n      cacheField:'caches._tags',\n      referenceField:'nested.postIds:_id',\n      fields:{name:1}\n    })\n    Posts.cacheCount({\n      collection:Likes,\n      cacheField:'caches._likes.all',\n      referenceField:'nested.postId'\n    })\n    Posts.cacheCount({\n      collection:Likes,\n      cacheField:'caches._likes.sweden',\n      referenceField:'nested.postId',\n      selector:{country:'Sweden'}\n    })\n  })\n})\n\ndescribe('Same tests with nested referenceFields and cacheFields', function(){\n  describe('Insert parent - no children', function(){\n    it('one cache should not exist', function(){\n      Posts.insert({\n        _id:'post1',\n        nested:{\n          authorId:'user1',\n          images:[{_id:'dog'}, {_id:'cat'}]\n        }\n      })\n      let post = Posts.findOne('post1')\n      assert.isUndefined(post.caches._author)\n    })\n    it('many cache should be empty array', function(){\n      let post = Posts.findOne('post1')\n      assert.isArray(post.caches._images)\n      assert.strictEqual(post.caches._images.length, 0)\n    })\n    it('inverse cache should be empty array', function(){\n      let post = Posts.findOne('post1')\n      assert.isArray(post.caches._comments)\n      assert.strictEqual(post.caches._comments.length, 0)\n    })\n    it('many-inverse cache should be empty array', function(){\n      let post = Posts.findOne('post1')\n      assert.isArray(post.caches._tags)\n      assert.strictEqual(post.caches._tags.length, 0)\n    })  \n  })\n  describe('Type: one', function(){\n    describe('Insert child', function(){\n      it('child should be deeply equal except _id', function(){\n        Users.insert({\n          _id:'user1',\n          username:'Simon',\n          profile:{\n            first_name:'Simon',\n            last_name:'Herteby'\n          }\n        })\n        let post = Posts.findOne('post1')\n        let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n        compare(post.caches._author, user)\n      })\n    })\n    describe('Update child', function(){\n      it('cache should have the new values', function(){\n        Users.update('user1', {$set:{'profile.last_name':'Svensson'}})\n        let post = Posts.findOne('post1')\n        let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n        compare(post.caches._author, user)\n      })\n    })\n\n    describe('Update parent referenceField', function(){\n      it('cache should reflect the new child', function(){\n        Users.insert({\n          _id:'user2',\n          username:'Karl',\n          profile:{\n            first_name:'Karl',\n            last_name:'Henriksson'\n          }\n        })\n        Posts.update('post1', {$set:{'nested.authorId':'user2'}})\n        let post = Posts.findOne('post1')\n        let user = Users.findOne('user2', {fields:{_id:0, username:1, profile:1}})\n        compare(post.caches._author, user)\n      })\n    })\n    describe('Remove child', function(){\n      it('cache should be undefined', function(){\n        Users.remove('user2')\n        let post = Posts.findOne('post1')\n        assert.isUndefined(post.caches._author)\n      })\n    })\n    describe('Insert another parent', function(){\n      it('new parent should have child in cache', function(){\n        Posts.insert({\n          _id:'post2',\n          nested:{authorId:'user1'}\n        })\n        let post = Posts.findOne('post2')\n        let user = Users.findOne('user1', {fields:{_id:0, username:1, profile:1}})\n        compare(post.caches._author, user)\n      })\n    })\n  })\n\n  describe('Type: many', function(){\n    describe('Insert child', function(){\n      it('cache should contain child', function(){\n        Images.insert({\n          _id:'cat',\n          filename:'cat.jpg'\n        })\n        let post = Posts.findOne('post1')\n        let image = Images.findOne('cat')\n        compare(post.caches._images, [image])\n      })\n    })\n    describe('Insert another child', function(){\n      it('cache should contain both children', function(){\n        Images.insert({\n          _id:'dog',\n          filename:'dog.png'\n        })\n        let post = Posts.findOne('post1')\n        let cat = Images.findOne('cat')\n        let dog = Images.findOne('dog')\n        compare(post.caches._images, [cat, dog])\n      })\n    })\n    describe('Update children', function(){\n      it('cache should contain both updated children', function(){\n        Images.find().forEach(image => {\n          Images.update(image._id, {$set:{filename:image.filename + '.zip'}})\n        })\n        let post = Posts.findOne('post1')\n        let cat = Images.findOne('cat')\n        let dog = Images.findOne('dog')\n        compare(post.caches._images, [cat, dog])\n      })\n    })\n    describe('Remove child', function(){\n      it('cache should only contain the remaining child', function(){\n        Images.remove('cat')\n        let post = Posts.findOne('post1')\n        let dog = Images.findOne('dog')\n        compare(post.caches._images, [dog])\n      })\n    })\n    describe('Insert unlinked child', function(){\n      it('cache should not contain the inserted child', function(){\n        Images.insert({\n          _id:'horse',\n          filename:'horse.gif'\n        })\n        let post = Posts.findOne('post1')\n        let dog = Images.findOne('dog')\n        compare(post.caches._images, [dog])\n      })\n    })\n    describe('Add child to parent referenceField', function(){\n      it('cache should contain both children', function(){\n        Posts.update('post1', {$push:{'nested.images':{_id:'horse'}}})\n        let post = Posts.findOne('post1')\n        let horse = Images.findOne('horse')\n        let dog = Images.findOne('dog')\n        compare(post.caches._images, [dog, horse])\n      })\n    })\n    describe('Remove child from parent referenceField', function(){\n      it('cache should only contain remaining child', function(){\n        Posts.update('post1', {$pull:{'nested.images':{_id:'dog'}}})\n        let post = Posts.findOne('post1')\n        let horse = Images.findOne('horse')\n        compare(post.caches._images, [horse])\n      })\n    })\n    describe('Insert another parent', function(){\n      it('cache should have correct children', function(){\n        Posts.insert({\n          _id:'post3',\n          nested:{\n            images:[{_id:'dog'}, {_id:'horse'}]\n          }\n        })\n        let post = Posts.findOne('post3')\n        let dog = Images.findOne('dog')\n        let horse = Images.findOne('horse')\n        compare(post.caches._images, [dog, horse])\n      })\n    })\n  })\n\n  describe('Type: inversed', function(){\n    describe('Insert child', function(){\n      it('cache should contain child', function(){\n        Comments.insert({\n          _id:'comment1',\n          message:'Hello world!',\n          nested:{postId:'post1'}\n        })\n        let post = Posts.findOne('post1')\n        let comment = Comments.findOne('comment1', {fields:{nested:0}})\n        compare(post.caches._comments, [comment])\n      })\n    })\n    describe('Insert another child', function(){\n      it('cache should contain both children', function(){\n        Comments.insert({\n          _id:'comment2',\n          message:'Hello world!',\n          nested:{postId:'post1'}\n        })\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        let comment2 = Comments.findOne('comment2', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1, comment2])\n      })\n    })\n    describe('Insert unlinked child', function(){\n      it('cache should not contain new child', function(){\n        Comments.insert({\n          _id:'comment3',\n          message:'Hello world again!',\n        })\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        let comment2 = Comments.findOne('comment2', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1, comment2])\n      })\n    })\n    describe('Update child referenceField', function(){\n      it('cache should contain new and previous children', function(){\n        Comments.update('comment3', {$set:{'nested.postId':'post1'}})\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        let comment2 = Comments.findOne('comment2', {fields:{nested:0}})\n        let comment3 = Comments.findOne('comment3', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1, comment2, comment3])\n      })\n    })\n    describe('Update children', function(){\n      it('cache should contain updated children', function(){\n        Comments.update({}, {$set:{message:'Goodbye world!'}}, {multi:true})\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        let comment2 = Comments.findOne('comment2', {fields:{nested:0}})\n        let comment3 = Comments.findOne('comment3', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1, comment2, comment3])\n      })\n    })\n    describe('Remove child', function(){\n      it('cache should only contain remaining children', function(){\n        Comments.remove('comment2')\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        let comment3 = Comments.findOne('comment3', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1, comment3])\n      })\n    })\n    describe('Remove parent from child referenceField', function(){\n      it('cache should only contain remaining child', function(){\n        Comments.update('comment3', {$unset:{'nested.postId':1}})\n        let post = Posts.findOne('post1')\n        let comment1 = Comments.findOne('comment1', {fields:{nested:0}})\n        compare(post.caches._comments, [comment1])\n      })\n    })\n    describe('Insert another parent', function(){\n      it('cache should contain all children', function(){\n        Comments.update({}, {$set:{'nested.postId':'post4'}}, {multi:true})\n        Posts.insert({\n          _id:'post4'\n        })\n        let post = Posts.findOne('post4')\n        let comments = Comments.find({}, {fields:{nested:0}}).fetch()\n        compare(post.caches._comments, comments)\n      })\n    })\n  })\n\n  describe('Type: many-inversed', function(){\n    describe('Insert child', function(){\n      it('parent1 should contain child', function(){\n        Tags.insert({\n          _id:'tag1',\n          name:'Red',\n          nested:{postIds:[{_id:'post1'}, {_id:'post2'}]}\n        })\n        let post1 = Posts.findOne('post1')\n        let tag = Tags.findOne('tag1', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag])\n      })\n      it('parent2 should contain child', function(){\n        let post2 = Posts.findOne('post2')\n        let tag = Tags.findOne('tag1', {fields:{nested:0}})\n        compare(post2.caches._tags, [tag])\n      })\n      it('parent3 should not contain child', function(){\n        let post3 = Posts.findOne('post3')\n        compare(post3.caches._tags, [])\n      })\n    })\n    describe('Insert another child', function(){\n      it('parent1 should contain both children', function(){\n        Tags.insert({\n          _id:'tag2',\n          name:'Blue',\n          nested:{postIds:[{_id:'post1'}, {_id:'post2'}]}\n        })\n        let post1 = Posts.findOne('post1')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag1, tag2])\n      })\n      it('parent2 should contain both children', function(){\n        let post2 = Posts.findOne('post2')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        compare(post2.caches._tags, [tag1, tag2])\n      })\n    })\n    describe('Insert unlinked child', function(){\n      it('cache should not contain new child', function(){\n        Tags.insert({\n          _id:'tag3',\n          name:'Green'\n        })\n        let post = Posts.findOne('post1')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        compare(post.caches._tags, [tag1, tag2])\n      })\n    })\n    describe('Update child referenceField', function(){\n      it('parent1 should now contain the child', function(){\n        Tags.update('tag3', {$set:{'nested.postIds':[{_id:'post1'}, {_id:'post2'}]}})\n        let post1 = Posts.findOne('post1')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag1, tag2, tag3])\n      })\n      it('parent2 should now contain the child', function(){\n        let post2 = Posts.findOne('post2')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post2.caches._tags, [tag1, tag2, tag3])\n      })\n    })\n    describe('Update children', function(){\n      it('parent1 should contain updated children', function(){\n        Tags.find().forEach(tag => {\n          Tags.update(tag._id, {$set:{name:'color-' + tag.name}})\n        })\n        let post1 = Posts.findOne('post1')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag1, tag2, tag3])\n      })\n      it('parent2 should contain updated children', function(){\n        let post2 = Posts.findOne('post2')\n        let tag1 = Tags.findOne('tag1', {fields:{nested:0}})\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post2.caches._tags, [tag1, tag2, tag3])\n      })\n    })\n    describe('Remove child', function(){\n      it('parent1 should only contain remaining children', function(){\n        Tags.remove('tag1')\n        let post1 = Posts.findOne('post1')\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag2, tag3])\n      })\n      it('parent2 should only contain remaining children', function(){\n        let post2 = Posts.findOne('post2')\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post2.caches._tags, [tag2, tag3])\n      })\n    })\n    describe('Remove parent2 from child referenceField', function(){\n      it('parent1 should still contain child', function(){\n        Tags.update('tag3', {$pull:{'nested.postIds':{_id:'post2'}}})\n        let post1 = Posts.findOne('post1')\n        let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n        let tag3 = Tags.findOne('tag3', {fields:{nested:0}})\n        compare(post1.caches._tags, [tag2, tag3])\n      })\n      it('parent2 should not contain child', function(){\n       let post2 = Posts.findOne('post2')\n       let tag2 = Tags.findOne('tag2', {fields:{nested:0}})\n       compare(post2.caches._tags, [tag2])\n     })\n    })\n    describe('Insert another parent', function(){\n      it('new parent should contain all children', function(){\n        Tags.update({}, {$push:{'nested.postIds':{_id:'post5'}}}, {multi:true})\n        Posts.insert({\n          _id:'post5'\n        })\n        let post = Posts.findOne('post5')\n        let tags = Tags.find({}, {fields:{nested:0}}).fetch()\n        compare(post.caches._tags, tags)\n      })\n    })\n  })\n  describe('cacheCount', function(){\n    describe('Insert child matching filter', function(){\n      it('unfiltered count should be 1', function(){\n        Likes.insert({\n          _id:'like1',\n          nested:{postId:'post1'},\n          country:'Sweden'\n        })\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.all, 1)\n      })\n      it('filtered count should be 1', function(){\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.sweden, 1)\n      })\n    })\n    describe('Insert child not matching filter', function(){\n      it('unfiltered count should be 2', function(){\n        Likes.insert({\n          _id:'like2',\n          nested:{postId:'post1'},\n          country:'Norway'\n        })\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.all, 2)\n      })\n      it('filtered count should be 1', function(){\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.sweden, 1)\n      })\n    })\n    describe('Insert new parent', function(){\n      it('unfiltered count should be 2', function(){\n        Likes.insert({\n          _id:'like3',\n          nested:{postId:'post6'},\n          country:'Sweden'\n        })\n        Likes.insert({\n          _id:'like4',\n          nested:{postId:'post6'},\n        })\n        Posts.insert({_id:'post6'})\n        let post = Posts.findOne('post6')\n        assert.strictEqual(post.caches._likes.all, 2)\n      })\n      it('filtered count should be 1', function(){\n        let post = Posts.findOne('post6')\n        assert.strictEqual(post.caches._likes.sweden, 1)\n      })\n    })\n    describe('Remove child not matching filter', function(){\n      it('unfiltered count should be 1', function(){\n        Likes.remove('like2')\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.all, 1)\n      })\n      it('filtered count should be 1', function(){\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.sweden, 1)\n      })\n    })\n    describe('Remove child matching filter', function(){\n      it('unfiltered count should be 1', function(){\n        Likes.remove('like1')\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.all, 0)\n      })\n      it('filtered count should be 1', function(){\n        let post = Posts.findOne('post1')\n        assert.strictEqual(post.caches._likes.sweden, 0)\n      })\n    })\n  })\n})\n\n\ndescribe('Recursive caching', function(){\n  it('clear collections', function(){\n    Customers.remove({})\n    Bills.remove({})\n    Items.remove({})\n  })\n  it('clear hooks', function(){\n    //Remove all collection hooks so that migration tests work properly\n    _.each([Customers, Bills, Items], collection => {\n      collection._hookAspects.insert.after = []\n      collection._hookAspects.update.after = []\n      collection._hookAspects.remove.after = []\n    })\n  })\n  it('set up caches', function(){\n    //Option one\n    Customers.cache({\n      cacheField:'_bills',\n      collection:Bills,\n      type:'inverse',\n      referenceField:'customerId',\n      fields:['_sum', '_items']\n    })\n\n    Bills.cache({\n      cacheField:'_items',\n      collection:Items,\n      type:'many',\n      referenceField:'itemIds',\n      fields:['name', 'price']\n    })\n    //Option two\n    Customers.cache({\n      cacheField:'_bills2',\n      collection:Bills,\n      type:'inverse',\n      referenceField:'customerId',\n      fields:['itemIds', '_sum']\n    })\n    Customers.cache({\n      cacheField:'_items',\n      collection:Items,\n      type:'many',\n      referenceField:'_bills2:itemIds',\n      fields:['name', 'price']\n    })\n\n    Bills.cacheField({\n      fields:['_items'],\n      cacheField:'_sum',\n      transform(doc){\n        let price = _.sum(_.map(doc._items, 'price'))\n        return price\n      }\n    })\n  })\n  describe('Insert documents', function(){\n    it('All caches should have correct values', function(done){\n      Customers.insert({\n        _id:'customer1',\n      })\n      Bills.insert({\n        _id:'bill1',\n        customerId:'customer1',\n        itemIds:['item1', 'item2']\n      })\n      Bills.insert({\n        _id:'bill2',\n        customerId:'customer1',\n        itemIds:['item3', 'item4']\n      })\n      Items.insert({\n        _id:'item1',\n        name:'Muffin',\n        price:30\n      })\n      Items.insert({\n        _id:'item2',\n        name:'Coffee',\n        price:25\n      })\n      Items.insert({\n        _id:'item3',\n        name:'Cake',\n        price:40\n      })\n      Items.insert({\n        _id:'item4',\n        name:'Tea',\n        price:25\n      })\n      let expected = {\n        _bills:[\n        {\n          _id:'bill1',\n          _items:[\n          {_id:'item1', name:'Muffin', price:30},\n          {_id:'item2', name:'Coffee', price:25},\n          ],\n          _sum:55\n        },\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n        {_id:'bill1', _sum:55, itemIds:['item1', 'item2']},\n        {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n        ],\n        _items:[\n        {_id:'item1', name:'Muffin', price:30},\n        {_id:'item2', name:'Coffee', price:25},\n        {_id:'item3', name:'Cake', price:40},\n        {_id:'item4', name:'Tea', price:25},\n        ]\n      }\n      Meteor.setTimeout(function(){\n        let customer = Customers.findOne('customer1', {fields:{_id:0}})\n        try{\n          compare(expected, customer)\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('update a child', function(done){\n    it('all caches should be updated with correct values', function(done){\n      Bills.update('bill1', {$push:{itemIds:'item3'}})\n      let expected = {\n        _bills:[\n        {\n          _id:'bill1',\n          _items:[\n          {_id:'item1', name:'Muffin', price:30},\n          {_id:'item2', name:'Coffee', price:25},\n          {_id:'item3', name:'Cake', price:40},\n          ],\n          _sum:95\n        },\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n        {_id:'bill1', _sum:95, itemIds:['item1', 'item2', 'item3']},\n        {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n        ],\n        _items:[\n        {_id:'item1', name:'Muffin', price:30},\n        {_id:'item2', name:'Coffee', price:25},\n        {_id:'item3', name:'Cake', price:40},\n        {_id:'item4', name:'Tea', price:25},\n        ]\n      }\n      Meteor.setTimeout(function(){\n        let customer = Customers.findOne('customer1', {fields:{_id:0}})\n        try{\n          compare(customer, expected)\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('update a grandchild', function(done){\n    it('all caches should be updated with correct values', function(done){\n      Items.update('item1', {$set:{price:15}})\n      let expected = {\n        _bills:[\n        {\n          _id:'bill1',\n          _items:[\n          {_id:'item1', name:'Muffin', price:15},\n          {_id:'item2', name:'Coffee', price:25},\n          {_id:'item3', name:'Cake', price:40},\n          ],\n          _sum:80\n        },\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n        {_id:'bill1', _sum:80, itemIds:['item1', 'item2', 'item3']},\n        {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n        ],\n        _items:[\n        {_id:'item1', name:'Muffin', price:15},\n        {_id:'item2', name:'Coffee', price:25},\n        {_id:'item3', name:'Cake', price:40},\n        {_id:'item4', name:'Tea', price:25},\n        ]\n      }\n      Meteor.setTimeout(function(){\n        let customer = Customers.findOne('customer1', {fields:{_id:0}})\n        try{\n          compare(customer, expected)\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n  describe('remove a grandchild', function(done){\n    it('all caches should be updated with correct values', function(done){\n      Items.remove('item2')\n      let expected = {\n        _bills:[\n        {\n          _id:'bill1',\n          _items:[\n          {_id:'item1', name:'Muffin', price:15},\n          {_id:'item3', name:'Cake', price:40},\n          ],\n          _sum:55\n        },\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n          {_id:'bill1', _sum:55, itemIds:['item1', 'item2', 'item3']}, //item2 will still be in itemIds\n          {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n          ],\n          _items:[\n          {_id:'item1', name:'Muffin', price:15},\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ]\n        }\n        Meteor.setTimeout(function(){\n          let customer = Customers.findOne('customer1', {fields:{_id:0}})\n          try{\n            compare(customer, expected)\n            done()\n          } catch(err){\n            done(err)\n          }\n        }, 100)\n      })\n  })\n  describe('add a grandchild', function(done){\n    it('all caches should be updated with correct values', function(done){\n      Items.insert({\n        _id:'item2',\n        name:'Espresso',\n        price:35\n      })\n      let expected = {\n        _bills:[\n        {\n          _id:'bill1',\n          _items:[\n          {_id:'item1', name:'Muffin', price:15},\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item2', name:'Espresso', price:35},\n          ],\n          _sum:90\n        },\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n          {_id:'bill1', _sum:90, itemIds:['item1', 'item2', 'item3']}, //item2 will still be in itemIds\n          {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n          ],\n          _items:[\n          {_id:'item1', name:'Muffin', price:15},\n          {_id:'item2', name:'Espresso', price:35},\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ]\n        }\n        Meteor.setTimeout(function(){\n          let customer = Customers.findOne('customer1', {fields:{_id:0}})\n          try{\n            compare(customer, expected)\n            done()\n          } catch(err){\n            done(err)\n          }\n        }, 100)\n      })\n  })\n  describe('remove a child', function(done){\n    it('all caches should be updated with correct values', function(done){\n      Bills.remove('bill1')\n      let expected = {\n        _bills:[\n        {\n          _id:'bill2',\n          _items:[\n          {_id:'item3', name:'Cake', price:40},\n          {_id:'item4', name:'Tea', price:25},\n          ],\n          _sum:65\n        }\n        ],\n        _bills2:[\n        {_id:'bill2', _sum:65, itemIds:['item3', 'item4']}\n        ],\n        _items:[\n        {_id:'item3', name:'Cake', price:40},\n        {_id:'item4', name:'Tea', price:25},\n        ]\n      }\n      Meteor.setTimeout(function(){\n        let customer = Customers.findOne('customer1', {fields:{_id:0}})\n        try{\n          compare(customer, expected)\n          done()\n        } catch(err){\n          done(err)\n        }\n      }, 100)\n    })\n  })\n})\n"]},"sourceType":"script","hash":"ed31e737080a345ee7a9eed971d4a28c4c9cf80f"}
