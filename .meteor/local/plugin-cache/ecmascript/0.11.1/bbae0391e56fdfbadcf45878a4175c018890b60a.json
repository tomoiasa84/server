{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js"}},"code":"var check;\nmodule.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  }\n}, 0);\nvar Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 2);\nvar COUNTS_COLLECTION_CLIENT;\nmodule.watch(require(\"./constants\"), {\n  COUNTS_COLLECTION_CLIENT: function (v) {\n    COUNTS_COLLECTION_CLIENT = v;\n  }\n}, 3);\n// XXX: Should this persist between server restarts?\nvar collection = new Mongo.Collection(null);\n/**\n * This method generates a reactive count endpoint (a method and publication) for a collection or named query.\n *\n * @param {String} name - Name of the query or collection\n * @param {Function} getCursor - Takes in the user's session document as an argument, and turns that into a Mongo cursor.\n * @param {Function} getSession - Takes the subscribe method's argument as its parameter. Should enforce any necessary security constraints. The return value of this function is stored in the session document.\n */\n\nmodule.exportDefault(function (name, _ref) {\n  var _Meteor$methods;\n\n  var getCursor = _ref.getCursor,\n      getSession = _ref.getSession;\n  Meteor.methods((_Meteor$methods = {}, _Meteor$methods[name + '.count.subscribe'] = function (paramsOrBody) {\n    var session = getSession.call(this, paramsOrBody);\n    var sessionId = JSON.stringify(session);\n    var existingSession = collection.findOne({\n      session: sessionId,\n      userId: this.userId\n    }); // Try to reuse sessions if the user subscribes multiple times with the same data\n\n    if (existingSession) {\n      return existingSession._id;\n    }\n\n    var token = collection.insert({\n      session: sessionId,\n      query: name,\n      userId: this.userId\n    });\n    return token;\n  }, _Meteor$methods));\n  Meteor.publish(name + '.count', function (token) {\n    check(token, String);\n    var self = this;\n    var request = collection.findOne({\n      _id: token,\n      userId: self.userId\n    });\n\n    if (!request) {\n      throw new Error('no-request', \"You must acquire a request token via the \\\"\" + name + \".count.subscribe\\\" method first.\");\n    }\n\n    request.session = JSON.parse(request.session);\n    var cursor = getCursor.call(this, request); // Start counting\n\n    var count = 0;\n    var isReady = false;\n    var handle = cursor.observe({\n      added: function () {\n        count++;\n        isReady && self.changed(COUNTS_COLLECTION_CLIENT, token, {\n          count: count\n        });\n      },\n      removed: function () {\n        count--;\n        isReady && self.changed(COUNTS_COLLECTION_CLIENT, token, {\n          count: count\n        });\n      }\n    });\n    isReady = true;\n    self.added(COUNTS_COLLECTION_CLIENT, token, {\n      count: count\n    });\n    self.onStop(function () {\n      handle.stop();\n      collection.remove(token);\n    });\n    self.ready();\n  });\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js"],"names":["check","module","watch","require","v","Meteor","Mongo","COUNTS_COLLECTION_CLIENT","collection","Collection","exportDefault","name","getCursor","getSession","methods","paramsOrBody","session","call","sessionId","JSON","stringify","existingSession","findOne","userId","_id","token","insert","query","publish","String","self","request","Error","parse","cursor","count","isReady","handle","observe","added","changed","removed","onStop","stop","remove","ready"],"mappings":"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","sourcesContent":["import { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport { COUNTS_COLLECTION_CLIENT } from './constants';\n\n// XXX: Should this persist between server restarts?\nconst collection = new Mongo.Collection(null);\n\n/**\n * This method generates a reactive count endpoint (a method and publication) for a collection or named query.\n *\n * @param {String} name - Name of the query or collection\n * @param {Function} getCursor - Takes in the user's session document as an argument, and turns that into a Mongo cursor.\n * @param {Function} getSession - Takes the subscribe method's argument as its parameter. Should enforce any necessary security constraints. The return value of this function is stored in the session document.\n */\nexport default (name, { getCursor, getSession }) => {\n    Meteor.methods({\n        [name + '.count.subscribe'](paramsOrBody) {\n            const session = getSession.call(this, paramsOrBody);\n            const sessionId = JSON.stringify(session);\n\n            const existingSession = collection.findOne({\n                session: sessionId,\n                userId: this.userId,\n            });\n\n            // Try to reuse sessions if the user subscribes multiple times with the same data\n            if (existingSession) {\n                return existingSession._id;\n            }\n\n            const token = collection.insert({\n                session: sessionId,\n                query: name,\n                userId: this.userId,\n            });\n\n            return token;\n        },\n    });\n\n    Meteor.publish(name + '.count', function(token) {\n        check(token, String);\n        const self = this;\n        const request = collection.findOne({ _id: token, userId: self.userId });\n\n        if (!request) {\n            throw new Error(\n                'no-request',\n                `You must acquire a request token via the \"${name}.count.subscribe\" method first.`\n            );\n        }\n\n        request.session = JSON.parse(request.session);\n        const cursor = getCursor.call(this, request);\n\n        // Start counting\n        let count = 0;\n\n        let isReady = false;\n        const handle = cursor.observe({\n            added() {\n                count++;\n                isReady &&\n                    self.changed(COUNTS_COLLECTION_CLIENT, token, { count });\n            },\n\n            removed() {\n                count--;\n                isReady &&\n                    self.changed(COUNTS_COLLECTION_CLIENT, token, { count });\n            },\n        });\n\n        isReady = true;\n        self.added(COUNTS_COLLECTION_CLIENT, token, { count });\n\n        self.onStop(() => {\n            handle.stop();\n            collection.remove(token);\n        });\n\n        self.ready();\n    });\n};\n"]},"sourceType":"script","hash":"bbae0391e56fdfbadcf45878a4175c018890b60a"}
