{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar applyProps;\nmodule.watch(require(\"./applyProps.js\"), {\n  \"default\": function (v) {\n    applyProps = v;\n  }\n}, 0);\nvar assembleMetadata, removeLinkStorages, storeOneResults;\nmodule.watch(require(\"./prepareForDelivery\"), {\n  assembleMetadata: function (v) {\n    assembleMetadata = v;\n  },\n  removeLinkStorages: function (v) {\n    removeLinkStorages = v;\n  },\n  storeOneResults: function (v) {\n    storeOneResults = v;\n  }\n}, 1);\nvar prepareForDelivery;\nmodule.watch(require(\"./prepareForDelivery\"), {\n  \"default\": function (v) {\n    prepareForDelivery = v;\n  }\n}, 2);\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n  var _applyProps = applyProps(node),\n      filters = _applyProps.filters,\n      options = _applyProps.options;\n\n  var results = [];\n\n  if (parentObject) {\n    var accessor = node.linker.createLink(parentObject, node.collection);\n\n    if (node.isVirtual) {\n      var _$extend;\n\n      options.fields = options.fields || {};\n\n      _.extend(options.fields, (_$extend = {}, _$extend[node.linkStorageField] = 1, _$extend));\n    }\n\n    results = accessor.find(filters, options).fetch();\n  } else {\n    results = node.collection.find(filters, options).fetch();\n  }\n\n  _.each(node.collectionNodes, function (collectionNode) {\n    _.each(results, function (result) {\n      var _collectionNode$resul;\n\n      var collectionNodeResults = fetch(collectionNode, result);\n      result[collectionNode.linkName] = collectionNodeResults; //delete result[node.linker.linkStorageField];\n\n      /**\n       * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n       * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n       * the results?\n       *\n       * Other possible ways:\n       * - do something like assemble() in storeHypernovaResults\n       * - pass node.results to accessor above and find with sift\n       */\n\n      var currentIds = _.pluck(collectionNode.results, '_id');\n\n      (_collectionNode$resul = collectionNode.results).push.apply(_collectionNode$resul, (0, _toConsumableArray2.default)(collectionNodeResults.filter(function (res) {\n        return !_.contains(currentIds, res._id);\n      })));\n    });\n  });\n\n  return results;\n}\n\nmodule.exportDefault(function (node, params) {\n  node.results = fetch(node);\n  prepareForDelivery(node, params);\n  return node.results;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"],"names":["applyProps","module","watch","require","v","assembleMetadata","removeLinkStorages","storeOneResults","prepareForDelivery","fetch","node","parentObject","filters","options","results","accessor","linker","createLink","collection","isVirtual","fields","_","extend","linkStorageField","find","each","collectionNodes","collectionNodeResults","collectionNode","result","linkName","currentIds","pluck","push","filter","contains","res","_id","exportDefault","params"],"mappings":";;;;AAAA,IAAIA,UAAJ;AAAeC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAAA,uBAASC,CAAT,EAAW;AAACJ,iBAAWI,CAAX;AAAa;AAAzB,CAAxC,EAAmE,CAAnE;AAAsE,IAAIC,gBAAJ,EAAqBC,kBAArB,EAAwCC,eAAxC;AAAwDN,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACE,kBAAD,YAAkBD,CAAlB,EAAoB;AAACC,uBAAiBD,CAAjB;AAAmB,GAAxC;AAAyCE,oBAAzC,YAA4DF,CAA5D,EAA8D;AAACE,yBAAmBF,CAAnB;AAAqB,GAApF;AAAqFG,iBAArF,YAAqGH,CAArG,EAAuG;AAACG,sBAAgBH,CAAhB;AAAkB;AAA1H,CAA7C,EAAyK,CAAzK;AAA4K,IAAII,kBAAJ;AAAuBP,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAAA,uBAASC,CAAT,EAAW;AAACI,yBAAmBJ,CAAnB;AAAqB;AAAjC,CAA7C,EAAgF,CAAhF;;AAIhV;;;;;;;AAOA,SAASK,KAAT,CAAeC,IAAf,EAAqBC,YAArB,EAAmC;AAAA,oBACNX,WAAWU,IAAX,CADM;AAAA,MAC1BE,OAD0B,eAC1BA,OAD0B;AAAA,MACjBC,OADiB,eACjBA,OADiB;;AAG/B,MAAIC,UAAU,EAAd;;AAEA,MAAIH,YAAJ,EAAkB;AACd,QAAII,WAAWL,KAAKM,MAAL,CAAYC,UAAZ,CAAuBN,YAAvB,EAAqCD,KAAKQ,UAA1C,CAAf;;AAEA,QAAIR,KAAKS,SAAT,EAAoB;AAAA;;AAChBN,cAAQO,MAAR,GAAiBP,QAAQO,MAAR,IAAkB,EAAnC;;AACAC,QAAEC,MAAF,CAAST,QAAQO,MAAjB,2BACKV,KAAKa,gBADV,IAC6B,CAD7B;AAGH;;AAEDT,cAAUC,SAASS,IAAT,CAAcZ,OAAd,EAAuBC,OAAvB,EAAgCJ,KAAhC,EAAV;AACH,GAXD,MAWO;AACHK,cAAUJ,KAAKQ,UAAL,CAAgBM,IAAhB,CAAqBZ,OAArB,EAA8BC,OAA9B,EAAuCJ,KAAvC,EAAV;AACH;;AAEDY,IAAEI,IAAF,CAAOf,KAAKgB,eAAZ,EAA6B,0BAAkB;AAC3CL,MAAEI,IAAF,CAAOX,OAAP,EAAgB,kBAAU;AAAA;;AACtB,UAAMa,wBAAwBlB,MAAMmB,cAAN,EAAsBC,MAAtB,CAA9B;AACAA,aAAOD,eAAeE,QAAtB,IAAkCH,qBAAlC,CAFsB,CAGtB;;AAEA;;;;;;;;;;AAUA,UAAMI,aAAaV,EAAEW,KAAF,CAAQJ,eAAed,OAAvB,EAAgC,KAAhC,CAAnB;;AACA,8CAAeA,OAAf,EAAuBmB,IAAvB,+DAA+BN,sBAAsBO,MAAtB,CAA6B;AAAA,eAAO,CAACb,EAAEc,QAAF,CAAWJ,UAAX,EAAuBK,IAAIC,GAA3B,CAAR;AAAA,OAA7B,CAA/B;AACH,KAjBD;AAkBH,GAnBD;;AAqBA,SAAOvB,OAAP;AACH;;AArDDb,OAAOqC,aAAP,CAuDe,UAAC5B,IAAD,EAAO6B,MAAP,EAAkB;AAC7B7B,OAAKI,OAAL,GAAeL,MAAMC,IAAN,CAAf;AAEAF,qBAAmBE,IAAnB,EAAyB6B,MAAzB;AAEA,SAAO7B,KAAKI,OAAZ;AACH,CA7DD","sourcesContent":["import applyProps from './applyProps.js';\nimport { assembleMetadata, removeLinkStorages, storeOneResults } from './prepareForDelivery';\nimport prepareForDelivery from './prepareForDelivery';\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @returns {*}\n */\nfunction fetch(node, parentObject) {\n    let {filters, options} = applyProps(node);\n\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            const collectionNodeResults = fetch(collectionNode, result);\n            result[collectionNode.linkName] = collectionNodeResults;\n            //delete result[node.linker.linkStorageField];\n\n            /**\n             * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n             * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n             * the results?\n             *\n             * Other possible ways:\n             * - do something like assemble() in storeHypernovaResults\n             * - pass node.results to accessor above and find with sift\n             */\n\n            const currentIds = _.pluck(collectionNode.results, '_id');\n            collectionNode.results.push(...collectionNodeResults.filter(res => !_.contains(currentIds, res._id)));\n        })\n    });\n\n    return results;\n}\n\nexport default (node, params) => {\n    node.results = fetch(node);\n\n    prepareForDelivery(node, params);\n\n    return node.results;\n}\n"]},"sourceType":"script","hash":"659778ac6e4b0a0af7298b29ae84b1000151312c"}
