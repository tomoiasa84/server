{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js"}},"code":"module.export({\n  default: () => cleanBody\n});\nlet deepClone;\nmodule.watch(require(\"lodash.clonedeep\"), {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 0);\nlet cleanFilters, cleanOptions;\nmodule.watch(require(\"./cleanSelectors\"), {\n  cleanFilters(v) {\n    cleanFilters = v;\n  },\n\n  cleanOptions(v) {\n    cleanOptions = v;\n  }\n\n}, 1);\nlet dotize;\nmodule.watch(require(\"../../query/lib/dotize\"), {\n  default(v) {\n    dotize = v;\n  }\n\n}, 2);\n\nfunction cleanBody(main, second) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  let object = {};\n\n  if (second.$filters || second.$options) {\n    const fields = getFields(main);\n    cleanFilters(second.$filters, fields);\n    cleanOptions(second.$options, fields);\n  }\n\n  _.each(second, (secondValue, key) => {\n    if (key === '$filters' || key === '$options') {\n      object[key] = secondValue;\n      return;\n    }\n\n    let value = main[key];\n\n    if (value === undefined) {\n      return;\n    } // if the main value is a function, we run it.\n\n\n    if (_.isFunction(value)) {\n      value = value.call(null, ...args);\n    } // if the main value is undefined or false, we skip the merge\n\n\n    if (value === undefined || value === false) {\n      return;\n    } // we treat this specially, if the value is true\n\n\n    if (value === true) {\n      object[key] = _.isObject(secondValue) ? deepClone(secondValue) : value;\n      return;\n    } // if the main value is an object\n\n\n    if (_.isObject(value)) {\n      if (_.isObject(secondValue)) {\n        // if the second one is an object as well we run recursively run the intersection\n        object[key] = cleanBody(value, secondValue, ...args);\n      } // if it is not, then we will ignore it, because it won't make sense.\n      // to merge {a: 1} with 1.\n\n\n      return;\n    } // if the main value is not an object, it should be a truthy value like 1\n\n\n    if (_.isObject(secondValue)) {\n      // if the second value is an object, then we will keep it.\n      // this won't cause problem with deep nesting because\n      // when you specify links you will have the main value as an object, otherwise it will fail\n      // this is used for things like when you have a hash object like profile with multiple nesting fields, you can allow the client to specify only what he needs\n      object[key] = deepClone(secondValue);\n    } else {\n      // if the second value is not an object, we just store the first value\n      object[key] = value;\n    }\n  });\n\n  return object;\n}\n\nfunction getFields(body) {\n  return _.keys(dotize.convert(body));\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js"],"names":["module","export","default","cleanBody","deepClone","watch","require","v","cleanFilters","cleanOptions","dotize","main","second","args","object","$filters","$options","fields","getFields","_","each","secondValue","key","value","undefined","isFunction","call","isObject","body","keys","convert"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,WAAQ,MAAIC;AAAb,CAAd;AAAuC,IAAIC,SAAJ;AAAcJ,OAAOK,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACJ,UAAQK,CAAR,EAAU;AAACH,gBAAUG,CAAV;AAAY;;AAAxB,CAAzC,EAAmE,CAAnE;AAAsE,IAAIC,YAAJ,EAAiBC,YAAjB;AAA8BT,OAAOK,KAAP,CAAaC,QAAQ,kBAAR,CAAb,EAAyC;AAACE,eAAaD,CAAb,EAAe;AAACC,mBAAaD,CAAb;AAAe,GAAhC;;AAAiCE,eAAaF,CAAb,EAAe;AAACE,mBAAaF,CAAb;AAAe;;AAAhE,CAAzC,EAA2G,CAA3G;AAA8G,IAAIG,MAAJ;AAAWV,OAAOK,KAAP,CAAaC,QAAQ,wBAAR,CAAb,EAA+C;AAACJ,UAAQK,CAAR,EAAU;AAACG,aAAOH,CAAP;AAAS;;AAArB,CAA/C,EAAsE,CAAtE;;AAOnQ,SAASJ,SAAT,CAAmBQ,IAAnB,EAAyBC,MAAzB,EAA0C;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AACrD,MAAIC,SAAS,EAAb;;AAEA,MAAIF,OAAOG,QAAP,IAAmBH,OAAOI,QAA9B,EAAwC;AACpC,UAAMC,SAASC,UAAUP,IAAV,CAAf;AAEAH,iBAAaI,OAAOG,QAApB,EAA8BE,MAA9B;AACAR,iBAAaG,OAAOI,QAApB,EAA8BC,MAA9B;AACH;;AAEDE,IAAEC,IAAF,CAAOR,MAAP,EAAe,CAACS,WAAD,EAAcC,GAAd,KAAsB;AACjC,QAAIA,QAAQ,UAAR,IAAsBA,QAAQ,UAAlC,EAA8C;AAC1CR,aAAOQ,GAAP,IAAcD,WAAd;AACA;AACH;;AAED,QAAIE,QAAQZ,KAAKW,GAAL,CAAZ;;AAEA,QAAIC,UAAUC,SAAd,EAAyB;AACrB;AACH,KAVgC,CAYjC;;;AACA,QAAIL,EAAEM,UAAF,CAAaF,KAAb,CAAJ,EAAyB;AACrBA,cAAQA,MAAMG,IAAN,CAAW,IAAX,EAAiB,GAAGb,IAApB,CAAR;AACH,KAfgC,CAiBjC;;;AACA,QAAIU,UAAUC,SAAV,IAAuBD,UAAU,KAArC,EAA4C;AACxC;AACH,KApBgC,CAsBjC;;;AACA,QAAIA,UAAU,IAAd,EAAoB;AAChBT,aAAOQ,GAAP,IAAcH,EAAEQ,QAAF,CAAWN,WAAX,IAA0BjB,UAAUiB,WAAV,CAA1B,GAAmDE,KAAjE;AACA;AACH,KA1BgC,CA4BjC;;;AACA,QAAIJ,EAAEQ,QAAF,CAAWJ,KAAX,CAAJ,EAAuB;AACnB,UAAIJ,EAAEQ,QAAF,CAAWN,WAAX,CAAJ,EAA6B;AACzB;AACAP,eAAOQ,GAAP,IAAcnB,UAAUoB,KAAV,EAAiBF,WAAjB,EAA8B,GAAGR,IAAjC,CAAd;AACH,OAJkB,CAKnB;AACA;;;AAEA;AACH,KAtCgC,CAwCjC;;;AACA,QAAIM,EAAEQ,QAAF,CAAWN,WAAX,CAAJ,EAA6B;AACzB;AACA;AACA;AACA;AAEAP,aAAOQ,GAAP,IAAclB,UAAUiB,WAAV,CAAd;AACH,KAPD,MAOO;AACH;AACAP,aAAOQ,GAAP,IAAcC,KAAd;AACH;AACJ,GApDD;;AAsDA,SAAOT,MAAP;AACH;;AAED,SAASI,SAAT,CAAmBU,IAAnB,EAAyB;AACrB,SAAOT,EAAEU,IAAF,CAAOnB,OAAOoB,OAAP,CAAeF,IAAf,CAAP,CAAP;AACH","sourcesContent":["import deepClone from 'lodash.clonedeep';\nimport {cleanFilters, cleanOptions} from './cleanSelectors';\nimport dotize from '../../query/lib/dotize';\n\n/**\n * Deep Inter Computation\n */\nexport default function cleanBody(main, second, ...args) {\n    let object = {};\n\n    if (second.$filters || second.$options) {\n        const fields = getFields(main);\n\n        cleanFilters(second.$filters, fields);\n        cleanOptions(second.$options, fields);\n    }\n\n    _.each(second, (secondValue, key) => {\n        if (key === '$filters' || key === '$options') {\n            object[key] = secondValue;\n            return;\n        }\n\n        let value = main[key];\n\n        if (value === undefined) {\n            return;\n        }\n\n        // if the main value is a function, we run it.\n        if (_.isFunction(value)) {\n            value = value.call(null, ...args);\n        }\n\n        // if the main value is undefined or false, we skip the merge\n        if (value === undefined || value === false) {\n            return;\n        }\n\n        // we treat this specially, if the value is true\n        if (value === true) {\n            object[key] = _.isObject(secondValue) ? deepClone(secondValue) : value;\n            return;\n        }\n\n        // if the main value is an object\n        if (_.isObject(value)) {\n            if (_.isObject(secondValue)) {\n                // if the second one is an object as well we run recursively run the intersection\n                object[key] = cleanBody(value, secondValue, ...args);\n            }\n            // if it is not, then we will ignore it, because it won't make sense.\n            // to merge {a: 1} with 1.\n\n            return;\n        }\n\n        // if the main value is not an object, it should be a truthy value like 1\n        if (_.isObject(secondValue)) {\n            // if the second value is an object, then we will keep it.\n            // this won't cause problem with deep nesting because\n            // when you specify links you will have the main value as an object, otherwise it will fail\n            // this is used for things like when you have a hash object like profile with multiple nesting fields, you can allow the client to specify only what he needs\n\n            object[key] = deepClone(secondValue);\n        } else {\n            // if the second value is not an object, we just store the first value\n            object[key] = value;\n        }\n    });\n\n    return object;\n}\n\nfunction getFields(body) {\n    return _.keys(dotize.convert(body));\n}"]},"sourceType":"script","hash":"a36d7819fd278c4589adec8016b5ee98709cc26c"}
