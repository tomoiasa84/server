{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupMutations.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/cultofcoders:apollo/server/morpher/setupMutations.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupMutations.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/setupMutations.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/morpher/setupMutations.js"}},"code":"module.export({\n  default: () => setupMutations\n});\nlet getFields;\nmodule.watch(require(\"./getFields\"), {\n  default(v) {\n    getFields = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\n\nfunction setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `${name}Insert(payload: String!): ${type}\\n`;\n\n    Mutation[`${name}Insert`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        document\n      } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, {\n          document\n        });\n      }\n\n      const docId = collection().insert(document);\n      return {\n        _id: docId\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `${name}Update(payload: String!): String\\n`;\n\n    Mutation[`${name}Update`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector,\n        modifier\n      } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const {\n          topLevelFields,\n          fields\n        } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `${name}Remove(payload: String!): String\\n`;\n\n    Mutation[`${name}Remove`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector\n      } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, {\n          selector\n        });\n      }\n\n      collection().remove(selector);\n      return 'ok';\n    };\n  }\n\n  return {\n    MutationType,\n    Mutation\n  };\n}","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/morpher/setupMutations.js"],"names":["module","export","default","setupMutations","getFields","watch","require","v","EJSON","check","config","name","type","collection","Mutation","MutationType","insert","_","payload","ctx","document","parse","Object","call","docId","_id","update","selector","modifier","topLevelFields","fields","modifiedFields","modifiedTopLevelFields","remove"],"mappings":"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","sourcesContent":["import getFields from './getFields';\nimport { EJSON } from 'meteor/ejson';\nimport { check } from 'meteor/check';\n\nexport default function setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `${name}Insert(payload: String!): ${type}\\n`;\n\n    Mutation[`${name}Insert`] = (_, { payload }, ctx) => {\n      const { document } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, { document });\n      }\n\n      const docId = collection().insert(document);\n\n      return {\n        _id: docId,\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `${name}Update(payload: String!): String\\n`;\n\n    Mutation[`${name}Update`] = (_, { payload }, ctx) => {\n      const { selector, modifier } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const { topLevelFields, fields } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields,\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `${name}Remove(payload: String!): String\\n`;\n\n    Mutation[`${name}Remove`] = (_, { payload }, ctx) => {\n      const { selector } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, { selector });\n      }\n\n      collection().remove(selector);\n\n      return 'ok';\n    };\n  }\n\n  return { MutationType, Mutation };\n}\n"]},"sourceType":"script","hash":"1993c2adb91f4ab7997110ab7178acd9c59dcf62"}
