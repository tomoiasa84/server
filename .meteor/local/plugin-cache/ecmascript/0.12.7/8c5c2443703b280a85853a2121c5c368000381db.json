{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:apollo/server/morpher/expose.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/morpher/expose.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/morpher/expose.js"}},"code":"let check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet db;\nmodule.link(\"meteor/cultofcoders:grapher\", {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet load;\nmodule.link(\"meteor/cultofcoders:apollo\", {\n  load(v) {\n    load = v;\n  }\n\n}, 2);\nlet setupDataFetching;\nmodule.link(\"./setupDataFetching\", {\n  default(v) {\n    setupDataFetching = v;\n  }\n\n}, 3);\nlet setupMutations;\nmodule.link(\"./setupMutations\", {\n  default(v) {\n    setupMutations = v;\n  }\n\n}, 4);\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction\n  });\n  const newObject = Object.assign({\n    subscription: true\n  }, object);\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(`You have already exposed ${name} somewhere else. Please make sure they do not collide.`);\n    }\n\n    exposedNames.push(name);\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const {\n    collection,\n    type\n  } = config;\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let {\n      MutationType,\n      Mutation\n    } = setupMutations(config, name, type, collection);\n    MutationType = `type Mutation { ${MutationType} }`;\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: {\n        Mutation\n      }\n    });\n  }\n\n  if (config.find) {\n    let {\n      QueryType,\n      Query\n    } = setupDataFetching(config, name, type, collection);\n    QueryType = `type Query { ${QueryType} }`;\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: {\n        Query\n      }\n    });\n  }\n\n  return modules;\n}\n\nmodule.exportDefault(morph);","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/morpher/expose.js"],"names":["check","Match","module","link","v","db","load","setupDataFetching","default","setupMutations","MaybeBoolOrFunction","Maybe","OneOf","Boolean","Function","getConfig","object","type","String","collection","update","insert","remove","find","newObject","Object","assign","subscription","exposedNames","morph","config","name","includes","Error","push","singleConfig","modules","exposeSingle","MutationType","Mutation","typeDefs","resolvers","QueryType","Query","exportDefault"],"mappings":"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","sourcesContent":["import { check, Match } from 'meteor/check';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { load } from 'meteor/cultofcoders:apollo';\nimport setupDataFetching from './setupDataFetching';\nimport setupMutations from './setupMutations';\n\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction,\n  });\n\n  const newObject = Object.assign(\n    {\n      subscription: true,\n    },\n    object\n  );\n\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(\n        `You have already exposed ${name} somewhere else. Please make sure they do not collide.`\n      );\n    }\n    exposedNames.push(name);\n\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const { collection, type } = config;\n\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let { MutationType, Mutation } = setupMutations(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    MutationType = `type Mutation { ${MutationType} }`;\n\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: { Mutation },\n    });\n  }\n\n  if (config.find) {\n    let { QueryType, Query } = setupDataFetching(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    QueryType = `type Query { ${QueryType} }`;\n\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: { Query },\n    });\n  }\n\n  return modules;\n}\n\nexport default morph;\n"]},"sourceType":"script","hash":"8c5c2443703b280a85853a2121c5c368000381db"}
