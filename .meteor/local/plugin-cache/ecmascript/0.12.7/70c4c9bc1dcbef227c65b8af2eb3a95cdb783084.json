{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js"}},"code":"let check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet COUNTS_COLLECTION_CLIENT;\nmodule.link(\"./constants\", {\n  COUNTS_COLLECTION_CLIENT(v) {\n    COUNTS_COLLECTION_CLIENT = v;\n  }\n\n}, 3);\n// XXX: Should this persist between server restarts?\nconst collection = new Mongo.Collection(null);\n/**\n * This method generates a reactive count endpoint (a method and publication) for a collection or named query.\n *\n * @param {String} name - Name of the query or collection\n * @param {Function} getCursor - Takes in the user's session document as an argument, and turns that into a Mongo cursor.\n * @param {Function} getSession - Takes the subscribe method's argument as its parameter. Should enforce any necessary security constraints. The return value of this function is stored in the session document.\n */\n\nmodule.exportDefault((name, {\n  getCursor,\n  getSession\n}) => {\n  Meteor.methods({\n    [name + '.count.subscribe'](paramsOrBody) {\n      const session = getSession.call(this, paramsOrBody);\n      const sessionId = JSON.stringify(session);\n      const existingSession = collection.findOne({\n        session: sessionId,\n        userId: this.userId\n      }); // Try to reuse sessions if the user subscribes multiple times with the same data\n\n      if (existingSession) {\n        return existingSession._id;\n      }\n\n      const token = collection.insert({\n        session: sessionId,\n        query: name,\n        userId: this.userId\n      });\n      return token;\n    }\n\n  });\n  Meteor.publish(name + '.count', function (token) {\n    check(token, String);\n    const self = this;\n    const request = collection.findOne({\n      _id: token,\n      userId: self.userId\n    });\n\n    if (!request) {\n      throw new Error('no-request', `You must acquire a request token via the \"${name}.count.subscribe\" method first.`);\n    }\n\n    request.session = JSON.parse(request.session);\n    const cursor = getCursor.call(this, request); // Start counting\n\n    let count = 0;\n    let isReady = false;\n    const handle = cursor.observe({\n      added() {\n        count++;\n        isReady && self.changed(COUNTS_COLLECTION_CLIENT, token, {\n          count\n        });\n      },\n\n      removed() {\n        count--;\n        isReady && self.changed(COUNTS_COLLECTION_CLIENT, token, {\n          count\n        });\n      }\n\n    });\n    isReady = true;\n    self.added(COUNTS_COLLECTION_CLIENT, token, {\n      count\n    });\n    self.onStop(() => {\n      handle.stop();\n      collection.remove(token);\n    });\n    self.ready();\n  });\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/counts/genEndpoint.server.js"],"names":["check","module","link","v","Meteor","Mongo","COUNTS_COLLECTION_CLIENT","collection","Collection","exportDefault","name","getCursor","getSession","methods","paramsOrBody","session","call","sessionId","JSON","stringify","existingSession","findOne","userId","_id","token","insert","query","publish","String","self","request","Error","parse","cursor","count","isReady","handle","observe","added","changed","removed","onStop","stop","remove","ready"],"mappings":"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","sourcesContent":["import { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\n\nimport { COUNTS_COLLECTION_CLIENT } from './constants';\n\n// XXX: Should this persist between server restarts?\nconst collection = new Mongo.Collection(null);\n\n/**\n * This method generates a reactive count endpoint (a method and publication) for a collection or named query.\n *\n * @param {String} name - Name of the query or collection\n * @param {Function} getCursor - Takes in the user's session document as an argument, and turns that into a Mongo cursor.\n * @param {Function} getSession - Takes the subscribe method's argument as its parameter. Should enforce any necessary security constraints. The return value of this function is stored in the session document.\n */\nexport default (name, { getCursor, getSession }) => {\n    Meteor.methods({\n        [name + '.count.subscribe'](paramsOrBody) {\n            const session = getSession.call(this, paramsOrBody);\n            const sessionId = JSON.stringify(session);\n\n            const existingSession = collection.findOne({\n                session: sessionId,\n                userId: this.userId,\n            });\n\n            // Try to reuse sessions if the user subscribes multiple times with the same data\n            if (existingSession) {\n                return existingSession._id;\n            }\n\n            const token = collection.insert({\n                session: sessionId,\n                query: name,\n                userId: this.userId,\n            });\n\n            return token;\n        },\n    });\n\n    Meteor.publish(name + '.count', function(token) {\n        check(token, String);\n        const self = this;\n        const request = collection.findOne({ _id: token, userId: self.userId });\n\n        if (!request) {\n            throw new Error(\n                'no-request',\n                `You must acquire a request token via the \"${name}.count.subscribe\" method first.`\n            );\n        }\n\n        request.session = JSON.parse(request.session);\n        const cursor = getCursor.call(this, request);\n\n        // Start counting\n        let count = 0;\n\n        let isReady = false;\n        const handle = cursor.observe({\n            added() {\n                count++;\n                isReady &&\n                    self.changed(COUNTS_COLLECTION_CLIENT, token, { count });\n            },\n\n            removed() {\n                count--;\n                isReady &&\n                    self.changed(COUNTS_COLLECTION_CLIENT, token, { count });\n            },\n        });\n\n        isReady = true;\n        self.added(COUNTS_COLLECTION_CLIENT, token, { count });\n\n        self.onStop(() => {\n            handle.stop();\n            collection.remove(token);\n        });\n\n        self.ready();\n    });\n};\n"]},"sourceType":"script","hash":"70c4c9bc1dcbef227c65b8af2eb3a95cdb783084"}
