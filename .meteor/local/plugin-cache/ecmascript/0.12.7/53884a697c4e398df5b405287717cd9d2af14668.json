{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js"}},"code":"let prepareForProcess;\nmodule.link(\"../query/lib/prepareForProcess.js\", {\n  default(v) {\n    prepareForProcess = v;\n  }\n\n}, 0);\nlet Base;\nmodule.link(\"./namedQuery.base\", {\n  default(v) {\n    Base = v;\n  }\n\n}, 1);\nlet deepClone;\nmodule.link(\"lodash.clonedeep\", {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 2);\nlet MemoryResultCacher;\nmodule.link(\"./cache/MemoryResultCacher\", {\n  default(v) {\n    MemoryResultCacher = v;\n  }\n\n}, 3);\nlet intersectDeep;\nmodule.link(\"../query/lib/intersectDeep\", {\n  default(v) {\n    intersectDeep = v;\n  }\n\n}, 4);\nmodule.exportDefault(class extends Base {\n  /**\n   * Retrieves the data.\n   * @returns {*}\n   */\n  fetch(context) {\n    this._performSecurityChecks(context, this.params);\n\n    if (this.isResolver) {\n      return this._fetchResolverData(context);\n    } else {\n      body = deepClone(this.body);\n\n      if (this.params.$body) {\n        body = intersectDeep(body, this.params.$body);\n      } // we must apply emobdyment here\n\n\n      this.doEmbodimentIfItApplies(body);\n      const query = this.collection.createQuery(deepClone(body), {\n        params: deepClone(this.params)\n      });\n\n      if (this.cacher) {\n        const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n        return this.cacher.fetch(cacheId, {\n          query\n        });\n      }\n\n      return query.fetch();\n    }\n  }\n  /**\n   * @param args\n   * @returns {*}\n   */\n\n\n  fetchOne(...args) {\n    return _.first(this.fetch(...args));\n  }\n  /**\n   * Gets the count of matching elements.\n   *\n   * @returns {any}\n   */\n\n\n  getCount(context) {\n    this._performSecurityChecks(context, this.params);\n\n    const countCursor = this.getCursorForCounting();\n\n    if (this.cacher) {\n      const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n      return this.cacher.fetch(cacheId, {\n        countCursor\n      });\n    }\n\n    return countCursor.count();\n  }\n  /**\n   * Returns the cursor for counting\n   * This is most likely used for counts cursor\n   */\n\n\n  getCursorForCounting() {\n    let body = deepClone(this.body);\n    this.doEmbodimentIfItApplies(body);\n    body = prepareForProcess(body, this.params);\n    return this.collection.find(body.$filters || {}, {\n      fields: {\n        _id: 1\n      }\n    });\n  }\n  /**\n   * @param cacher\n   */\n\n\n  cacheResults(cacher) {\n    if (!cacher) {\n      cacher = new MemoryResultCacher();\n    }\n\n    this.cacher = cacher;\n  }\n  /**\n   * Configure resolve. This doesn't actually call the resolver, it just sets it\n   * @param fn\n   */\n\n\n  resolve(fn) {\n    if (!this.isResolver) {\n      throw new Meteor.Error('invalid-call', `You cannot use resolve() on a non resolver NamedQuery`);\n    }\n\n    this.resolver = fn;\n  }\n  /**\n   * @returns {*}\n   * @private\n   */\n\n\n  _fetchResolverData(context) {\n    const resolver = this.resolver;\n    const self = this;\n    const query = {\n      fetch() {\n        return resolver.call(context, self.params);\n      }\n\n    };\n\n    if (this.cacher) {\n      const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n      return this.cacher.fetch(cacheId, {\n        query\n      });\n    }\n\n    return query.fetch();\n  }\n  /**\n   * @param context Meteor method/publish context\n   * @param params\n   *\n   * @private\n   */\n\n\n  _performSecurityChecks(context, params) {\n    if (context && this.exposeConfig) {\n      this._callFirewall(context, context.userId, params);\n    }\n\n    this.doValidateParams(params);\n  }\n\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/namedQuery/namedQuery.server.js"],"names":["prepareForProcess","module","link","default","v","Base","deepClone","MemoryResultCacher","intersectDeep","exportDefault","fetch","context","_performSecurityChecks","params","isResolver","_fetchResolverData","body","$body","doEmbodimentIfItApplies","query","collection","createQuery","cacher","cacheId","generateQueryId","queryName","fetchOne","args","_","first","getCount","countCursor","getCursorForCounting","count","find","$filters","fields","_id","cacheResults","resolve","fn","Meteor","Error","resolver","self","call","exposeConfig","_callFirewall","userId","doValidateParams"],"mappings":"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","sourcesContent":["import prepareForProcess from '../query/lib/prepareForProcess.js';\nimport Base from './namedQuery.base';\nimport deepClone from 'lodash.clonedeep';\nimport MemoryResultCacher from './cache/MemoryResultCacher';\nimport intersectDeep from '../query/lib/intersectDeep';\n\nexport default class extends Base {\n    /**\n     * Retrieves the data.\n     * @returns {*}\n     */\n    fetch(context) {\n        this._performSecurityChecks(context, this.params);\n\n        if (this.isResolver) {\n            return this._fetchResolverData(context);\n        } else {\n            body = deepClone(this.body);\n            if (this.params.$body) {\n                body = intersectDeep(body, this.params.$body);\n            }\n            \n            // we must apply emobdyment here\n            this.doEmbodimentIfItApplies(body);\n\n            const query = this.collection.createQuery(\n                deepClone(body),\n                {\n                    params: deepClone(this.params)\n                }\n            );\n\n            if (this.cacher) {\n                const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n                return this.cacher.fetch(cacheId, {query});\n            }\n\n            return query.fetch();\n        }\n    }\n\n    /**\n     * @param args\n     * @returns {*}\n     */\n    fetchOne(...args) {\n        return _.first(this.fetch(...args));\n    }\n\n    /**\n     * Gets the count of matching elements.\n     *\n     * @returns {any}\n     */\n    getCount(context) {\n        this._performSecurityChecks(context, this.params);\n\n        const countCursor = this.getCursorForCounting();\n\n        if (this.cacher) {\n            const cacheId = 'count::' + this.cacher.generateQueryId(this.queryName, this.params);\n\n            return this.cacher.fetch(cacheId, {countCursor});\n        }\n\n        return countCursor.count();\n    }\n\n    /**\n     * Returns the cursor for counting\n     * This is most likely used for counts cursor\n     */\n    getCursorForCounting() {\n        let body = deepClone(this.body);\n        this.doEmbodimentIfItApplies(body);\n        body = prepareForProcess(body, this.params);\n\n        return this.collection.find(body.$filters || {}, {fields: {_id: 1}});\n    }\n\n    /**\n     * @param cacher\n     */\n    cacheResults(cacher) {\n        if (!cacher) {\n            cacher = new MemoryResultCacher();\n        }\n\n        this.cacher = cacher;\n    }\n\n    /**\n     * Configure resolve. This doesn't actually call the resolver, it just sets it\n     * @param fn\n     */\n    resolve(fn) {\n        if (!this.isResolver) {\n            throw new Meteor.Error('invalid-call', `You cannot use resolve() on a non resolver NamedQuery`);\n        }\n\n        this.resolver = fn;\n    }\n\n    /**\n     * @returns {*}\n     * @private\n     */\n    _fetchResolverData(context) {\n        const resolver = this.resolver;\n        const self = this;\n        const query = {\n            fetch() {\n                return resolver.call(context, self.params);\n            }\n        };\n\n        if (this.cacher) {\n            const cacheId = this.cacher.generateQueryId(this.queryName, this.params);\n            return this.cacher.fetch(cacheId, {query});\n        }\n\n        return query.fetch();\n    }\n\n    /**\n     * @param context Meteor method/publish context\n     * @param params\n     *\n     * @private\n     */\n    _performSecurityChecks(context, params) {\n        if (context && this.exposeConfig) {\n            this._callFirewall(context, context.userId, params);\n        }\n\n        this.doValidateParams(params);\n    }\n}"]},"sourceType":"script","hash":"53884a697c4e398df5b405287717cd9d2af14668"}
