{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar sift;\nmodule.link(\"sift\", {\n  \"default\": function (v) {\n    sift = v;\n  }\n}, 0);\nvar cleanObjectForMetaFilters;\nmodule.link(\"./lib/cleanObjectForMetaFilters\", {\n  \"default\": function (v) {\n    cleanObjectForMetaFilters = v;\n  }\n}, 1);\nmodule.exportDefault(function (childCollectionNode, aggregateResults, metaFilters) {\n  var linker = childCollectionNode.linker;\n  var linkStorageField = linker.linkStorageField;\n  var linkName = childCollectionNode.linkName;\n  var isMeta = linker.isMeta();\n  var isMany = linker.isMany();\n  var allResults = [];\n\n  if (isMeta && metaFilters) {\n    var metaFiltersTest = sift(metaFilters);\n\n    _.each(childCollectionNode.parent.results, function (parentResult) {\n      cleanObjectForMetaFilters(parentResult, linkStorageField, metaFiltersTest);\n    });\n  }\n\n  if (isMeta && isMany) {\n    // This case is treated differently because we get an array response from the pipeline.\n    _.each(childCollectionNode.parent.results, function (parentResult) {\n      parentResult[linkName] = parentResult[linkName] || [];\n\n      var eligibleAggregateResults = _.filter(aggregateResults, function (aggregateResult) {\n        return _.contains(aggregateResult._id, parentResult._id);\n      });\n\n      if (eligibleAggregateResults.length) {\n        var datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]\n\n\n        _.each(datas, function (data) {\n          _.each(data, function (item) {\n            parentResult[linkName].push(item);\n          });\n        });\n      }\n    });\n\n    _.each(aggregateResults, function (aggregateResult) {\n      _.each(aggregateResult.data, function (item) {\n        return allResults.push(item);\n      });\n    });\n  } else {\n    var comparator;\n\n    if (isMany) {\n      comparator = function (aggregateResult, result) {\n        return _.contains(aggregateResult._id, result._id);\n      };\n    } else {\n      comparator = function (aggregateResult, result) {\n        return aggregateResult._id == result._id;\n      };\n    }\n\n    var childLinkName = childCollectionNode.linkName;\n    var parentResults = childCollectionNode.parent.results;\n    parentResults.forEach(function (parentResult) {\n      // We are now finding the data from the pipeline that is related to the _id of the parent\n      var eligibleAggregateResults = aggregateResults.filter(function (aggregateResult) {\n        return comparator(aggregateResult, parentResult);\n      });\n      eligibleAggregateResults.forEach(function (aggregateResult) {\n        if (Array.isArray(parentResult[childLinkName])) {\n          var _parentResult$childLi;\n\n          (_parentResult$childLi = parentResult[childLinkName]).push.apply(_parentResult$childLi, (0, _toConsumableArray2.default)(aggregateResult.data));\n        } else {\n          parentResult[childLinkName] = (0, _toConsumableArray2.default)(aggregateResult.data);\n        }\n      });\n    });\n    aggregateResults.forEach(function (aggregateResult) {\n      allResults.push.apply(allResults, (0, _toConsumableArray2.default)(aggregateResult.data));\n    });\n  }\n\n  childCollectionNode.results = allResults;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/assembleAggregateResults.js"],"names":["sift","module","link","v","cleanObjectForMetaFilters","exportDefault","childCollectionNode","aggregateResults","metaFilters","linker","linkStorageField","linkName","isMeta","isMany","allResults","metaFiltersTest","_","each","parent","results","parentResult","eligibleAggregateResults","filter","aggregateResult","contains","_id","length","datas","pluck","data","item","push","comparator","result","childLinkName","parentResults","forEach","Array","isArray"],"mappings":"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","sourcesContent":["import sift from 'sift';\nimport cleanObjectForMetaFilters from './lib/cleanObjectForMetaFilters';\n\n/**\n * This only applies to inversed links. It will assemble the data in a correct manner.\n */\nexport default function(childCollectionNode, aggregateResults, metaFilters) {\n    const linker = childCollectionNode.linker;\n    const linkStorageField = linker.linkStorageField;\n    const linkName = childCollectionNode.linkName;\n    const isMeta = linker.isMeta();\n    const isMany = linker.isMany();\n\n    let allResults = [];\n\n    if (isMeta && metaFilters) {\n        const metaFiltersTest = sift(metaFilters);\n        _.each(childCollectionNode.parent.results, parentResult => {\n            cleanObjectForMetaFilters(\n                parentResult,\n                linkStorageField,\n                metaFiltersTest\n            );\n        });\n    }\n\n    if (isMeta && isMany) {\n        // This case is treated differently because we get an array response from the pipeline.\n\n        _.each(childCollectionNode.parent.results, parentResult => {\n            parentResult[linkName] = parentResult[linkName] || [];\n\n            const eligibleAggregateResults = _.filter(\n                aggregateResults,\n                aggregateResult => {\n                    return _.contains(aggregateResult._id, parentResult._id);\n                }\n            );\n\n            if (eligibleAggregateResults.length) {\n                const datas = _.pluck(eligibleAggregateResults, 'data'); /// [ [x1, x2], [x2, x3] ]\n\n                _.each(datas, data => {\n                    _.each(data, item => {\n                        parentResult[linkName].push(item);\n                    });\n                });\n            }\n        });\n\n        _.each(aggregateResults, aggregateResult => {\n            _.each(aggregateResult.data, item => allResults.push(item));\n        });\n    } else {\n        let comparator;\n        if (isMany) {\n            comparator = (aggregateResult, result) =>\n                _.contains(aggregateResult._id, result._id);\n        } else {\n            comparator = (aggregateResult, result) =>\n                aggregateResult._id == result._id;\n        }\n\n        const childLinkName = childCollectionNode.linkName;\n        const parentResults = childCollectionNode.parent.results;\n\n        parentResults.forEach(parentResult => {\n            // We are now finding the data from the pipeline that is related to the _id of the parent\n            const eligibleAggregateResults = aggregateResults.filter(\n                aggregateResult => comparator(aggregateResult, parentResult)\n            );\n\n            eligibleAggregateResults.forEach(aggregateResult => {\n                if (Array.isArray(parentResult[childLinkName])) {\n                    parentResult[childLinkName].push(...aggregateResult.data);\n                } else {\n                    parentResult[childLinkName] = [...aggregateResult.data];\n                }\n            });\n        });\n\n        aggregateResults.forEach(aggregateResult => {\n            allResults.push(...aggregateResult.data);\n        });\n    }\n\n    childCollectionNode.results = allResults;\n}\n"]},"sourceType":"script","hash":"ab715b8bfb9b991092893281af6bea94950c306c"}
