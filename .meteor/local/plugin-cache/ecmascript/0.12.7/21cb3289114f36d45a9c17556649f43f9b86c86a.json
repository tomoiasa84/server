{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js"}},"code":"module.export({\n  default: () => cleanBody\n});\nlet deepClone;\nmodule.link(\"lodash.clonedeep\", {\n  default(v) {\n    deepClone = v;\n  }\n\n}, 0);\nlet cleanFilters, cleanOptions;\nmodule.link(\"./cleanSelectors\", {\n  cleanFilters(v) {\n    cleanFilters = v;\n  },\n\n  cleanOptions(v) {\n    cleanOptions = v;\n  }\n\n}, 1);\nlet dotize;\nmodule.link(\"../../query/lib/dotize\", {\n  default(v) {\n    dotize = v;\n  }\n\n}, 2);\n\nfunction cleanBody(main, second, ...args) {\n  let object = {};\n\n  if (second.$filters || second.$options) {\n    const fields = getFields(main);\n    cleanFilters(second.$filters, fields);\n    cleanOptions(second.$options, fields);\n  }\n\n  _.each(second, (secondValue, key) => {\n    if (key === '$filters' || key === '$options') {\n      object[key] = secondValue;\n      return;\n    }\n\n    let value = main[key];\n\n    if (value === undefined) {\n      return;\n    } // if the main value is a function, we run it.\n\n\n    if (_.isFunction(value)) {\n      value = value.call(null, ...args);\n    } // if the main value is undefined or false, we skip the merge\n\n\n    if (value === undefined || value === false) {\n      return;\n    } // we treat this specially, if the value is true\n\n\n    if (value === true) {\n      object[key] = _.isObject(secondValue) ? deepClone(secondValue) : value;\n      return;\n    } // if the main value is an object\n\n\n    if (_.isObject(value)) {\n      if (_.isObject(secondValue)) {\n        // if the second one is an object as well we run recursively run the intersection\n        object[key] = cleanBody(value, secondValue, ...args);\n      } // if it is not, then we will ignore it, because it won't make sense.\n      // to merge {a: 1} with 1.\n\n\n      return;\n    } // if the main value is not an object, it should be a truthy value like 1\n\n\n    if (_.isObject(secondValue)) {\n      // if the second value is an object, then we will keep it.\n      // this won't cause problem with deep nesting because\n      // when you specify links you will have the main value as an object, otherwise it will fail\n      // this is used for things like when you have a hash object like profile with multiple nesting fields, you can allow the client to specify only what he needs\n      object[key] = deepClone(secondValue);\n    } else {\n      // if the second value is not an object, we just store the first value\n      object[key] = value;\n    }\n  });\n\n  return object;\n}\n\nfunction getFields(body) {\n  return _.keys(dotize.convert(body));\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/lib/cleanBody.js"],"names":["module","export","default","cleanBody","deepClone","link","v","cleanFilters","cleanOptions","dotize","main","second","args","object","$filters","$options","fields","getFields","_","each","secondValue","key","value","undefined","isFunction","call","isObject","body","keys","convert"],"mappings":"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","sourcesContent":["import deepClone from 'lodash.clonedeep';\nimport {cleanFilters, cleanOptions} from './cleanSelectors';\nimport dotize from '../../query/lib/dotize';\n\n/**\n * Deep Inter Computation\n */\nexport default function cleanBody(main, second, ...args) {\n    let object = {};\n\n    if (second.$filters || second.$options) {\n        const fields = getFields(main);\n\n        cleanFilters(second.$filters, fields);\n        cleanOptions(second.$options, fields);\n    }\n\n    _.each(second, (secondValue, key) => {\n        if (key === '$filters' || key === '$options') {\n            object[key] = secondValue;\n            return;\n        }\n\n        let value = main[key];\n\n        if (value === undefined) {\n            return;\n        }\n\n        // if the main value is a function, we run it.\n        if (_.isFunction(value)) {\n            value = value.call(null, ...args);\n        }\n\n        // if the main value is undefined or false, we skip the merge\n        if (value === undefined || value === false) {\n            return;\n        }\n\n        // we treat this specially, if the value is true\n        if (value === true) {\n            object[key] = _.isObject(secondValue) ? deepClone(secondValue) : value;\n            return;\n        }\n\n        // if the main value is an object\n        if (_.isObject(value)) {\n            if (_.isObject(secondValue)) {\n                // if the second one is an object as well we run recursively run the intersection\n                object[key] = cleanBody(value, secondValue, ...args);\n            }\n            // if it is not, then we will ignore it, because it won't make sense.\n            // to merge {a: 1} with 1.\n\n            return;\n        }\n\n        // if the main value is not an object, it should be a truthy value like 1\n        if (_.isObject(secondValue)) {\n            // if the second value is an object, then we will keep it.\n            // this won't cause problem with deep nesting because\n            // when you specify links you will have the main value as an object, otherwise it will fail\n            // this is used for things like when you have a hash object like profile with multiple nesting fields, you can allow the client to specify only what he needs\n\n            object[key] = deepClone(secondValue);\n        } else {\n            // if the second value is not an object, we just store the first value\n            object[key] = value;\n        }\n    });\n\n    return object;\n}\n\nfunction getFields(body) {\n    return _.keys(dotize.convert(body));\n}"]},"sourceType":"script","hash":"21cb3289114f36d45a9c17556649f43f9b86c86a"}
