{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"}},"code":"module.export({\n  \"default\": function () {\n    return CountSubscription;\n  }\n});\nvar EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar: function (v) {\n    ReactiveVar = v;\n  }\n}, 2);\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 3);\nvar Counts;\nmodule.link(\"./collection\", {\n  \"default\": function (v) {\n    Counts = v;\n  }\n}, 4);\nvar createFauxSubscription;\nmodule.link(\"./createFauxSubscription\", {\n  \"default\": function (v) {\n    createFauxSubscription = v;\n  }\n}, 5);\nvar prepareForProcess;\nmodule.link(\"../lib/prepareForProcess.js\", {\n  \"default\": function (v) {\n    prepareForProcess = v;\n  }\n}, 6);\nvar NamedQueryBase;\nmodule.link(\"../../namedQuery/namedQuery.base\", {\n  \"default\": function (v) {\n    NamedQueryBase = v;\n  }\n}, 7);\n\nvar CountSubscription =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {*} query - The query to use when fetching counts\n   */\n  function CountSubscription(query) {\n    this.accessToken = new ReactiveVar(null);\n    this.fauxHandle = null;\n    this.query = query;\n  }\n  /**\n   * Starts a subscription request for reactive counts.\n   *\n   * @param {*} arg - The argument to pass to {name}.count.subscribe\n   * @param {*} callback\n   */\n\n\n  var _proto = CountSubscription.prototype;\n\n  _proto.subscribe = function () {\n    function subscribe(arg, callback) {\n      var _this = this;\n\n      // Don't try to resubscribe if arg hasn't changed\n      if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n        return this.fauxHandle;\n      }\n\n      this.accessToken.set(null);\n      this.lastArgs = arg;\n      Meteor.call(this.query.name + '.count.subscribe', arg, function (error, token) {\n        if (!_this._markedForUnsubscribe) {\n          _this.subscriptionHandle = Meteor.subscribe(_this.query.name + '.count', token, callback);\n\n          _this.accessToken.set(token);\n\n          _this.disconnectComputation = Tracker.autorun(function () {\n            return _this.handleDisconnect();\n          });\n        }\n\n        _this._markedForUnsubscribe = false;\n      });\n      this.fauxHandle = createFauxSubscription(this);\n      return this.fauxHandle;\n    }\n\n    return subscribe;\n  }()\n  /**\n   * Unsubscribes from the count endpoint, if there is such a subscription.\n   */\n  ;\n\n  _proto.unsubscribe = function () {\n    function unsubscribe() {\n      if (this.subscriptionHandle) {\n        this.disconnectComputation.stop();\n        this.subscriptionHandle.stop();\n      } else {\n        // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n        // so set a flag to stop the subscription from being created\n        this._markedForUnsubscribe = true;\n      }\n\n      this.accessToken.set(null);\n      this.fauxHandle = null;\n      this.subscriptionHandle = null;\n    }\n\n    return unsubscribe;\n  }()\n  /**\n   * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n   *\n   * @returns {Number|null} - Current document count\n   */\n  ;\n\n  _proto.getCount = function () {\n    function getCount() {\n      var id = this.accessToken.get();\n      if (id === null) return null;\n      var doc = Counts.findOne(id);\n      return doc.count;\n    }\n\n    return getCount;\n  }()\n  /**\n   * All session info gets deleted when the server goes down, so when the client attempts to\n   * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n   *\n   * This function prevents that by manually stopping and restarting the subscription when the\n   * connection to the server is lost.\n   */\n  ;\n\n  _proto.handleDisconnect = function () {\n    function handleDisconnect() {\n      var status = Meteor.status();\n\n      if (!status.connected) {\n        this._markedForResume = true;\n        this.fauxHandle = null;\n        this.subscriptionHandle.stop();\n      }\n\n      if (status.connected && this._markedForResume) {\n        this._markedForResume = false;\n        this.subscribe(this.lastArgs);\n      }\n    }\n\n    return handleDisconnect;\n  }()\n  /**\n   * Returns whether or not a subscription request has been made.\n   */\n  ;\n\n  _proto.isSubscribed = function () {\n    function isSubscribed() {\n      return this.accessToken.get() !== null;\n    }\n\n    return isSubscribed;\n  }();\n\n  return CountSubscription;\n}();","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"],"names":["module","export","CountSubscription","EJSON","link","v","Meteor","ReactiveVar","Tracker","Counts","createFauxSubscription","prepareForProcess","NamedQueryBase","query","accessToken","fauxHandle","subscribe","arg","callback","equals","lastArgs","set","call","name","error","token","_markedForUnsubscribe","subscriptionHandle","disconnectComputation","autorun","handleDisconnect","unsubscribe","stop","getCount","id","get","doc","findOne","count","status","connected","_markedForResume","isSubscribed"],"mappings":"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","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport Counts from './collection';\nimport createFauxSubscription from './createFauxSubscription';\nimport prepareForProcess from '../lib/prepareForProcess.js';\nimport NamedQueryBase from '../../namedQuery/namedQuery.base';\n\nexport default class CountSubscription {\n    /**\n     * @param {*} query - The query to use when fetching counts\n     */\n    constructor(query) {\n        this.accessToken = new ReactiveVar(null);\n        this.fauxHandle = null;\n        this.query = query;\n    }\n\n    /**\n     * Starts a subscription request for reactive counts.\n     *\n     * @param {*} arg - The argument to pass to {name}.count.subscribe\n     * @param {*} callback\n     */\n    subscribe(arg, callback) {\n        // Don't try to resubscribe if arg hasn't changed\n        if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n            return this.fauxHandle;\n        }\n\n        this.accessToken.set(null);\n        this.lastArgs = arg;\n\n        Meteor.call(this.query.name + '.count.subscribe', arg, (error, token) => {\n            if (!this._markedForUnsubscribe) {\n                this.subscriptionHandle = Meteor.subscribe(this.query.name + '.count', token, callback);\n                this.accessToken.set(token);\n\n                this.disconnectComputation = Tracker.autorun(() => this.handleDisconnect());\n            }\n\n            this._markedForUnsubscribe = false;\n        });\n\n        this.fauxHandle = createFauxSubscription(this);\n        return this.fauxHandle;\n    }\n\n    /**\n     * Unsubscribes from the count endpoint, if there is such a subscription.\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.disconnectComputation.stop();\n            this.subscriptionHandle.stop();\n        } else {\n            // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n            // so set a flag to stop the subscription from being created\n            this._markedForUnsubscribe = true;\n        }\n\n        this.accessToken.set(null);\n        this.fauxHandle = null;\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n     *\n     * @returns {Number|null} - Current document count\n     */\n    getCount() {\n        const id = this.accessToken.get();\n        if (id === null) return null;\n\n        const doc = Counts.findOne(id);\n        return doc.count;\n    }\n\n    /**\n     * All session info gets deleted when the server goes down, so when the client attempts to\n     * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n     *\n     * This function prevents that by manually stopping and restarting the subscription when the\n     * connection to the server is lost.\n     */\n    handleDisconnect() {\n        const status = Meteor.status();\n        if (!status.connected) {\n            this._markedForResume = true;\n            this.fauxHandle = null;\n            this.subscriptionHandle.stop();\n        }\n\n        if (status.connected && this._markedForResume) {\n            this._markedForResume = false;\n            this.subscribe(this.lastArgs);\n        }\n    }\n\n    /**\n     * Returns whether or not a subscription request has been made.\n     */\n    isSubscribed() {\n        return this.accessToken.get() !== null;\n    }\n}\n"]},"sourceType":"script","hash":"7805bdea853246913a3cbf324ea941b75d0e9d15"}
