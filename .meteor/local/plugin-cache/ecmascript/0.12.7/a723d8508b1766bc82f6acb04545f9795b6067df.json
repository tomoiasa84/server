{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  default: () => storeHypernovaResults\n});\nlet applyProps;\nmodule.link(\"../lib/applyProps.js\", {\n  default(v) {\n    applyProps = v;\n  }\n\n}, 0);\nlet AggregateFilters;\nmodule.link(\"./aggregateSearchFilters.js\", {\n  default(v) {\n    AggregateFilters = v;\n  }\n\n}, 1);\nlet assemble;\nmodule.link(\"./assembler.js\", {\n  default(v) {\n    assemble = v;\n  }\n\n}, 2);\nlet assembleAggregateResults;\nmodule.link(\"./assembleAggregateResults.js\", {\n  default(v) {\n    assembleAggregateResults = v;\n  }\n\n}, 3);\nlet buildAggregatePipeline;\nmodule.link(\"./buildAggregatePipeline.js\", {\n  default(v) {\n    buildAggregatePipeline = v;\n  }\n\n}, 4);\nlet snapBackDottedFields;\nmodule.link(\"./lib/snapBackDottedFields\", {\n  default(v) {\n    snapBackDottedFields = v;\n  }\n\n}, 5);\n\nfunction storeHypernovaResults(childCollectionNode, userId) {\n  if (childCollectionNode.parent.results.length === 0) {\n    return childCollectionNode.results = [];\n  }\n\n  let {\n    filters,\n    options\n  } = applyProps(childCollectionNode);\n  const metaFilters = filters.$meta;\n  const aggregateFilters = new AggregateFilters(childCollectionNode, metaFilters);\n  delete filters.$meta;\n  const linker = childCollectionNode.linker;\n  const isVirtual = linker.isVirtual();\n  const collection = childCollectionNode.collection;\n\n  _.extend(filters, aggregateFilters.create()); // if it's not virtual then we retrieve them and assemble them here.\n\n\n  if (!isVirtual) {\n    const filteredOptions = _.omit(options, 'limit');\n\n    childCollectionNode.results = collection.find(filters, filteredOptions, userId).fetch();\n    assemble(childCollectionNode, (0, _objectSpread2.default)({}, options, {\n      metaFilters\n    }));\n  } else {\n    // virtuals arrive here\n    let {\n      pipeline,\n      containsDottedFields\n    } = buildAggregatePipeline(childCollectionNode, filters, options, userId);\n    let aggregateResults = collection.aggregate(pipeline);\n    /**\n     * If in aggregation it contains '.', we replace it with a custom string '___'\n     * And then after aggregation is complete we need to snap-it back to how it was.\n     */\n\n    if (containsDottedFields) {\n      snapBackDottedFields(aggregateResults);\n    }\n\n    assembleAggregateResults(childCollectionNode, aggregateResults, metaFilters);\n  }\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/hypernova/storeHypernovaResults.js"],"names":["module","export","default","storeHypernovaResults","applyProps","link","v","AggregateFilters","assemble","assembleAggregateResults","buildAggregatePipeline","snapBackDottedFields","childCollectionNode","userId","parent","results","length","filters","options","metaFilters","$meta","aggregateFilters","linker","isVirtual","collection","_","extend","create","filteredOptions","omit","find","fetch","pipeline","containsDottedFields","aggregateResults","aggregate"],"mappings":"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","sourcesContent":["import applyProps from '../lib/applyProps.js';\nimport AggregateFilters from './aggregateSearchFilters.js';\nimport assemble from './assembler.js';\nimport assembleAggregateResults from './assembleAggregateResults.js';\nimport buildAggregatePipeline from './buildAggregatePipeline.js';\nimport snapBackDottedFields from './lib/snapBackDottedFields';\n\nexport default function storeHypernovaResults(childCollectionNode, userId) {\n    if (childCollectionNode.parent.results.length === 0) {\n        return (childCollectionNode.results = []);\n    }\n\n    let { filters, options } = applyProps(childCollectionNode);\n\n    const metaFilters = filters.$meta;\n    const aggregateFilters = new AggregateFilters(\n        childCollectionNode,\n        metaFilters\n    );\n    delete filters.$meta;\n\n    const linker = childCollectionNode.linker;\n    const isVirtual = linker.isVirtual();\n    const collection = childCollectionNode.collection;\n\n    _.extend(filters, aggregateFilters.create());\n\n    // if it's not virtual then we retrieve them and assemble them here.\n    if (!isVirtual) {\n        const filteredOptions = _.omit(options, 'limit');\n\n        childCollectionNode.results = collection\n            .find(filters, filteredOptions, userId)\n            .fetch();\n\n        assemble(childCollectionNode, {\n            ...options,\n            metaFilters,\n        });\n    } else {\n        // virtuals arrive here\n        let { pipeline, containsDottedFields } = buildAggregatePipeline(\n            childCollectionNode,\n            filters,\n            options,\n            userId\n        );\n\n        let aggregateResults = collection.aggregate(pipeline);\n\n        /**\n         * If in aggregation it contains '.', we replace it with a custom string '___'\n         * And then after aggregation is complete we need to snap-it back to how it was.\n         */\n        if (containsDottedFields) {\n            snapBackDottedFields(aggregateResults);\n        }\n\n        assembleAggregateResults(\n            childCollectionNode,\n            aggregateResults,\n            metaFilters\n        );\n    }\n}\n"]},"sourceType":"script","hash":"a723d8508b1766bc82f6acb04545f9795b6067df"}
