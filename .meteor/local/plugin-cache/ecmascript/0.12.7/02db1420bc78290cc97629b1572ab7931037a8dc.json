{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"}},"code":"let applyProps;\nmodule.link(\"./applyProps.js\", {\n  default(v) {\n    applyProps = v;\n  }\n\n}, 0);\nlet assembleMetadata, removeLinkStorages, storeOneResults;\nmodule.link(\"./prepareForDelivery\", {\n  assembleMetadata(v) {\n    assembleMetadata = v;\n  },\n\n  removeLinkStorages(v) {\n    removeLinkStorages = v;\n  },\n\n  storeOneResults(v) {\n    storeOneResults = v;\n  }\n\n}, 1);\nlet prepareForDelivery;\nmodule.link(\"./prepareForDelivery\", {\n  default(v) {\n    prepareForDelivery = v;\n  }\n\n}, 2);\nlet getNodeNamespace;\nmodule.link(\"./createGraph\", {\n  getNodeNamespace(v) {\n    getNodeNamespace = v;\n  }\n\n}, 3);\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @param fetchOptions\n * @returns {*}\n */\nfunction fetch(node, parentObject, fetchOptions = {}) {\n  let {\n    filters,\n    options\n  } = applyProps(node); // add subscription filter\n\n  if (fetchOptions.scoped && fetchOptions.subscriptionHandle) {\n    _.extend(filters, fetchOptions.subscriptionHandle.scopeQuery());\n  } // add query path filter\n\n\n  if (fetchOptions.scoped) {\n    _.extend(filters, {\n      [`_query_path_${getNodeNamespace(node)}`]: {\n        $exists: true\n      }\n    });\n  }\n\n  let results = [];\n\n  if (parentObject) {\n    let accessor = node.linker.createLink(parentObject, node.collection);\n\n    if (node.isVirtual) {\n      options.fields = options.fields || {};\n\n      _.extend(options.fields, {\n        [node.linkStorageField]: 1\n      });\n    }\n\n    results = accessor.find(filters, options).fetch();\n  } else {\n    results = node.collection.find(filters, options).fetch();\n  }\n\n  _.each(node.collectionNodes, collectionNode => {\n    _.each(results, result => {\n      const collectionNodeResults = fetch(collectionNode, result);\n      result[collectionNode.linkName] = collectionNodeResults; //delete result[node.linker.linkStorageField];\n\n      /**\n       * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n       * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n       * the results?\n       *\n       * Other possible ways:\n       * - do something like assemble() in storeHypernovaResults\n       * - pass node.results to accessor above and find with sift\n       */\n\n      collectionNode.results.push(...collectionNodeResults); // this was not working because all references must be replaced in snapBackCaches, not only the ones that are \n      // found first\n      // const currentIds = _.pluck(collectionNode.results, '_id');\n      // collectionNode.results.push(...collectionNodeResults.filter(res => !_.contains(currentIds, res._id)));\n    });\n  });\n\n  return results;\n}\n\nmodule.exportDefault((node, params, fetchOptions) => {\n  node.results = fetch(node, null, fetchOptions);\n  prepareForDelivery(node, params);\n  return node.results;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/recursiveFetch.js"],"names":["applyProps","module","link","default","v","assembleMetadata","removeLinkStorages","storeOneResults","prepareForDelivery","getNodeNamespace","fetch","node","parentObject","fetchOptions","filters","options","scoped","subscriptionHandle","_","extend","scopeQuery","$exists","results","accessor","linker","createLink","collection","isVirtual","fields","linkStorageField","find","each","collectionNodes","collectionNode","result","collectionNodeResults","linkName","push","exportDefault","params"],"mappings":"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","sourcesContent":["import applyProps from './applyProps.js';\nimport { assembleMetadata, removeLinkStorages, storeOneResults } from './prepareForDelivery';\nimport prepareForDelivery from './prepareForDelivery';\nimport {getNodeNamespace} from './createGraph';\n\n/**\n * This is always run client side to build the data graph out of client-side collections.\n *\n * @param node\n * @param parentObject\n * @param fetchOptions\n * @returns {*}\n */\nfunction fetch(node, parentObject, fetchOptions = {}) {\n    let {filters, options} = applyProps(node);\n    // add subscription filter\n    if (fetchOptions.scoped && fetchOptions.subscriptionHandle) {\n        _.extend(filters, fetchOptions.subscriptionHandle.scopeQuery());\n    }\n    // add query path filter\n    if (fetchOptions.scoped) {\n        _.extend(filters, {[`_query_path_${getNodeNamespace(node)}`]: {$exists: true}});\n    }\n\n    let results = [];\n\n    if (parentObject) {\n        let accessor = node.linker.createLink(parentObject, node.collection);\n\n        if (node.isVirtual) {\n            options.fields = options.fields || {};\n            _.extend(options.fields, {\n                [node.linkStorageField]: 1\n            });\n        }\n\n        results = accessor.find(filters, options).fetch();\n    } else {\n        results = node.collection.find(filters, options).fetch();\n    }\n\n    _.each(node.collectionNodes, collectionNode => {\n        _.each(results, result => {\n            const collectionNodeResults = fetch(collectionNode, result);\n            result[collectionNode.linkName] = collectionNodeResults;\n            //delete result[node.linker.linkStorageField];\n\n            /**\n             * Push into the results, because snapBackCaches() in prepareForDelivery does not work otherwise.\n             * This is non-optimal, can we be sure that every item in results contains _id and add only if not in\n             * the results?\n             *\n             * Other possible ways:\n             * - do something like assemble() in storeHypernovaResults\n             * - pass node.results to accessor above and find with sift\n             */\n\n            collectionNode.results.push(...collectionNodeResults);\n\n            // this was not working because all references must be replaced in snapBackCaches, not only the ones that are \n            // found first\n            // const currentIds = _.pluck(collectionNode.results, '_id');\n            // collectionNode.results.push(...collectionNodeResults.filter(res => !_.contains(currentIds, res._id)));\n        })\n    });\n\n    return results;\n}\n\nexport default (node, params, fetchOptions) => {\n    node.results = fetch(node, null, fetchOptions);\n\n    prepareForDelivery(node, params);\n\n    return node.results;\n}\n"]},"sourceType":"script","hash":"02db1420bc78290cc97629b1572ab7931037a8dc"}
