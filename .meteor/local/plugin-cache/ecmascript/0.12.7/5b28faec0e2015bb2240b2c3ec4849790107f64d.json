{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js"}},"code":"module.export({\n  default: () => restrictFields\n});\nconst deepFilterFieldsArray = ['$and', '$or', '$nor'];\nconst deepFilterFieldsObject = ['$not'];\n/**\n * This is used to restrict some fields to some users, by passing the fields as array in the exposure object\n * For example in an user exposure: restrictFields(options, ['services', 'createdAt'])\n *\n * @param filters Object\n * @param options Object\n * @param restrictedFields Array\n */\n\nfunction restrictFields(filters, options, restrictedFields) {\n  if (!_.isArray(restrictedFields)) {\n    throw new Meteor.Error('invalid-parameters', 'Please specify an array of restricted fields.');\n  }\n\n  cleanFilters(filters, restrictedFields);\n  cleanOptions(options, restrictedFields);\n}\n\n/**\n * Deep cleans filters\n *\n * @param filters\n * @param restrictedFields\n */\nfunction cleanFilters(filters, restrictedFields) {\n  if (filters) {\n    cleanObject(filters, restrictedFields);\n  }\n\n  deepFilterFieldsArray.forEach(field => {\n    if (filters[field]) {\n      filters[field].forEach(element => cleanFilters(element, restrictedFields));\n    }\n  });\n  deepFilterFieldsObject.forEach(field => {\n    if (filters[field]) {\n      cleanFilters(filters[field], restrictedFields);\n    }\n  });\n}\n/**\n * Deeply cleans options\n *\n * @param options\n * @param restrictedFields\n */\n\n\nfunction cleanOptions(options, restrictedFields) {\n  if (options.fields) {\n    cleanObject(options.fields, restrictedFields);\n\n    if (_.keys(options.fields).length === 0) {\n      _.extend(options.fields, {\n        _id: 1\n      });\n    }\n  } else {\n    options.fields = {\n      _id: 1\n    };\n  }\n\n  if (options.sort) {\n    cleanObject(options.sort, restrictedFields);\n  }\n}\n/**\n * Cleans the object (not deeply)\n *\n * @param object\n * @param restrictedFields\n */\n\n\nfunction cleanObject(object, restrictedFields) {\n  _.each(object, (value, key) => {\n    restrictedFields.forEach(restrictedField => {\n      if (matching(restrictedField, key)) {\n        delete object[key];\n      }\n    });\n  });\n}\n/**\n * Returns true if field == subfield or if `${field}.` INCLUDED in subfield\n * Example: \"profile\" and \"profile.firstName\" will be a matching field\n * @param field\n * @param subfield\n * @returns {boolean}\n */\n\n\nfunction matching(field, subfield) {\n  if (field === subfield) {\n    return true;\n  }\n\n  return subfield.slice(0, field.length + 1) === field + '.';\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/exposure/lib/restrictFields.js"],"names":["module","export","default","restrictFields","deepFilterFieldsArray","deepFilterFieldsObject","filters","options","restrictedFields","_","isArray","Meteor","Error","cleanFilters","cleanOptions","cleanObject","forEach","field","element","fields","keys","length","extend","_id","sort","object","each","value","key","restrictedField","matching","subfield","slice"],"mappings":"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","sourcesContent":["const deepFilterFieldsArray = ['$and', '$or', '$nor'];\nconst deepFilterFieldsObject = ['$not'];\n\n/**\n * This is used to restrict some fields to some users, by passing the fields as array in the exposure object\n * For example in an user exposure: restrictFields(options, ['services', 'createdAt'])\n *\n * @param filters Object\n * @param options Object\n * @param restrictedFields Array\n */\nexport default function restrictFields(filters, options, restrictedFields) {\n    if (!_.isArray(restrictedFields)) {\n        throw new Meteor.Error('invalid-parameters', 'Please specify an array of restricted fields.');\n    }\n\n    cleanFilters(filters, restrictedFields);\n    cleanOptions(options, restrictedFields)\n}\n\n/**\n * Deep cleans filters\n *\n * @param filters\n * @param restrictedFields\n */\nfunction cleanFilters(filters, restrictedFields) {\n    if (filters) {\n        cleanObject(filters, restrictedFields);\n    }\n\n    deepFilterFieldsArray.forEach(field => {\n        if (filters[field]) {\n            filters[field].forEach(element => cleanFilters(element, restrictedFields));\n        }\n    });\n\n    deepFilterFieldsObject.forEach(field => {\n        if (filters[field]) {\n            cleanFilters(filters[field], restrictedFields);\n        }\n    });\n}\n\n/**\n * Deeply cleans options\n *\n * @param options\n * @param restrictedFields\n */\nfunction cleanOptions(options, restrictedFields) {\n    if (options.fields) {\n        cleanObject(options.fields, restrictedFields);\n\n        if (_.keys(options.fields).length === 0) {\n            _.extend(options.fields, {_id: 1})\n        }\n    } else {\n        options.fields = {_id: 1};\n    }\n\n    if (options.sort) {\n        cleanObject(options.sort, restrictedFields);\n    }\n}\n\n/**\n * Cleans the object (not deeply)\n *\n * @param object\n * @param restrictedFields\n */\nfunction cleanObject(object, restrictedFields) {\n    _.each(object, (value, key) => {\n        restrictedFields.forEach((restrictedField) => {\n            if (matching(restrictedField, key)) {\n                delete object[key];\n            }\n        })\n    });\n}\n\n/**\n * Returns true if field == subfield or if `${field}.` INCLUDED in subfield\n * Example: \"profile\" and \"profile.firstName\" will be a matching field\n * @param field\n * @param subfield\n * @returns {boolean}\n */\nfunction matching(field, subfield) {\n    if (field === subfield) {\n        return true;\n    }\n\n    return subfield.slice(0, field.length + 1) === field + '.';\n}"]},"sourceType":"script","hash":"5b28faec0e2015bb2240b2c3ec4849790107f64d"}
