{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/counts/countSubscription.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"}},"code":"module.export({\n  default: () => CountSubscription\n});\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n\n}, 2);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 3);\nlet Counts;\nmodule.link(\"./collection\", {\n  default(v) {\n    Counts = v;\n  }\n\n}, 4);\nlet createFauxSubscription;\nmodule.link(\"./createFauxSubscription\", {\n  default(v) {\n    createFauxSubscription = v;\n  }\n\n}, 5);\nlet prepareForProcess;\nmodule.link(\"../lib/prepareForProcess.js\", {\n  default(v) {\n    prepareForProcess = v;\n  }\n\n}, 6);\nlet NamedQueryBase;\nmodule.link(\"../../namedQuery/namedQuery.base\", {\n  default(v) {\n    NamedQueryBase = v;\n  }\n\n}, 7);\n\nclass CountSubscription {\n  /**\n   * @param {*} query - The query to use when fetching counts\n   */\n  constructor(query) {\n    this.accessToken = new ReactiveVar(null);\n    this.fauxHandle = null;\n    this.query = query;\n  }\n  /**\n   * Starts a subscription request for reactive counts.\n   *\n   * @param {*} arg - The argument to pass to {name}.count.subscribe\n   * @param {*} callback\n   */\n\n\n  subscribe(arg, callback) {\n    // Don't try to resubscribe if arg hasn't changed\n    if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n      return this.fauxHandle;\n    }\n\n    this.accessToken.set(null);\n    this.lastArgs = arg;\n    Meteor.call(this.query.name + '.count.subscribe', arg, (error, token) => {\n      if (!this._markedForUnsubscribe) {\n        this.subscriptionHandle = Meteor.subscribe(this.query.name + '.count', token, callback);\n        this.accessToken.set(token);\n        this.disconnectComputation = Tracker.autorun(() => this.handleDisconnect());\n      }\n\n      this._markedForUnsubscribe = false;\n    });\n    this.fauxHandle = createFauxSubscription(this);\n    return this.fauxHandle;\n  }\n  /**\n   * Unsubscribes from the count endpoint, if there is such a subscription.\n   */\n\n\n  unsubscribe() {\n    if (this.subscriptionHandle) {\n      this.disconnectComputation.stop();\n      this.subscriptionHandle.stop();\n    } else {\n      // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n      // so set a flag to stop the subscription from being created\n      this._markedForUnsubscribe = true;\n    }\n\n    this.accessToken.set(null);\n    this.fauxHandle = null;\n    this.subscriptionHandle = null;\n  }\n  /**\n   * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n   *\n   * @returns {Number|null} - Current document count\n   */\n\n\n  getCount() {\n    const id = this.accessToken.get();\n    if (id === null) return null;\n    const doc = Counts.findOne(id);\n    return doc.count;\n  }\n  /**\n   * All session info gets deleted when the server goes down, so when the client attempts to\n   * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n   *\n   * This function prevents that by manually stopping and restarting the subscription when the\n   * connection to the server is lost.\n   */\n\n\n  handleDisconnect() {\n    const status = Meteor.status();\n\n    if (!status.connected) {\n      this._markedForResume = true;\n      this.fauxHandle = null;\n      this.subscriptionHandle.stop();\n    }\n\n    if (status.connected && this._markedForResume) {\n      this._markedForResume = false;\n      this.subscribe(this.lastArgs);\n    }\n  }\n  /**\n   * Returns whether or not a subscription request has been made.\n   */\n\n\n  isSubscribed() {\n    return this.accessToken.get() !== null;\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/counts/countSubscription.js"],"names":["module","export","default","CountSubscription","EJSON","link","v","Meteor","ReactiveVar","Tracker","Counts","createFauxSubscription","prepareForProcess","NamedQueryBase","constructor","query","accessToken","fauxHandle","subscribe","arg","callback","equals","lastArgs","set","call","name","error","token","_markedForUnsubscribe","subscriptionHandle","disconnectComputation","autorun","handleDisconnect","unsubscribe","stop","getCount","id","get","doc","findOne","count","status","connected","_markedForResume","isSubscribed"],"mappings":"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","sourcesContent":["import { EJSON } from 'meteor/ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport Counts from './collection';\nimport createFauxSubscription from './createFauxSubscription';\nimport prepareForProcess from '../lib/prepareForProcess.js';\nimport NamedQueryBase from '../../namedQuery/namedQuery.base';\n\nexport default class CountSubscription {\n    /**\n     * @param {*} query - The query to use when fetching counts\n     */\n    constructor(query) {\n        this.accessToken = new ReactiveVar(null);\n        this.fauxHandle = null;\n        this.query = query;\n    }\n\n    /**\n     * Starts a subscription request for reactive counts.\n     *\n     * @param {*} arg - The argument to pass to {name}.count.subscribe\n     * @param {*} callback\n     */\n    subscribe(arg, callback) {\n        // Don't try to resubscribe if arg hasn't changed\n        if (EJSON.equals(this.lastArgs, arg) && this.fauxHandle) {\n            return this.fauxHandle;\n        }\n\n        this.accessToken.set(null);\n        this.lastArgs = arg;\n\n        Meteor.call(this.query.name + '.count.subscribe', arg, (error, token) => {\n            if (!this._markedForUnsubscribe) {\n                this.subscriptionHandle = Meteor.subscribe(this.query.name + '.count', token, callback);\n                this.accessToken.set(token);\n\n                this.disconnectComputation = Tracker.autorun(() => this.handleDisconnect());\n            }\n\n            this._markedForUnsubscribe = false;\n        });\n\n        this.fauxHandle = createFauxSubscription(this);\n        return this.fauxHandle;\n    }\n\n    /**\n     * Unsubscribes from the count endpoint, if there is such a subscription.\n     */\n    unsubscribe() {\n        if (this.subscriptionHandle) {\n            this.disconnectComputation.stop();\n            this.subscriptionHandle.stop();\n        } else {\n            // If we hit this branch, then Meteor.call in subscribe hasn't finished yet\n            // so set a flag to stop the subscription from being created\n            this._markedForUnsubscribe = true;\n        }\n\n        this.accessToken.set(null);\n        this.fauxHandle = null;\n        this.subscriptionHandle = null;\n    }\n\n    /**\n     * Reactively fetch current document count. Returns null if the subscription is not ready yet.\n     *\n     * @returns {Number|null} - Current document count\n     */\n    getCount() {\n        const id = this.accessToken.get();\n        if (id === null) return null;\n\n        const doc = Counts.findOne(id);\n        return doc.count;\n    }\n\n    /**\n     * All session info gets deleted when the server goes down, so when the client attempts to\n     * optimistically resume the '.count' publication, the server will throw a 'no-request' error.\n     *\n     * This function prevents that by manually stopping and restarting the subscription when the\n     * connection to the server is lost.\n     */\n    handleDisconnect() {\n        const status = Meteor.status();\n        if (!status.connected) {\n            this._markedForResume = true;\n            this.fauxHandle = null;\n            this.subscriptionHandle.stop();\n        }\n\n        if (status.connected && this._markedForResume) {\n            this._markedForResume = false;\n            this.subscribe(this.lastArgs);\n        }\n    }\n\n    /**\n     * Returns whether or not a subscription request has been made.\n     */\n    isSubscribed() {\n        return this.accessToken.get() !== null;\n    }\n}\n"]},"sourceType":"script","hash":"886251293df21e9b3b08113f1df678fe5dff4e75"}
