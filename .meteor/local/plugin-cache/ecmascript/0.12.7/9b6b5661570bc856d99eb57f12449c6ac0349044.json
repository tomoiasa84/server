{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/createQuery.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/createQuery.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/createQuery.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/createQuery.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/createQuery.js"}},"code":"let Query;\nmodule.link(\"./query/query.js\", {\n  default(v) {\n    Query = v;\n  }\n\n}, 0);\nlet NamedQuery;\nmodule.link(\"./namedQuery/namedQuery.js\", {\n  default(v) {\n    NamedQuery = v;\n  }\n\n}, 1);\nlet NamedQueryStore;\nmodule.link(\"./namedQuery/store.js\", {\n  default(v) {\n    NamedQueryStore = v;\n  }\n\n}, 2);\nmodule.exportDefault((...args) => {\n  if (typeof args[0] === 'string') {\n    let [name, body, options] = args;\n    options = options || {}; // It's a resolver query\n\n    if (_.isFunction(body)) {\n      return createNamedQuery(name, null, body, options);\n    }\n\n    const entryPointName = _.first(_.keys(body));\n\n    const collection = Mongo.Collection.get(entryPointName);\n\n    if (!collection) {\n      throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`);\n    }\n\n    return createNamedQuery(name, collection, body[entryPointName], options);\n  } else {\n    // Query Creation, it can have an endpoint as collection or as a NamedQuery\n    let [body, options] = args;\n    options = options || {};\n\n    const entryPointName = _.first(_.keys(body));\n\n    const collection = Mongo.Collection.get(entryPointName);\n\n    if (!collection) {\n      if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n        console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`);\n      }\n\n      return createNamedQuery(entryPointName, null, {}, {\n        params: body[entryPointName]\n      });\n    } else {\n      return createNormalQuery(collection, body[entryPointName], options);\n    }\n  }\n});\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n  // if it exists already, we re-use it\n  const namedQuery = NamedQueryStore.get(name);\n  let query;\n\n  if (!namedQuery) {\n    query = new NamedQuery(name, collection, body, options);\n    NamedQueryStore.add(name, query);\n  } else {\n    query = namedQuery.clone(options.params);\n  }\n\n  return query;\n}\n\nfunction createNormalQuery(collection, body, options) {\n  return new Query(collection, body, options);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/createQuery.js"],"names":["Query","module","link","default","v","NamedQuery","NamedQueryStore","exportDefault","args","name","body","options","_","isFunction","createNamedQuery","entryPointName","first","keys","collection","Mongo","Collection","get","Meteor","Error","isDevelopment","console","warn","params","createNormalQuery","namedQuery","query","add","clone"],"mappings":"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","sourcesContent":["import Query from './query/query.js';\nimport NamedQuery from './namedQuery/namedQuery.js';\nimport NamedQueryStore from './namedQuery/store.js';\n\n/**\n * This is a polymorphic function, it allows you to create a query as an object\n * or it also allows you to re-use an existing query if it's a named one\n *\n * @param args\n * @returns {*}\n */\nexport default (...args) => {\n    if (typeof args[0] === 'string') {\n        let [name, body, options] = args;\n        options = options || {};\n\n        // It's a resolver query\n        if (_.isFunction(body)) {\n            return createNamedQuery(name, null, body, options);\n        }\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n        }\n\n        return createNamedQuery(name, collection, body[entryPointName], options);\n    } else {\n        // Query Creation, it can have an endpoint as collection or as a NamedQuery\n        let [body, options] = args;\n        options = options || {};\n\n        const entryPointName = _.first(_.keys(body));\n        const collection = Mongo.Collection.get(entryPointName);\n\n        if (!collection) {\n            if (Meteor.isDevelopment && !NamedQueryStore.get(entryPointName)) {\n                console.warn(`You are creating a query with the entry point \"${entryPointName}\", but there was no collection found for it (maybe you forgot to import it client-side?). It's assumed that it's referencing a NamedQuery.`)\n            }\n\n            return createNamedQuery(entryPointName, null, {}, {params: body[entryPointName]});\n        } else {\n            return createNormalQuery(collection, body[entryPointName], options);\n        }\n    }\n}\n\nfunction createNamedQuery(name, collection, body, options = {}) {\n    // if it exists already, we re-use it\n    const namedQuery = NamedQueryStore.get(name);\n    let query;\n\n    if (!namedQuery) {\n        query = new NamedQuery(name, collection, body, options);\n        NamedQueryStore.add(name, query);\n    } else {\n        query = namedQuery.clone(options.params);\n    }\n\n    return query;\n}\n\nfunction createNormalQuery(collection, body, options)  {\n    return new Query(collection, body, options);\n}\n"]},"sourceType":"script","hash":"9b6b5661570bc856d99eb57f12449c6ac0349044"}
