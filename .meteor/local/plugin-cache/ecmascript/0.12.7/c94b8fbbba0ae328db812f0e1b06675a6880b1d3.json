{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/base.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/base.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/base.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/base.js"}},"code":"module.export({\n  default: () => Link\n});\nlet SmartArgs;\nmodule.link(\"./lib/smartArguments.js\", {\n  default(v) {\n    SmartArgs = v;\n  }\n\n}, 0);\nlet createSearchFilters;\nmodule.link(\"../lib/createSearchFilters\", {\n  default(v) {\n    createSearchFilters = v;\n  }\n\n}, 1);\n\nclass Link {\n  get config() {\n    return this.linker.linkConfig;\n  }\n\n  get isVirtual() {\n    return this.linker.isVirtual();\n  }\n\n  constructor(linker, object, collection) {\n    this.linker = linker;\n    this.object = object;\n    this.linkedCollection = collection ? collection : linker.getLinkedCollection();\n\n    if (this.linker.isVirtual()) {\n      this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n    } else {\n      this.linkStorageField = this.config.field;\n    }\n  }\n  /**\n   * Gets the stored link information value\n   * @returns {*}\n   */\n\n\n  value() {\n    if (this.isVirtual) {\n      throw new Meteor.Error('You can only take the value from the main link.');\n    }\n\n    return this.object[this.linkStorageField];\n  }\n  /**\n   * Finds linked data.\n   *\n   * @param filters\n   * @param options\n   * @returns {*}\n   * @param userId\n   */\n\n\n  find(filters = {}, options = {}, userId = undefined) {\n    let linker = this.linker;\n    const linkedCollection = this.linkedCollection;\n    let $metaFilters;\n\n    if (filters.$meta) {\n      $metaFilters = filters.$meta;\n      delete filters.$meta;\n    }\n\n    const searchFilters = createSearchFilters(this.object, this.linkStorageField, linker.strategy, linker.isVirtual(), $metaFilters);\n\n    let appliedFilters = _.extend({}, filters, searchFilters); // see https://github.com/cult-of-coders/grapher/issues/134\n    // happens due to recursive importing of modules\n    // TODO: find another way to do this\n\n\n    if (linkedCollection.find) {\n      return linkedCollection.find(appliedFilters, options, userId);\n    } else {\n      return linkedCollection.default.find(appliedFilters, options, userId);\n    }\n  }\n  /**\n   * @param filters\n   * @param options\n   * @param others\n   * @returns {*|{content}|any}\n   */\n\n\n  fetch(filters, options, ...others) {\n    let result = this.find(filters, options, ...others).fetch();\n\n    if (this.linker.isOneResult()) {\n      return _.first(result);\n    }\n\n    return result;\n  }\n  /**\n   * This is just like fetch() but forces to get an array even if it's single result\n   * \n   * @param {*} filters \n   * @param {*} options \n   * @param  {...any} others \n   */\n\n\n  fetchAsArray(filters, options, ...others) {\n    return this.find(filters, options, ...others).fetch();\n  }\n  /**\n   * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n   * We use clean to make it an empty array by default.\n   */\n\n\n  clean() {}\n  /**\n   * Extracts a single id\n   */\n\n\n  identifyId(what, saveToDatabase) {\n    return SmartArgs.getId(what, {\n      saveToDatabase,\n      collection: this.linkedCollection\n    });\n  }\n  /**\n   * Extracts the ids of object(s) or strings and returns an array.\n   */\n\n\n  identifyIds(what, saveToDatabase) {\n    return SmartArgs.getIds(what, {\n      saveToDatabase,\n      collection: this.linkedCollection\n    });\n  }\n  /**\n   * Checks when linking data, if the ids are valid with the linked collection.\n   * @throws Meteor.Error\n   * @param ids\n   *\n   * @protected\n   */\n\n\n  _validateIds(ids) {\n    if (!_.isArray(ids)) {\n      ids = [ids];\n    }\n\n    const validIds = this.linkedCollection.find({\n      _id: {\n        $in: ids\n      }\n    }, {\n      fields: {\n        _id: 1\n      }\n    }).fetch().map(doc => doc._id);\n\n    if (validIds.length != ids.length) {\n      throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`);\n    }\n  }\n  /**\n   * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n   *\n   * @param action\n   * @param what\n   * @param metadata\n   *\n   * @protected\n   */\n\n\n  _virtualAction(action, what, metadata) {\n    const linker = this.linker.linkConfig.relatedLinker; // its an unset operation most likely.\n\n    if (what === undefined) {\n      const reversedLink = linker.createLink(this.fetch());\n      reversedLink.unset();\n      return;\n    }\n\n    if (!_.isArray(what)) {\n      what = [what];\n    }\n\n    what = _.map(what, element => {\n      if (!_.isObject(element)) {\n        return linker.mainCollection.findOne(element);\n      } else {\n        if (!element._id) {\n          const elementId = linker.mainCollection.insert(element);\n\n          _.extend(element, linker.mainCollection.findOne(elementId));\n        }\n\n        return element;\n      }\n    });\n    return _.map(what, element => {\n      const reversedLink = linker.createLink(element);\n\n      if (action == 'metadata') {\n        if (linker.isSingle()) {\n          return reversedLink.metadata(metadata);\n        } else {\n          return reversedLink.metadata(this.object, metadata);\n        }\n      } else if (action == 'add' || action == 'set') {\n        if (linker.isSingle()) {\n          reversedLink.set(this.object, metadata);\n        } else {\n          reversedLink.add(this.object, metadata);\n        }\n      } else {\n        if (linker.isSingle()) {\n          reversedLink.unset();\n        } else {\n          reversedLink.remove(this.object);\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/base.js"],"names":["module","export","default","Link","SmartArgs","link","v","createSearchFilters","config","linker","linkConfig","isVirtual","constructor","object","collection","linkedCollection","getLinkedCollection","linkStorageField","relatedLinker","field","value","Meteor","Error","find","filters","options","userId","undefined","$metaFilters","$meta","searchFilters","strategy","appliedFilters","_","extend","fetch","others","result","isOneResult","first","fetchAsArray","clean","identifyId","what","saveToDatabase","getId","identifyIds","getIds","_validateIds","ids","isArray","validIds","_id","$in","fields","map","doc","length","_name","difference","join","_virtualAction","action","metadata","reversedLink","createLink","unset","element","isObject","mainCollection","findOne","elementId","insert","isSingle","set","add","remove"],"mappings":"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","sourcesContent":["import SmartArgs from './lib/smartArguments.js';\nimport createSearchFilters from '../lib/createSearchFilters';\n\nexport default class Link {\n    get config() { return this.linker.linkConfig; }\n\n    get isVirtual() { return this.linker.isVirtual() }\n\n    constructor(linker, object, collection) {\n        this.linker = linker;\n        this.object = object;\n        this.linkedCollection = (collection) ? collection : linker.getLinkedCollection();\n\n        if (this.linker.isVirtual()) {\n            this.linkStorageField = this.config.relatedLinker.linkConfig.field;\n        } else {\n            this.linkStorageField = this.config.field;\n        }\n    }\n\n    /**\n     * Gets the stored link information value\n     * @returns {*}\n     */\n    value() {\n        if (this.isVirtual) {\n            throw new Meteor.Error('You can only take the value from the main link.');\n        }\n\n        return this.object[this.linkStorageField];\n    }\n\n    /**\n     * Finds linked data.\n     *\n     * @param filters\n     * @param options\n     * @returns {*}\n     * @param userId\n     */\n    find(filters = {}, options = {}, userId = undefined) {\n        let linker = this.linker;\n        const linkedCollection = this.linkedCollection;\n\n        let $metaFilters;\n        if (filters.$meta) {\n            $metaFilters = filters.$meta;\n            delete filters.$meta;\n        }\n\n        const searchFilters = createSearchFilters(\n            this.object,\n            this.linkStorageField,\n            linker.strategy,\n            linker.isVirtual(),\n            $metaFilters\n        );\n\n        let appliedFilters = _.extend({}, filters, searchFilters);\n\n        // see https://github.com/cult-of-coders/grapher/issues/134\n        // happens due to recursive importing of modules\n        // TODO: find another way to do this\n        if (linkedCollection.find) {\n            return linkedCollection.find(appliedFilters, options, userId)\n        } else {\n            return linkedCollection.default.find(appliedFilters, options, userId);\n        }\n    }\n\n    /**\n     * @param filters\n     * @param options\n     * @param others\n     * @returns {*|{content}|any}\n     */\n    fetch(filters, options, ...others) {\n        let result = this.find(filters, options, ...others).fetch();\n\n        if (this.linker.isOneResult()) {\n            return _.first(result);\n        }\n\n        return result;\n    }\n\n    /**\n     * This is just like fetch() but forces to get an array even if it's single result\n     * \n     * @param {*} filters \n     * @param {*} options \n     * @param  {...any} others \n     */\n    fetchAsArray(filters, options, ...others) {\n        return this.find(filters, options, ...others).fetch()\n    }\n\n    /**\n     * When we are dealing with multiple type relationships, $in would require an array. If the field value is null, it will fail\n     * We use clean to make it an empty array by default.\n     */\n    clean() {}\n\n    /**\n     * Extracts a single id\n     */\n    identifyId(what, saveToDatabase) {\n        return SmartArgs.getId(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Extracts the ids of object(s) or strings and returns an array.\n     */\n    identifyIds(what, saveToDatabase) {\n        return SmartArgs.getIds(what, {\n            saveToDatabase,\n            collection: this.linkedCollection\n        });\n    }\n\n    /**\n     * Checks when linking data, if the ids are valid with the linked collection.\n     * @throws Meteor.Error\n     * @param ids\n     *\n     * @protected\n     */\n    _validateIds(ids) {\n        if (!_.isArray(ids)) {\n            ids = [ids];\n        }\n\n        const validIds = this.linkedCollection.find({\n            _id: {$in: ids}\n        }, {fields: {_id: 1}}).fetch().map(doc => doc._id);\n\n        if (validIds.length != ids.length) {\n            throw new Meteor.Error('not-found', `You tried to create links with non-existing id(s) inside \"${this.linkedCollection._name}\": ${_.difference(ids, validIds).join(', ')}`)\n        }\n    }\n\n    /**\n     * This is for allowing commands such as set/unset/add/remove/metadata from the virtual link.\n     *\n     * @param action\n     * @param what\n     * @param metadata\n     *\n     * @protected\n     */\n    _virtualAction(action, what, metadata) {\n        const linker = this.linker.linkConfig.relatedLinker;\n\n        // its an unset operation most likely.\n        if (what === undefined) {\n            const reversedLink = linker.createLink(this.fetch());\n            reversedLink.unset();\n\n            return;\n        }\n\n        if (!_.isArray(what)) {\n            what = [what];\n        }\n\n        what = _.map(what, element => {\n            if (!_.isObject(element)) {\n                return linker.mainCollection.findOne(element);\n            } else {\n                if (!element._id) {\n                    const elementId = linker.mainCollection.insert(element);\n                    _.extend(element, linker.mainCollection.findOne(elementId));\n                }\n\n                return element;\n            }\n        });\n\n        return _.map(what, element => {\n            const reversedLink = linker.createLink(element);\n\n            if (action == 'metadata') {\n                if (linker.isSingle()) {\n                    return reversedLink.metadata(metadata);\n                } else {\n                    return reversedLink.metadata(this.object, metadata);\n                }\n            } else if (action == 'add' || action == 'set') {\n                if (linker.isSingle()) {\n                    reversedLink.set(this.object, metadata);\n                } else {\n                    reversedLink.add(this.object, metadata);\n                }\n            } else {\n                if (linker.isSingle()) {\n                    reversedLink.unset();\n                } else {\n                    reversedLink.remove(this.object);\n                }\n            }\n        });\n    }\n}\n"]},"sourceType":"script","hash":"c94b8fbbba0ae328db812f0e1b06675a6880b1d3"}
