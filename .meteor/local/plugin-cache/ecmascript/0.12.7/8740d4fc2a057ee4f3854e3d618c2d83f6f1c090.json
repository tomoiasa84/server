{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/query/lib/createGraph.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/createGraph.js"}},"code":"module.export({\n  specialFields: function () {\n    return specialFields;\n  },\n  createNodes: function () {\n    return createNodes;\n  },\n  addFieldNode: function () {\n    return addFieldNode;\n  },\n  getNodeNamespace: function () {\n    return getNodeNamespace;\n  }\n});\nvar CollectionNode;\nmodule.link(\"../nodes/collectionNode.js\", {\n  \"default\": function (v) {\n    CollectionNode = v;\n  }\n}, 0);\nvar FieldNode;\nmodule.link(\"../nodes/fieldNode.js\", {\n  \"default\": function (v) {\n    FieldNode = v;\n  }\n}, 1);\nvar ReducerNode;\nmodule.link(\"../nodes/reducerNode.js\", {\n  \"default\": function (v) {\n    ReducerNode = v;\n  }\n}, 2);\nvar dotize;\nmodule.link(\"./dotize.js\", {\n  \"default\": function (v) {\n    dotize = v;\n  }\n}, 3);\nvar createReducers;\nmodule.link(\"../reducers/lib/createReducers\", {\n  \"default\": function (v) {\n    createReducers = v;\n  }\n}, 4);\nvar specialFields = ['$filters', '$options', '$postFilters', '$postOptions', '$postFilter'];\n\nfunction createNodes(root) {\n  // this is a fix for phantomjs tests (don't really understand it.)\n  if (!_.isObject(root.body)) {\n    return;\n  }\n\n  _.each(root.body, function (body, fieldName) {\n    if (!body) {\n      return;\n    } // if it's a prop\n\n\n    if (_.contains(specialFields, fieldName)) {\n      root.addProp(fieldName, body);\n      return;\n    } // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n    // TODO: find another way to do this\n\n\n    if (root.collection.default) {\n      root.collection = root.collection.default;\n    } // checking if it is a link.\n\n\n    var linker = root.collection.getLinker(fieldName);\n\n    if (linker) {\n      // check if it is a cached link\n      // if yes, then we need to explicitly define this at collection level\n      // so when we transform the data for delivery, we move it to the link name\n      if (linker.isDenormalized()) {\n        if (linker.isSubBodyDenormalized(body)) {\n          handleDenormalized(root, linker, body, fieldName);\n          return;\n        }\n      }\n\n      var subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n      root.add(subroot, linker);\n      createNodes(subroot);\n      return;\n    } // checking if it's a reducer\n\n\n    var reducer = root.collection.getReducer(fieldName);\n\n    if (reducer) {\n      var reducerNode = new ReducerNode(fieldName, reducer);\n      root.add(reducerNode);\n    } // it's most likely a field then\n\n\n    addFieldNode(body, fieldName, root);\n  });\n\n  createReducers(root);\n\n  if (root.fieldNodes.length === 0) {\n    root.add(new FieldNode('_id', 1));\n  }\n}\n\nfunction isProjectionOperatorExpression(body) {\n  if (_.isObject(body)) {\n    var keys = _.keys(body);\n\n    return keys.length === 1 && _.contains(['$elemMatch', '$meta', '$slice'], keys[0]);\n  }\n\n  return false;\n}\n/**\n * @param body\n * @param fieldName\n * @param root\n */\n\n\nfunction addFieldNode(body, fieldName, root) {\n  // it's not a link and not a special variable => we assume it's a field\n  if (_.isObject(body)) {\n    if (!isProjectionOperatorExpression(body)) {\n      var _dotize$convert;\n\n      var dotted = dotize.convert((_dotize$convert = {}, _dotize$convert[fieldName] = body, _dotize$convert));\n\n      _.each(dotted, function (value, key) {\n        root.add(new FieldNode(key, value));\n      });\n    } else {\n      root.add(new FieldNode(fieldName, body, true));\n    }\n  } else {\n    var fieldNode = new FieldNode(fieldName, body);\n    root.add(fieldNode);\n  }\n}\n\nfunction getNodeNamespace(node) {\n  var parts = [];\n  var n = node;\n\n  while (n) {\n    var name = n.linker ? n.linker.linkName : n.collection._name;\n    parts.push(name); // console.log('linker', node.linker ? node.linker.linkName : node.collection._name);\n\n    n = n.parent;\n  }\n\n  return parts.reverse().join('_');\n}\n\nmodule.exportDefault(function (collection, body) {\n  var root = new CollectionNode(collection, body);\n  createNodes(root);\n  return root;\n});\n;\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\n\nfunction handleDenormalized(root, linker, body, fieldName) {\n  Object.assign(body, {\n    _id: 1\n  });\n  var cacheField = linker.linkConfig.denormalize.field;\n  root.snapCache(cacheField, fieldName); // if it's one and direct also include the link storage\n\n  if (!linker.isMany() && !linker.isVirtual()) {\n    addFieldNode(1, linker.linkStorageField, root);\n  }\n\n  addFieldNode(body, cacheField, root);\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/createGraph.js"],"names":["module","export","specialFields","createNodes","addFieldNode","getNodeNamespace","CollectionNode","link","v","FieldNode","ReducerNode","dotize","createReducers","root","_","isObject","body","each","fieldName","contains","addProp","collection","default","linker","getLinker","isDenormalized","isSubBodyDenormalized","handleDenormalized","subroot","getLinkedCollection","add","reducer","getReducer","reducerNode","fieldNodes","length","isProjectionOperatorExpression","keys","dotted","convert","value","key","fieldNode","node","parts","n","name","linkName","_name","push","parent","reverse","join","exportDefault","Object","assign","_id","cacheField","linkConfig","denormalize","field","snapCache","isMany","isVirtual","linkStorageField"],"mappings":"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","sourcesContent":["import CollectionNode from '../nodes/collectionNode.js';\nimport FieldNode from '../nodes/fieldNode.js';\nimport ReducerNode from '../nodes/reducerNode.js';\nimport dotize from './dotize.js';\nimport createReducers from '../reducers/lib/createReducers';\n\nexport const specialFields = [\n    '$filters',\n    '$options',\n    '$postFilters',\n    '$postOptions',\n    '$postFilter'\n];\n\n/**\n * Creates node objects from the body. The root is always a collection node.\n *\n * @param root\n */\nexport function createNodes(root) {\n    // this is a fix for phantomjs tests (don't really understand it.)\n    if (!_.isObject(root.body)) {\n        return;\n    }\n\n    _.each(root.body, (body, fieldName) => {\n        if (!body) {\n            return;\n        }\n\n        // if it's a prop\n        if (_.contains(specialFields, fieldName)) {\n            root.addProp(fieldName, body);\n\n            return;\n        }\n\n        // workaround, see https://github.com/cult-of-coders/grapher/issues/134\n        // TODO: find another way to do this\n        if (root.collection.default) {\n          root.collection = root.collection.default;\n        }\n\n        // checking if it is a link.\n        let linker = root.collection.getLinker(fieldName);\n\n        if (linker) {\n            // check if it is a cached link\n            // if yes, then we need to explicitly define this at collection level\n            // so when we transform the data for delivery, we move it to the link name\n            if (linker.isDenormalized()) {\n                if (linker.isSubBodyDenormalized(body)) {\n                    handleDenormalized(root, linker, body, fieldName);\n                    return;\n                }\n            }\n\n            let subroot = new CollectionNode(linker.getLinkedCollection(), body, fieldName);\n            root.add(subroot, linker);\n\n            createNodes(subroot);\n            return;\n        }\n\n        // checking if it's a reducer\n        const reducer = root.collection.getReducer(fieldName);\n\n        if (reducer) {\n            let reducerNode = new ReducerNode(fieldName, reducer);\n            root.add(reducerNode);\n        }\n\n        // it's most likely a field then\n        addFieldNode(body, fieldName, root);\n    });\n\n    createReducers(root);\n\n    if (root.fieldNodes.length === 0) {\n        root.add(new FieldNode('_id', 1));\n    }\n}\n\nfunction isProjectionOperatorExpression(body) {\n    if (_.isObject(body)) {\n        const keys = _.keys(body);\n        return keys.length === 1 && _.contains(['$elemMatch', '$meta', '$slice'], keys[0]);\n    }\n    return false;\n}\n\n/**\n * @param body\n * @param fieldName\n * @param root\n */\nexport function addFieldNode(body, fieldName, root) {\n    // it's not a link and not a special variable => we assume it's a field\n    if (_.isObject(body)) {\n        if (!isProjectionOperatorExpression(body)) {\n            let dotted = dotize.convert({[fieldName]: body});\n            _.each(dotted, (value, key) => {\n                root.add(new FieldNode(key, value));\n            });\n        }\n        else {\n            root.add(new FieldNode(fieldName, body, true));\n        }\n    } else {\n        let fieldNode = new FieldNode(fieldName, body);\n        root.add(fieldNode);\n    }\n}\n\n/**\n * Returns namespace for node when using query path scoping.\n *\n * @param node\n * @returns {String}\n */\nexport function getNodeNamespace(node) {\n    const parts = [];\n    let n = node;\n    while (n) {\n        const name = n.linker ? n.linker.linkName : n.collection._name;\n        parts.push(name);\n        // console.log('linker', node.linker ? node.linker.linkName : node.collection._name);\n        n = n.parent;\n    }\n    return parts.reverse().join('_');\n}\n\n/**\n * @param collection\n * @param body\n * @returns {CollectionNode}\n */\nexport default function (collection, body) {\n    let root = new CollectionNode(collection, body);\n    createNodes(root);\n\n    return root;\n};\n\n/**\n * Ads denormalization config properly, including _id\n *\n * @param root\n * @param linker\n * @param body\n * @param fieldName\n */\nfunction handleDenormalized(root, linker, body, fieldName) {\n    Object.assign(body, {_id: 1});\n\n    const cacheField = linker.linkConfig.denormalize.field;\n    root.snapCache(cacheField, fieldName);\n\n    // if it's one and direct also include the link storage\n    if (!linker.isMany() && !linker.isVirtual()) {\n        addFieldNode(1, linker.linkStorageField, root);\n    }\n\n    addFieldNode(body, cacheField, root);\n}"]},"sourceType":"script","hash":"8740d4fc2a057ee4f3854e3d618c2d83f6f1c090"}
