{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"}},"code":"module.export({\n  default: () => LinkManyMeta\n});\nlet Link;\nmodule.link(\"./base.js\", {\n  default(v) {\n    Link = v;\n  }\n\n}, 0);\nlet SmartArgs;\nmodule.link(\"./lib/smartArguments.js\", {\n  default(v) {\n    SmartArgs = v;\n  }\n\n}, 1);\n\nclass LinkManyMeta extends Link {\n  clean() {\n    if (!this.object[this.linkStorageField]) {\n      this.object[this.linkStorageField] = [];\n    }\n  }\n  /**\n   * @param what\n   * @param metadata\n   */\n\n\n  add(what) {\n    let metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.isVirtual) {\n      this._virtualAction('add', what, metadata);\n\n      return this;\n    }\n\n    const _ids = this.identifyIds(what, true);\n\n    this._validateIds(_ids);\n\n    let field = this.linkStorageField;\n    this.object[field] = this.object[field] || [];\n    let metadatas = [];\n\n    _.each(_ids, _id => {\n      let localMetadata = _.clone(metadata);\n\n      localMetadata._id = _id;\n      this.object[field].push(localMetadata);\n      metadatas.push(localMetadata);\n    });\n\n    let modifier = {\n      $addToSet: {\n        [field]: {\n          $each: metadatas\n        }\n      }\n    };\n    this.linker.mainCollection.update(this.object._id, modifier);\n    return this;\n  }\n  /**\n   * @param what\n   * @param extendMetadata\n   */\n\n\n  metadata(what, extendMetadata) {\n    if (this.isVirtual) {\n      this._virtualAction('metadata', what, extendMetadata);\n\n      return this;\n    }\n\n    let field = this.linkStorageField;\n\n    if (what === undefined) {\n      return this.object[field];\n    }\n\n    if (_.isArray(what)) {\n      throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n    }\n\n    const _id = this.identifyId(what);\n\n    let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n\n    if (extendMetadata === undefined) {\n      return existingMetadata;\n    } else {\n      _.extend(existingMetadata, extendMetadata);\n\n      let subfield = field + '._id';\n      let subfieldUpdate = field + '.$';\n      this.linker.mainCollection.update({\n        _id: this.object._id,\n        [subfield]: _id\n      }, {\n        $set: {\n          [subfieldUpdate]: existingMetadata\n        }\n      });\n    }\n\n    return this;\n  }\n\n  remove(what) {\n    if (this.isVirtual) {\n      this._virtualAction('remove', what);\n\n      return this;\n    }\n\n    const _ids = this.identifyIds(what);\n\n    let field = this.linkStorageField;\n    this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n    let modifier = {\n      $pull: {\n        [field]: {\n          _id: {\n            $in: _ids\n          }\n        }\n      }\n    };\n    this.linker.mainCollection.update(this.object._id, modifier);\n    return this;\n  }\n\n  set(what, metadata) {\n    if (this.isVirtual) {\n      this._virtualAction('set', what, metadata);\n\n      return this;\n    }\n\n    throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n  }\n\n  unset(what) {\n    if (this.isVirtual) {\n      this._virtualAction('unset', what);\n\n      return this;\n    }\n\n    throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/links/linkTypes/linkManyMeta.js"],"names":["module","export","default","LinkManyMeta","Link","link","v","SmartArgs","clean","object","linkStorageField","add","what","metadata","isVirtual","_virtualAction","_ids","identifyIds","_validateIds","field","metadatas","_","each","_id","localMetadata","clone","push","modifier","$addToSet","$each","linker","mainCollection","update","extendMetadata","undefined","isArray","Meteor","Error","identifyId","existingMetadata","find","extend","subfield","subfieldUpdate","$set","remove","filter","contains","$pull","$in","set","unset"],"mappings":"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","sourcesContent":["import Link from './base.js';\nimport SmartArgs from './lib/smartArguments.js';\n\nexport default class LinkManyMeta extends Link {\n    clean() {\n        if (!this.object[this.linkStorageField]) {\n            this.object[this.linkStorageField] = [];\n        }\n    }\n\n    /**\n     * @param what\n     * @param metadata\n     */\n    add(what, metadata = {}) {\n        if (this.isVirtual) {\n            this._virtualAction('add', what, metadata);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what, true);\n        this._validateIds(_ids);\n\n        let field = this.linkStorageField;\n\n        this.object[field] = this.object[field] || [];\n        let metadatas = [];\n\n        _.each(_ids, _id => {\n            let localMetadata = _.clone(metadata);\n            localMetadata._id = _id;\n\n            this.object[field].push(localMetadata);\n            metadatas.push(localMetadata);\n        });\n\n        let modifier = {\n            $addToSet: {\n                [field]: {$each: metadatas}\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    /**\n     * @param what\n     * @param extendMetadata\n     */\n    metadata(what, extendMetadata) {\n        if (this.isVirtual) {\n            this._virtualAction('metadata', what, extendMetadata);\n\n            return this;\n        }\n\n        let field = this.linkStorageField;\n\n        if (what === undefined) {\n            return this.object[field];\n        }\n\n        if (_.isArray(what)) {\n            throw new Meteor.Error('not-allowed', 'Metadata updates should be made for one entity only, not multiple');\n        }\n\n        const _id = this.identifyId(what);\n\n        let existingMetadata = _.find(this.object[field], metadata => metadata._id == _id);\n        if (extendMetadata === undefined) {\n            return existingMetadata;\n        } else {\n            _.extend(existingMetadata, extendMetadata);\n            let subfield = field + '._id';\n            let subfieldUpdate = field + '.$';\n\n            this.linker.mainCollection.update({\n                _id: this.object._id,\n                [subfield]: _id\n            }, {\n               $set: {\n                   [subfieldUpdate]: existingMetadata\n               }\n            });\n        }\n\n        return this;\n    }\n\n    remove(what) {\n        if (this.isVirtual) {\n            this._virtualAction('remove', what);\n            return this;\n        }\n\n        const _ids = this.identifyIds(what);\n        let field = this.linkStorageField;\n\n        this.object[field] = _.filter(this.object[field], link => !_.contains(_ids, link._id));\n\n        let modifier = {\n            $pull: {\n                [field]: {\n                    _id: {\n                        $in: _ids\n                    }\n                }\n            }\n        };\n\n        this.linker.mainCollection.update(this.object._id, modifier);\n\n        return this;\n    }\n\n    set(what, metadata) {\n        if (this.isVirtual) {\n            this._virtualAction('set', what, metadata);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *set* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n\n    unset(what) {\n        if (this.isVirtual) {\n            this._virtualAction('unset', what);\n            return this;\n        }\n\n        throw new Meteor.Error('invalid-command', 'You are trying to *unset* in a relationship that is single. Please use add/remove for *many* relationships');\n    }\n}"]},"sourceType":"script","hash":"782aafc55031eea0ff0d2cfba720357cbcd7398b"}
