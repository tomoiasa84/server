{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/core/users.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:apollo/server/core/users.js","filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/core/users.js","passPerPreset":false,"envName":"development","cwd":"/Users/simiontomoiaga/git/server","root":"/Users/simiontomoiaga/git/server","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/simiontomoiaga/git/server/packages/cultofcoders:apollo/server/core/users.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:apollo/server/core/users.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  getUserForContext: () => getUserForContext\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\n\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nconst getUserForContext = (loginToken, userDefaultFields) => Promise.asyncApply(() => {\n  if (!Accounts) {\n    return {};\n  } // there is a possible current user connected!\n\n\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String); // the hashed token is the key to find the possible current user in the db\n\n    const hashedToken = Accounts._hashLoginToken(loginToken); // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n\n\n    const currentUser = Meteor.users.findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken\n    }, {\n      fields: (0, _objectSpread2.default)({}, userDefaultFields, {\n        'services.resume.loginTokens': 1\n      })\n    }); // the current user exists\n\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(tokenInfo => tokenInfo.hashedToken === hashedToken); // get an exploitable token expiration date\n\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when); // true if the token is expired\n\n\n      const isExpired = expiresAt < new Date(); // if the token is still valid, give access to the current user\n      // information in the resolvers context\n\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null\n  };\n});","map":{"version":3,"sources":["packages/cultofcoders:apollo/server/core/users.js"],"names":["module","export","getUserForContext","Meteor","link","v","Accounts","Package","loginToken","userDefaultFields","check","String","hashedToken","_hashLoginToken","currentUser","users","findOne","fields","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","_id"],"mappings":";;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,iBAAiB,EAAC,MAAIA;AAAvB,CAAd;AAAyD,IAAIC,MAAJ;AAAWH,MAAM,CAACI,IAAP,CAAY,eAAZ,EAA4B;AAACD,EAAAA,MAAM,CAACE,CAAD,EAAG;AAACF,IAAAA,MAAM,GAACE,CAAP;AAAS;;AAApB,CAA5B,EAAkD,CAAlD;AAEpE,IAAIC,QAAJ;;AACA,IAAIC,OAAO,CAAC,eAAD,CAAX,EAA8B;AAC5BD,EAAAA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,QAApC;AACD;;AAEM,MAAMJ,iBAAiB,GAAG,CAAOM,UAAP,EAAmBC,iBAAnB,8BAAyC;AACxE,MAAI,CAACH,QAAL,EAAe;AACb,WAAO,EAAP;AACD,GAHuE,CAKxE;;;AACA,MAAIE,UAAJ,EAAgB;AACd;AACAE,IAAAA,KAAK,CAACF,UAAD,EAAaG,MAAb,CAAL,CAFc,CAId;;AACA,UAAMC,WAAW,GAAGN,QAAQ,CAACO,eAAT,CAAyBL,UAAzB,CAApB,CALc,CAOd;AACA;AACA;;;AACA,UAAMM,WAAW,GAAGX,MAAM,CAACY,KAAP,CAAaC,OAAb,CAClB;AACE,iDAA2CJ;AAD7C,KADkB,EAIlB;AACEK,MAAAA,MAAM,kCACDR,iBADC;AAEJ,uCAA+B;AAF3B;AADR,KAJkB,CAApB,CAVc,CAsBd;;AACA,QAAIK,WAAJ,EAAiB;AACf;AACA;AACA,YAAMI,gBAAgB,GAAGJ,WAAW,CAACK,QAAZ,CAAqBC,MAArB,CAA4BC,WAA5B,CAAwCC,IAAxC,CACvBC,SAAS,IAAIA,SAAS,CAACX,WAAV,KAA0BA,WADhB,CAAzB,CAHe,CAOf;;AACA,YAAMY,SAAS,GAAGlB,QAAQ,CAACmB,gBAAT,CAA0BP,gBAAgB,CAACQ,IAA3C,CAAlB,CARe,CAUf;;;AACA,YAAMC,SAAS,GAAGH,SAAS,GAAG,IAAII,IAAJ,EAA9B,CAXe,CAaf;AACA;;AACA,UAAI,CAACD,SAAL,EAAgB;AACd;AACA,eAAO;AACLE,UAAAA,IAAI,EAAEf,WADD;AAELgB,UAAAA,MAAM,EAAEhB,WAAW,CAACiB;AAFf,SAAP;AAID;AACF;AACF;;AAED,SAAO;AACLF,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,MAAM,EAAE;AAFH,GAAP;AAID,CA1DgC,CAA1B","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nlet Accounts;\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nexport const getUserForContext = async (loginToken, userDefaultFields) => {\n  if (!Accounts) {\n    return {};\n  }\n\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = Meteor.users.findOne(\n      {\n        'services.resume.loginTokens.hashedToken': hashedToken,\n      },\n      {\n        fields: {\n          ...userDefaultFields,\n          'services.resume.loginTokens': 1,\n        },\n      }\n    );\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null,\n  };\n};\n"]},"sourceType":"script","hash":"fbc7604cd5b17fdc3fd0be915b80c2a80e185448"}
