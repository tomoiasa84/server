[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar wsLink;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:apollo\":{\"client\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/index.js                                                            //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  initialize: () => initialize,\n  Config: () => Config,\n  meteorAccountsLink: () => meteorAccountsLink\n});\nlet ApolloClient;\nmodule.watch(require(\"apollo-client\"), {\n  default(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet WebSocketLink;\nmodule.watch(require(\"apollo-link-ws\"), {\n  WebSocketLink(v) {\n    WebSocketLink = v;\n  }\n\n}, 1);\nlet HttpLink;\nmodule.watch(require(\"apollo-link-http\"), {\n  HttpLink(v) {\n    HttpLink = v;\n  }\n\n}, 2);\nlet ApolloLink;\nmodule.watch(require(\"apollo-link\"), {\n  default(v) {\n    ApolloLink = v;\n  }\n\n}, 3);\nlet InMemoryCache;\nmodule.watch(require(\"apollo-cache-inmemory\"), {\n  InMemoryCache(v) {\n    InMemoryCache = v;\n  }\n\n}, 4);\nlet getMainDefinition;\nmodule.watch(require(\"apollo-utilities\"), {\n  getMainDefinition(v) {\n    getMainDefinition = v;\n  }\n\n}, 5);\nlet meteorAccountsLink;\nmodule.watch(require(\"./meteorAccountsLink\"), {\n  meteorAccountsLink(v) {\n    meteorAccountsLink = v;\n  }\n\n}, 6);\nlet createUploadLink;\nmodule.watch(require(\"apollo-upload-client\"), {\n  createUploadLink(v) {\n    createUploadLink = v;\n  }\n\n}, 7);\nlet Config;\nmodule.watch(require(\"./config\"), {\n  default(v) {\n    Config = v;\n  }\n\n}, 8);\nlet checkNpmVersions;\nmodule.watch(require(\"meteor/tmeasday:check-npm-versions\"), {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 9);\nlet GRAPHQL_SUBSCRIPTION_ENDPOINT, GRAPHQL_ENDPOINT, AUTH_TOKEN_KEY;\nmodule.watch(require(\"../constants\"), {\n  GRAPHQL_SUBSCRIPTION_ENDPOINT(v) {\n    GRAPHQL_SUBSCRIPTION_ENDPOINT = v;\n  },\n\n  GRAPHQL_ENDPOINT(v) {\n    GRAPHQL_ENDPOINT = v;\n  },\n\n  AUTH_TOKEN_KEY(v) {\n    AUTH_TOKEN_KEY = v;\n  }\n\n}, 10);\ncheckNpmVersions({\n  'subscriptions-transport-ws': '0.9.x',\n  'apollo-upload-client': '8.x.x',\n  'apollo-client': '2.x.x',\n  'apollo-cache-inmemory': '1.x.x',\n  'apollo-link': '1.x.x',\n  'apollo-link-http': '1.x.x',\n  'apollo-link-ws': '1.x.x' // 'apollo-live-client': '0.2.x',\n  // 'apollo-morpher': '0.2.x',\n\n});\n\nfunction initialize() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Object.assign(Config, config);\n  Object.freeze(Config);\n  const uploadLink = createUploadLink();\n  let terminatingLink; // We define the HTTP Link\n\n  const httpLink = new HttpLink((0, _objectSpread2.default)({\n    uri: GRAPHQL_ENDPOINT\n  }, config.httpLinkOptions || {}));\n\n  if (meteorAccountsLink) {\n    terminatingLink = ApolloLink.concat(meteorAccountsLink, uploadLink, httpLink);\n  } else {\n    terminatingLink = ApolloLink.concat(uploadLink, httpLink);\n  } // A chance to add change the links\n\n\n  terminatingLink = Config.getLink(terminatingLink);\n\n  if (!config.disableWebsockets) {\n    wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTION_ENDPOINT,\n      options: {\n        reconnect: true,\n        connectionParams: () => ({\n          [AUTH_TOKEN_KEY]: localStorage.getItem('Meteor.loginToken')\n        })\n      }\n    }); // If it's subscription it goes through wsLink otherwise through terminatingLink\n\n    terminatingLink = ApolloLink.split((_ref) => {\n      let {\n        query\n      } = _ref;\n      const {\n        kind,\n        operation\n      } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    }, wsLink, terminatingLink);\n  }\n\n  const client = new ApolloClient({\n    link: terminatingLink,\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object._id || null\n    }).restore(window.__APOLLO_STATE__ || {})\n  });\n  return {\n    client\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"config.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/config.js                                                           //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.exportDefault({\n  disableWebsockets: false,\n  getLink: link => link,\n  httpLinkOptions: {}\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteorAccountsLink.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/meteorAccountsLink.js                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.export({\n  meteorAccountsLink: () => meteorAccountsLink\n});\nlet ApolloClient;\nmodule.watch(require(\"apollo-client\"), {\n  ApolloClient(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet ApolloLink;\nmodule.watch(require(\"apollo-link\"), {\n  ApolloLink(v) {\n    ApolloLink = v;\n  }\n\n}, 1);\nlet meteorAccountsLink; // We have a weak dependency on this package, and if we import it without it being added, it will crash\n\nif (Package['accounts-base']) {\n  let Accounts;\n  module.watch(require(\"meteor/accounts-base\"), {\n    Accounts(v) {\n      Accounts = v;\n    }\n\n  }, 2);\n  module.runSetters(meteorAccountsLink = new ApolloLink((operation, forward) => {\n    const token = Accounts._storedLoginToken();\n\n    operation.setContext(() => ({\n      headers: {\n        'meteor-login-token': token\n      }\n    }));\n    return forward(operation);\n  }));\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/constants.js                                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.export({\n  AUTH_TOKEN_KEY: () => AUTH_TOKEN_KEY,\n  AUTH_TOKEN_LOCALSTORAGE: () => AUTH_TOKEN_LOCALSTORAGE,\n  GRAPHQL_SUBSCRIPTION_PATH: () => GRAPHQL_SUBSCRIPTION_PATH,\n  GRAPHQL_SUBSCRIPTION_ENDPOINT: () => GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT: () => GRAPHQL_ENDPOINT\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nconst AUTH_TOKEN_KEY = 'meteor-login-token';\nconst AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\nconst GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nconst GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(GRAPHQL_SUBSCRIPTION_PATH).replace(/http/, 'ws');\nconst GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/cultofcoders:apollo/client/index.js\");\n\n/* Exports */\nPackage._define(\"cultofcoders:apollo\", exports);\n\n})();\n","servePath":"/packages/cultofcoders_apollo.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:apollo/client/index.js","packages/cultofcoders:apollo/client/config.js","packages/cultofcoders:apollo/client/meteorAccountsLink.js","packages/cultofcoders:apollo/constants.js"],"names":["module","export","initialize","Config","meteorAccountsLink","ApolloClient","watch","require","default","v","WebSocketLink","HttpLink","ApolloLink","InMemoryCache","getMainDefinition","createUploadLink","checkNpmVersions","GRAPHQL_SUBSCRIPTION_ENDPOINT","GRAPHQL_ENDPOINT","AUTH_TOKEN_KEY","config","Object","assign","freeze","uploadLink","terminatingLink","httpLink","uri","httpLinkOptions","concat","getLink","disableWebsockets","wsLink","options","reconnect","connectionParams","localStorage","getItem","split","query","kind","operation","client","link","cache","dataIdFromObject","object","_id","restore","window","__APOLLO_STATE__","exportDefault","Package","Accounts","forward","token","_storedLoginToken","setContext","headers","AUTH_TOKEN_LOCALSTORAGE","GRAPHQL_SUBSCRIPTION_PATH","Meteor","absoluteUrl","replace"],"mappings":"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","file":"/packages/cultofcoders_apollo.js","sourcesContent":["import ApolloClient from 'apollo-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http';\nimport ApolloLink from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { meteorAccountsLink } from './meteorAccountsLink';\nimport { createUploadLink } from 'apollo-upload-client';\nimport Config from './config';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({\n  'subscriptions-transport-ws': '0.9.x',\n  'apollo-upload-client': '8.x.x',\n  'apollo-client': '2.x.x',\n  'apollo-cache-inmemory': '1.x.x',\n  'apollo-link': '1.x.x',\n  'apollo-link-http': '1.x.x',\n  'apollo-link-ws': '1.x.x',\n  // 'apollo-live-client': '0.2.x',\n  // 'apollo-morpher': '0.2.x',\n});\n\nimport {\n  GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT,\n  AUTH_TOKEN_KEY,\n} from '../constants';\n\nexport function initialize(config = {}) {\n  Object.assign(Config, config);\n  Object.freeze(Config);\n\n  const uploadLink = createUploadLink();\n\n  let terminatingLink;\n\n  // We define the HTTP Link\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_ENDPOINT,\n    ...(config.httpLinkOptions || {}),\n  });\n\n  if (meteorAccountsLink) {\n    terminatingLink = ApolloLink.concat(\n      meteorAccountsLink,\n      uploadLink,\n      httpLink\n    );\n  } else {\n    terminatingLink = ApolloLink.concat(uploadLink, httpLink);\n  }\n\n  // A chance to add change the links\n  terminatingLink = Config.getLink(terminatingLink);\n\n  if (!config.disableWebsockets) {\n    wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTION_ENDPOINT,\n      options: {\n        reconnect: true,\n        connectionParams: () => ({\n          [AUTH_TOKEN_KEY]: localStorage.getItem('Meteor.loginToken'),\n        }),\n      },\n    });\n\n    // If it's subscription it goes through wsLink otherwise through terminatingLink\n    terminatingLink = ApolloLink.split(\n      ({ query }) => {\n        const { kind, operation } = getMainDefinition(query);\n        return kind === 'OperationDefinition' && operation === 'subscription';\n      },\n      wsLink,\n      terminatingLink\n    );\n  }\n\n  const client = new ApolloClient({\n    link: terminatingLink,\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object._id || null,\n    }).restore(window.__APOLLO_STATE__ || {}),\n  });\n\n  return {\n    client,\n  };\n}\n\nexport { Config, meteorAccountsLink };\n","export default {\n  disableWebsockets: false,\n  getLink: link => link,\n  httpLinkOptions: {},\n};\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\n\nlet meteorAccountsLink;\n\n// We have a weak dependency on this package, and if we import it without it being added, it will crash\nif (Package['accounts-base']) {\n  import { Accounts } from 'meteor/accounts-base';\n  \n  meteorAccountsLink = new ApolloLink((operation, forward) => {\n    const token = Accounts._storedLoginToken();\n  \n    operation.setContext(() => ({\n      headers: {\n        'meteor-login-token': token,\n      },\n    }));\n  \n    return forward(operation);\n  });\n}\n\nexport {\n  meteorAccountsLink\n}\n","import { Meteor } from 'meteor/meteor';\n\nexport const AUTH_TOKEN_KEY = 'meteor-login-token';\nexport const AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\n\nexport const GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nexport const GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(\n  GRAPHQL_SUBSCRIPTION_PATH\n).replace(/http/, 'ws');\n\nexport const GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n"]}}]