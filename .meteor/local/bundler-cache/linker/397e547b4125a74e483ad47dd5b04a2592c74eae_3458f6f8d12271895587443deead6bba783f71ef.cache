[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_client.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                 //\n// packages/autoupdate/autoupdate_client.js                                                        //\n//                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                   //\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n// The client version of the client code currently running in the\n// browser.\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";\nvar autoupdateVersionRefreshable = __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\"; // The collection of acceptable client versions.\n\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function () {\n  return !!ClientVersions.findOne({\n    _id: \"version\",\n    version: {\n      $ne: autoupdateVersion\n    }\n  }) || !!ClientVersions.findOne({\n    _id: \"version-refreshable\",\n    version: {\n      $ne: autoupdateVersionRefreshable\n    }\n  });\n};\n\nAutoupdate._ClientVersions = ClientVersions; // Used by a self-test\n\nvar knownToSupportCssOnLoad = false;\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0,\n  // don't do any immediate retries\n  baseTimeout: 30 * 1000 // start with 30s\n\n});\nvar failures = 0;\n\nfunction after(times, func) {\n  return function () {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n\n;\n\nAutoupdate._retrySubscription = function () {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError: function (error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      if (Package.reload) {\n        var checkNewVersionDocument = function (doc) {\n          var self = this;\n\n          if (doc._id === 'version-refreshable' && doc.version !== autoupdateVersionRefreshable) {\n            autoupdateVersionRefreshable = doc.version; // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\n            var newCss = doc.assets && doc.assets.allCss || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n\n            function waitUntilCssLoads(link, callback) {\n              var called;\n\n              function executeCallback() {\n                if (!called) {\n                  called = true;\n                  return callback(...arguments);\n                }\n              }\n\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                executeCallback();\n              };\n\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    executeCallback();\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            }\n\n            var removeOldLinks = after(newCss.length, function () {\n              oldLinks.forEach(function (link) {\n                link.parentNode.removeChild(link);\n              });\n            });\n\n            var attachStylesheetLink = function (newLink) {\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n            };\n\n            if (newCss.length !== 0) {\n              newCss.forEach(function (css) {\n                var newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", css.url);\n                attachStylesheetLink(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          } else if (doc._id === 'version' && doc.version !== autoupdateVersion) {\n            handle && handle.stop();\n\n            if (Package.reload) {\n              Package.reload.Reload._reload();\n            }\n          }\n        };\n\n        var handle = ClientVersions.find().observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/node_modules/meteor/autoupdate/autoupdate_client.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js"],"names":["autoupdateVersion","__meteor_runtime_config__","autoupdateVersionRefreshable","ClientVersions","Mongo","Collection","Autoupdate","newClientAvailable","findOne","_id","version","$ne","_ClientVersions","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","after","times","func","apply","arguments","_retrySubscription","Meteor","subscribe","onError","error","_debug","retryLater","onReady","Package","reload","checkNewVersionDocument","doc","self","newCss","assets","allCss","oldLinks","Array","prototype","forEach","call","document","getElementsByTagName","link","className","push","waitUntilCssLoads","callback","called","executeCallback","onload","id","setInterval","sheet","clearInterval","removeOldLinks","length","parentNode","removeChild","attachStylesheetLink","newLink","item","appendChild","setTimeout","css","createElement","setAttribute","url","handle","stop","Reload","_reload","find","observe","added","changed"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,IAAIA,oBAAoBC,0BAA0BD,iBAA1B,IAA+C,SAAvE;AACA,IAAIE,+BACFD,0BAA0BC,4BAA1B,IAA0D,SAD5D,C,CAGA;;AACAC,iBAAiB,IAAIC,MAAMC,UAAV,CAAqB,kCAArB,CAAjB;AAEAC,aAAa,EAAb;;AAEAA,WAAWC,kBAAX,GAAgC,YAAY;AAC1C,SAAO,CAAC,CAAEJ,eAAeK,OAAf,CAAuB;AACpBC,SAAK,SADe;AAEpBC,aAAS;AAACC,WAAKX;AAAN;AAFW,GAAvB,CAAH,IAGA,CAAC,CAAEG,eAAeK,OAAf,CAAuB;AACpBC,SAAK,qBADe;AAEpBC,aAAS;AAACC,WAAKT;AAAN;AAFW,GAAvB,CAHV;AAMD,CAPD;;AAQAI,WAAWM,eAAX,GAA6BT,cAA7B,C,CAA8C;;AAE9C,IAAIU,0BAA0B,KAA9B;AAEA,IAAIC,QAAQ,IAAIC,KAAJ,CAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,YAAU,CATU;AASP;AACbC,eAAa,KAAG,IAVI,CAUC;;AAVD,CAAV,CAAZ;AAYA,IAAIC,WAAW,CAAf;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B;AAC1B,SAAO,YAAW;AAChB,QAAI,EAAED,KAAF,GAAU,CAAd,EAAiB;AACf,aAAOC,KAAKC,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD;AACF,GAJD;AAKD;;AAAA;;AAEDjB,WAAWkB,kBAAX,GAAgC,YAAY;AAC1CC,SAAOC,SAAP,CAAiB,kCAAjB,EAAqD;AACnDC,aAAS,UAAUC,KAAV,EAAiB;AACxBH,aAAOI,MAAP,CAAc,gCAAd,EAAgDD,KAAhD;;AACAV;AACAJ,YAAMgB,UAAN,CAAiBZ,QAAjB,EAA2B,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACAZ,mBAAWkB,kBAAX;AACD,OATD;AAUD,KAdkD;AAenDO,aAAS,YAAY;AACnB,UAAIC,QAAQC,MAAZ,EAAoB;AAClB,YAAIC,0BAA0B,UAAUC,GAAV,EAAe;AAC3C,cAAIC,OAAO,IAAX;;AACA,cAAID,IAAI1B,GAAJ,KAAY,qBAAZ,IACA0B,IAAIzB,OAAJ,KAAgBR,4BADpB,EACkD;AAChDA,2CAA+BiC,IAAIzB,OAAnC,CADgD,CAEhD;AACA;;AACA,gBAAI2B,SAAUF,IAAIG,MAAJ,IAAcH,IAAIG,MAAJ,CAAWC,MAA1B,IAAqC,EAAlD;AACA,gBAAIC,WAAW,EAAf;AAEAC,kBAAMC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CACEC,SAASC,oBAAT,CAA8B,MAA9B,CADF,EAEE,UAAUC,IAAV,EAAgB;AACd,kBAAIA,KAAKC,SAAL,KAAmB,gBAAvB,EAAyC;AACvCR,yBAASS,IAAT,CAAcF,IAAd;AACD;AACF,aANH;;AASA,qBAASG,iBAAT,CAA2BH,IAA3B,EAAiCI,QAAjC,EAA2C;AACzC,kBAAIC,MAAJ;;AACA,uBAASC,eAAT,GAAkC;AAChC,oBAAI,CAAED,MAAN,EAAc;AACZA,2BAAS,IAAT;AACA,yBAAOD,SAAS,YAAT,CAAP;AACD;AACF;;AAEDJ,mBAAKO,MAAL,GAAc,YAAY;AACxBzC,0CAA0B,IAA1B;AACAwC;AACD,eAHD;;AAKA,kBAAI,CAAExC,uBAAN,EAA+B;AAC7B,oBAAI0C,KAAK9B,OAAO+B,WAAP,CAAmB,YAAY;AACtC,sBAAIT,KAAKU,KAAT,EAAgB;AACdJ;AACA5B,2BAAOiC,aAAP,CAAqBH,EAArB;AACD;AACF,iBALQ,EAKN,EALM,CAAT;AAMD;AACF;;AAED,gBAAII,iBAAiBxC,MAAMkB,OAAOuB,MAAb,EAAqB,YAAY;AACpDpB,uBAASG,OAAT,CAAiB,UAAUI,IAAV,EAAgB;AAC/BA,qBAAKc,UAAL,CAAgBC,WAAhB,CAA4Bf,IAA5B;AACD,eAFD;AAGD,aAJoB,CAArB;;AAMA,gBAAIgB,uBAAuB,UAAUC,OAAV,EAAmB;AAC5CnB,uBAASC,oBAAT,CAA8B,MAA9B,EAAsCmB,IAAtC,CAA2C,CAA3C,EAA8CC,WAA9C,CAA0DF,OAA1D;AAEAd,gCAAkBc,OAAlB,EAA2B,YAAY;AACrCvC,uBAAO0C,UAAP,CAAkBR,cAAlB,EAAkC,GAAlC;AACD,eAFD;AAGD,aAND;;AAQA,gBAAItB,OAAOuB,MAAP,KAAkB,CAAtB,EAAyB;AACvBvB,qBAAOM,OAAP,CAAe,UAAUyB,GAAV,EAAe;AAC5B,oBAAIJ,UAAUnB,SAASwB,aAAT,CAAuB,MAAvB,CAAd;AACAL,wBAAQM,YAAR,CAAqB,KAArB,EAA4B,YAA5B;AACAN,wBAAQM,YAAR,CAAqB,MAArB,EAA6B,UAA7B;AACAN,wBAAQM,YAAR,CAAqB,OAArB,EAA8B,gBAA9B;AACAN,wBAAQM,YAAR,CAAqB,MAArB,EAA6BF,IAAIG,GAAjC;AACAR,qCAAqBC,OAArB;AACD,eAPD;AAQD,aATD,MASO;AACLL;AACD;AAEF,WApED,MAqEK,IAAIxB,IAAI1B,GAAJ,KAAY,SAAZ,IAAyB0B,IAAIzB,OAAJ,KAAgBV,iBAA7C,EAAgE;AACnEwE,sBAAUA,OAAOC,IAAP,EAAV;;AAEA,gBAAIzC,QAAQC,MAAZ,EAAoB;AAClBD,sBAAQC,MAAR,CAAeyC,MAAf,CAAsBC,OAAtB;AACD;AACF;AACF,SA9ED;;AAgFA,YAAIH,SAASrE,eAAeyE,IAAf,GAAsBC,OAAtB,CAA8B;AACzCC,iBAAO5C,uBADkC;AAEzC6C,mBAAS7C;AAFgC,SAA9B,CAAb;AAID;AACF;AAtGkD,GAArD;AAwGD,CAzGD;;AA0GA5B,WAAWkB,kBAAX,G","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if there is a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";\nvar autoupdateVersionRefreshable =\n  __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\";\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function () {\n  return !! ClientVersions.findOne({\n               _id: \"version\",\n               version: {$ne: autoupdateVersion} }) ||\n         !! ClientVersions.findOne({\n               _id: \"version-refreshable\",\n               version: {$ne: autoupdateVersionRefreshable} });\n};\nAutoupdate._ClientVersions = ClientVersions;  // Used by a self-test\n\nvar knownToSupportCssOnLoad = false;\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\nvar failures = 0;\n\nfunction after(times, func) {\n  return function() {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n};\n\nAutoupdate._retrySubscription = function () {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError: function (error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function () {\n      if (Package.reload) {\n        var checkNewVersionDocument = function (doc) {\n          var self = this;\n          if (doc._id === 'version-refreshable' &&\n              doc.version !== autoupdateVersionRefreshable) {\n            autoupdateVersionRefreshable = doc.version;\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = (doc.assets && doc.assets.allCss) || [];\n            var oldLinks = [];\n\n            Array.prototype.forEach.call(\n              document.getElementsByTagName('link'),\n              function (link) {\n                if (link.className === '__meteor-css__') {\n                  oldLinks.push(link);\n                }\n              }\n            );\n\n            function waitUntilCssLoads(link, callback) {\n              var called;\n              function executeCallback(...args) {\n                if (! called) {\n                  called = true;\n                  return callback(...args);\n                }\n              }\n\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                executeCallback();\n              };\n\n              if (! knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    executeCallback();\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            }\n\n            var removeOldLinks = after(newCss.length, function () {\n              oldLinks.forEach(function (link) {\n                link.parentNode.removeChild(link);\n              });\n            });\n\n            var attachStylesheetLink = function (newLink) {\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n            };\n\n            if (newCss.length !== 0) {\n              newCss.forEach(function (css) {\n                var newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", css.url);\n                attachStylesheetLink(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n\n          }\n          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {\n            handle && handle.stop();\n\n            if (Package.reload) {\n              Package.reload.Reload._reload();\n            }\n          }\n        };\n\n        var handle = ClientVersions.find().observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\nAutoupdate._retrySubscription();\n"]}}]