[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar name;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:apollo\":{\"server\":{\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/index.js                                                                  //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  load: () => load,\n  db: () => db,\n  getRenderer: () => getRenderer\n});\nlet checkNpmVersions;\nmodule.watch(require(\"meteor/tmeasday:check-npm-versions\"), {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 0);\nlet load;\nmodule.watch(require(\"graphql-load\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 1);\nlet db;\nmodule.watch(require(\"meteor/cultofcoders:grapher\"), {\n  db(v) {\n    db = v;\n  }\n\n}, 2);\nlet getRenderer;\nmodule.watch(require(\"./ssr\"), {\n  default(v) {\n    getRenderer = v;\n  }\n\n}, 3);\nmodule.watch(require(\"./scalars\"));\nmodule.watch(require(\"./types\"));\nmodule.watch(require(\"./config\"), {\n  default(v) {\n    exports.Config = v;\n  }\n\n}, 4);\nmodule.watch(require(\"./core/users\"), {\n  getUserForContext(v) {\n    exports.getUserForContext = v;\n  }\n\n}, 5);\nmodule.watch(require(\"./initialize\"), {\n  default(v) {\n    exports.initialize = v;\n  }\n\n}, 6);\nmodule.watch(require(\"./morpher/expose\"), {\n  default(v) {\n    exports.expose = v;\n  }\n\n}, 7);\ncheckNpmVersions({\n  'apollo-server-express': '2.x.x',\n  graphql: '0.13.x',\n  'graphql-load': '0.1.x',\n  'graphql-type-json': '0.2.x',\n  'graphql-tools': '3.x.x'\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"config.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/config.js                                                                 //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet Config = {\n  userFields: {\n    _id: 1,\n    username: 1,\n    emails: 1,\n    roles: 1\n  },\n  middlewares: []\n};\nmodule.exportDefault(Config);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"initialize.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/initialize.js                                                             //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  default: () => initialize\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet db;\nmodule.watch(require(\"meteor/cultofcoders:grapher\"), {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet WebApp;\nmodule.watch(require(\"meteor/webapp\"), {\n  WebApp(v) {\n    WebApp = v;\n  }\n\n}, 2);\nlet ApolloServer;\nmodule.watch(require(\"apollo-server-express\"), {\n  ApolloServer(v) {\n    ApolloServer = v;\n  }\n\n}, 3);\nlet getSchema;\nmodule.watch(require(\"graphql-load\"), {\n  getSchema(v) {\n    getSchema = v;\n  }\n\n}, 4);\nlet AUTH_TOKEN_KEY;\nmodule.watch(require(\"../constants\"), {\n  AUTH_TOKEN_KEY(v) {\n    AUTH_TOKEN_KEY = v;\n  }\n\n}, 5);\nlet defaultSchemaDirectives;\nmodule.watch(require(\"./directives\"), {\n  default(v) {\n    defaultSchemaDirectives = v;\n  }\n\n}, 6);\nlet getUserForContext;\nmodule.watch(require(\"./core/users\"), {\n  getUserForContext(v) {\n    getUserForContext = v;\n  }\n\n}, 7);\n\nfunction initialize(apolloConfig = {}, meteorApolloConfig = {}) {\n  meteorApolloConfig = Object.assign({\n    gui: Meteor.isDevelopment,\n    middlewares: [],\n    userFields: {\n      _id: 1,\n      roles: 1,\n      username: 1,\n      emails: 1\n    }\n  }, meteorApolloConfig);\n  const {\n    typeDefs,\n    resolvers\n  } = getSchema();\n  const initialApolloConfig = Object.assign({}, apolloConfig);\n  apolloConfig = (0, _objectSpread2.default)({\n    introspection: Meteor.isDevelopment,\n    debug: Meteor.isDevelopment,\n    path: '/graphql',\n    formatError: e => ({\n      message: e.message,\n      locations: e.locations,\n      path: e.path\n    })\n  }, initialApolloConfig, {\n    typeDefs,\n    resolvers,\n    schemaDirectives: (0, _objectSpread2.default)({}, defaultSchemaDirectives, initialApolloConfig.schemaDirectives ? initialApolloConfig.schemaDirectives : []),\n    context: getContextCreator(meteorApolloConfig, initialApolloConfig.context),\n    subscriptions: getSubscriptionConfig(meteorApolloConfig)\n  });\n  const server = new ApolloServer(apolloConfig);\n  server.applyMiddleware({\n    app: WebApp.connectHandlers,\n    gui: meteorApolloConfig.gui\n  });\n  server.installSubscriptionHandlers(WebApp.httpServer);\n  meteorApolloConfig.middlewares.forEach(middleware => {\n    WebApp.connectHandlers.use('/graphql', middleware);\n  }); // We are doing this work-around because Playground sets headers and WebApp also sets headers\n  // Resulting into a conflict and a server side exception of \"Headers already sent\"\n\n  WebApp.connectHandlers.use('/graphql', (req, res) => {\n    if (req.method === 'GET') {\n      res.end();\n    }\n  });\n  return {\n    server\n  };\n}\n\nfunction getContextCreator(meteorApolloConfig, defaultContextResolver) {\n  return function getContext({\n    req,\n    connection\n  }) {\n    return Promise.asyncApply(() => {\n      const defaultContext = defaultContextResolver ? Promise.await(defaultContextResolver()) : {};\n      Object.assign(defaultContext, {\n        db\n      });\n\n      if (connection) {\n        return (0, _objectSpread2.default)({}, defaultContext, connection.context);\n      } else {\n        let userContext = {};\n\n        if (Package['accounts-base']) {\n          const loginToken = req.headers['meteor-login-token'] || req.cookies['meteor-login-token'];\n          userContext = Promise.await(getUserForContext(loginToken, meteorApolloConfig.userFields));\n        }\n\n        return (0, _objectSpread2.default)({}, defaultContext, userContext);\n      }\n    });\n  };\n}\n\nfunction getSubscriptionConfig(meteorApolloConfig) {\n  return {\n    onConnect: (connectionParams, webSocket, context) => Promise.asyncApply(() => {\n      const loginToken = connectionParams[AUTH_TOKEN_KEY];\n      return new Promise((resolve, reject) => {\n        if (loginToken) {\n          const userContext = getUserForContext(loginToken, meteorApolloConfig.userFields).then(userContext => {\n            resolve(userContext);\n          });\n        } else {\n          resolve({});\n        }\n      });\n    })\n  };\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ssr.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/ssr.js                                                                    //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  default: () => getRenderer\n});\nlet ApolloClient;\nmodule.watch(require(\"apollo-client\"), {\n  ApolloClient(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet InMemoryCache;\nmodule.watch(require(\"apollo-cache-inmemory\"), {\n  InMemoryCache(v) {\n    InMemoryCache = v;\n  }\n\n}, 1);\n\nfunction getRenderer(options) {\n  let React;\n  module.watch(require(\"react\"), {\n    default(v) {\n      React = v;\n    }\n\n  }, 2);\n  let renderToString;\n  module.watch(require(\"react-dom/server\"), {\n    renderToString(v) {\n      renderToString = v;\n    }\n\n  }, 3);\n  let getDataFromTree, ApolloProvider;\n  module.watch(require(\"react-apollo\"), {\n    getDataFromTree(v) {\n      getDataFromTree = v;\n    },\n\n    ApolloProvider(v) {\n      ApolloProvider = v;\n    }\n\n  }, 4);\n  let SchemaLink;\n  module.watch(require(\"apollo-link-schema\"), {\n    SchemaLink(v) {\n      SchemaLink = v;\n    }\n\n  }, 5);\n\n  const render = sink => Promise.asyncApply(() => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: Promise.await(options.server.context({\n        req: sink.request\n      }))\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache()\n    });\n    const context = {};\n    const WrappedApp = React.createElement(ApolloProvider, {\n      client: client\n    }, options.app(sink));\n    options.handler && Promise.await(options.handler(sink)); // load all data from local server;\n\n    Promise.await(getDataFromTree(WrappedApp));\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  });\n\n  return render;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core\":{\"users.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/core/users.js                                                             //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  getUserForContext: () => getUserForContext\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\n\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nconst getUserForContext = (loginToken, userDefaultFields) => Promise.asyncApply(() => {\n  if (!Accounts) {\n    return {};\n  } // there is a possible current user connected!\n\n\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String); // the hashed token is the key to find the possible current user in the db\n\n    const hashedToken = Accounts._hashLoginToken(loginToken); // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n\n\n    const currentUser = Meteor.users.findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken\n    }, {\n      fields: (0, _objectSpread2.default)({}, userDefaultFields, {\n        'services.resume.loginTokens': 1\n      })\n    }); // the current user exists\n\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(tokenInfo => tokenInfo.hashedToken === hashedToken); // get an exploitable token expiration date\n\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when); // true if the token is expired\n\n\n      const isExpired = expiresAt < new Date(); // if the token is still valid, give access to the current user\n      // information in the resolvers context\n\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null\n  };\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"directives\":{\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/directives/index.js                                                       //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.export({\n  typeDefs: () => typeDefs\n});\nlet grapherDirectives;\nmodule.watch(require(\"meteor/cultofcoders:grapher-schema-directives\"), {\n  directives(v) {\n    grapherDirectives = v;\n  }\n\n}, 0);\nlet directiveDefinitions;\nmodule.watch(require(\"meteor/cultofcoders:grapher-schema-directives\"), {\n  directiveDefinitions(v) {\n    directiveDefinitions = v;\n  }\n\n}, 1);\nconst typeDefs = [directiveDefinitions];\nmodule.exportDefault((0, _objectSpread2.default)({}, grapherDirectives));\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"morpher\":{\"expose.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/morpher/expose.js                                                         //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet db;\nmodule.watch(require(\"meteor/cultofcoders:grapher\"), {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet load;\nmodule.watch(require(\"meteor/cultofcoders:apollo\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 2);\nlet setupDataFetching;\nmodule.watch(require(\"./setupDataFetching\"), {\n  default(v) {\n    setupDataFetching = v;\n  }\n\n}, 3);\nlet setupMutations;\nmodule.watch(require(\"./setupMutations\"), {\n  default(v) {\n    setupMutations = v;\n  }\n\n}, 4);\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction\n  });\n  const newObject = Object.assign({\n    subscription: true\n  }, object);\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(`You have already exposed ${name} somewhere else. Please make sure they do not collide.`);\n    }\n\n    exposedNames.push(name);\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const {\n    collection,\n    type\n  } = config;\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let {\n      MutationType,\n      Mutation\n    } = setupMutations(config, name, type, collection);\n    MutationType = `type Mutation { ${MutationType} }`;\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: {\n        Mutation\n      }\n    });\n  }\n\n  if (config.find) {\n    let {\n      QueryType,\n      Query\n    } = setupDataFetching(config, name, type, collection);\n    QueryType = `type Query { ${QueryType} }`;\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: {\n        Query\n      }\n    });\n  }\n\n  return modules;\n}\n\nmodule.exportDefault(morph);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getFields.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/morpher/getFields.js                                                      //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  default: () => getFields\n});\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\n\nfunction getFields(mutator) {\n  // compute modified fields\n  var fields = [];\n  var topLevelFields = [];\n\n  _.each(mutator, function (params, op) {\n    if (op[0] == '$') {\n      _.each(_.keys(params), function (field) {\n        // record the field we are trying to change\n        if (!_.contains(fields, field)) {\n          // fields.push(field);\n          // topLevelFields.push(field.split('.')[0]);\n          // like { $set: { 'array.1.xx' } }\n          const specificPositionFieldMatch = /\\.[\\d]+(\\.)?/.exec(field);\n\n          if (specificPositionFieldMatch) {\n            fields.push(field.slice(0, specificPositionFieldMatch.index));\n          } else {\n            if (field.indexOf('.$') !== -1) {\n              if (field.indexOf('.$.') !== -1) {\n                fields.push(field.split('.$.')[0]);\n              } else {\n                fields.push(field.split('.$')[0]);\n              }\n            } else {\n              fields.push(field);\n            }\n          }\n\n          topLevelFields.push(field.split('.')[0]);\n        }\n      });\n    } else {\n      fields.push(op);\n    }\n  });\n\n  return {\n    fields,\n    topLevelFields\n  };\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupDataFetching.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/morpher/setupDataFetching.js                                              //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  default: () => setupDataFetching\n});\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\n\nfunction setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n  QueryType += `\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${name}Single(payload: String!): ${type}\n  `; // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, {\n    params\n  }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign({\n        filters: {},\n        options: {}\n      }, params);\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {}\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, {\n    payload\n  }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, {\n      params\n    }, ctx, ast);\n    return collection().astToQuery(ast, astToQueryOptions).fetch();\n  };\n\n  Query = {\n    [name]: fn,\n\n    [name + 'Count'](_, {\n      payload\n    }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, {\n        params\n      }, ctx, ast);\n      return collection().find(astToQueryOptions.$filters || {}).count();\n    },\n\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    }\n\n  };\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n           if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n           const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return {\n    QueryType,\n    SubscriptionType,\n    Query,\n    Subscription\n  };\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupMutations.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/morpher/setupMutations.js                                                 //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  default: () => setupMutations\n});\nlet getFields;\nmodule.watch(require(\"./getFields\"), {\n  default(v) {\n    getFields = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\n\nfunction setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `${name}Insert(payload: String!): ${type}\\n`;\n\n    Mutation[`${name}Insert`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        document\n      } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, {\n          document\n        });\n      }\n\n      const docId = collection().insert(document);\n      return {\n        _id: docId\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `${name}Update(payload: String!): String\\n`;\n\n    Mutation[`${name}Update`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector,\n        modifier\n      } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const {\n          topLevelFields,\n          fields\n        } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `${name}Remove(payload: String!): String\\n`;\n\n    Mutation[`${name}Remove`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector\n      } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, {\n          selector\n        });\n      }\n\n      collection().remove(selector);\n      return 'ok';\n    };\n  }\n\n  return {\n    MutationType,\n    Mutation\n  };\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"scalars\":{\"Date.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/scalars/Date.js                                                           //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet GraphQLScalarType;\nmodule.watch(require(\"graphql\"), {\n  GraphQLScalarType(v) {\n    GraphQLScalarType = v;\n  }\n\n}, 0);\nlet Kind;\nmodule.watch(require(\"graphql/language\"), {\n  Kind(v) {\n    Kind = v;\n  }\n\n}, 1);\nmodule.exportDefault(new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n\n  parseValue(value) {\n    return new Date(Date.parse(value));\n  },\n\n  serialize(value) {\n    return value.toISOString();\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      const time = Date.parse(ast.value);\n      const date = new Date(time);\n      return date;\n    }\n\n    return null;\n  }\n\n}));\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/scalars/index.js                                                          //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet Scalars;\nmodule.watch(require(\"./scalars\"), {\n  default(v) {\n    Scalars = v;\n  }\n\n}, 0);\nlet DateResolver;\nmodule.watch(require(\"./Date\"), {\n  default(v) {\n    DateResolver = v;\n  }\n\n}, 1);\nlet GraphQLJSON;\nmodule.watch(require(\"graphql-type-json\"), {\n  default(v) {\n    GraphQLJSON = v;\n  }\n\n}, 2);\nlet load;\nmodule.watch(require(\"graphql-load\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 3);\nconst typeDefs = [Scalars];\nconst resolvers = [{\n  Date: DateResolver,\n  JSON: GraphQLJSON\n}];\nload({\n  typeDefs,\n  resolvers\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scalars.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/scalars/scalars.js                                                        //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.exportDefault(`\n  scalar Date\n  scalar JSON\n`);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"types\":{\"SubscriptionEventType.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/types/SubscriptionEventType.js                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.exportDefault(`\n  type SubscriptionEvent {\n    event: String\n    doc: JSON\n  }\n`);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/server/types/index.js                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nlet load;\nmodule.watch(require(\"graphql-load\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 0);\nlet directiveTypeDefs;\nmodule.watch(require(\"../directives\"), {\n  typeDefs(v) {\n    directiveTypeDefs = v;\n  }\n\n}, 1);\nlet SubscriptionEventType;\nmodule.watch(require(\"./SubscriptionEventType\"), {\n  default(v) {\n    SubscriptionEventType = v;\n  }\n\n}, 2);\nload({\n  typeDefs: [...directiveTypeDefs, SubscriptionEventType]\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"constants.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/cultofcoders_apollo/constants.js                                                                     //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  AUTH_TOKEN_KEY: () => AUTH_TOKEN_KEY,\n  AUTH_TOKEN_LOCALSTORAGE: () => AUTH_TOKEN_LOCALSTORAGE,\n  GRAPHQL_SUBSCRIPTION_PATH: () => GRAPHQL_SUBSCRIPTION_PATH,\n  GRAPHQL_SUBSCRIPTION_ENDPOINT: () => GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT: () => GRAPHQL_ENDPOINT\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nconst AUTH_TOKEN_KEY = 'meteor-login-token';\nconst AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\nconst GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nconst GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(GRAPHQL_SUBSCRIPTION_PATH).replace(/http/, 'ws');\nconst GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"/node_modules/meteor/cultofcoders:apollo/server/index.js\");\n\n/* Exports */\nPackage._define(\"cultofcoders:apollo\", exports);\n\n})();\n","servePath":"/packages/cultofcoders_apollo.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:apollo/server/index.js","packages/cultofcoders:apollo/server/config.js","packages/cultofcoders:apollo/server/initialize.js","packages/cultofcoders:apollo/server/ssr.js","packages/cultofcoders:apollo/server/core/users.js","packages/cultofcoders:apollo/server/directives/index.js","packages/cultofcoders:apollo/server/morpher/expose.js","packages/cultofcoders:apollo/server/morpher/getFields.js","packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","packages/cultofcoders:apollo/server/morpher/setupMutations.js","packages/cultofcoders:apollo/server/scalars/Date.js","packages/cultofcoders:apollo/server/scalars/index.js","packages/cultofcoders:apollo/server/scalars/scalars.js","packages/cultofcoders:apollo/server/types/SubscriptionEventType.js","packages/cultofcoders:apollo/server/types/index.js","packages/cultofcoders:apollo/constants.js"],"names":["module","export","load","db","getRenderer","checkNpmVersions","watch","require","v","default","exports","Config","getUserForContext","initialize","expose","graphql","userFields","_id","username","emails","roles","middlewares","exportDefault","Meteor","WebApp","ApolloServer","getSchema","AUTH_TOKEN_KEY","defaultSchemaDirectives","apolloConfig","meteorApolloConfig","Object","assign","gui","isDevelopment","typeDefs","resolvers","initialApolloConfig","introspection","debug","path","formatError","e","message","locations","schemaDirectives","context","getContextCreator","subscriptions","getSubscriptionConfig","server","applyMiddleware","app","connectHandlers","installSubscriptionHandlers","httpServer","forEach","middleware","use","req","res","method","end","defaultContextResolver","getContext","connection","defaultContext","userContext","Package","loginToken","headers","cookies","onConnect","connectionParams","webSocket","Promise","resolve","reject","then","ApolloClient","InMemoryCache","options","React","renderToString","getDataFromTree","ApolloProvider","SchemaLink","render","sink","link","schema","request","getLink","client","ssrMode","cache","WrappedApp","handler","body","renderIntoElementById","root","initialState","extract","appendToBody","JSON","stringify","Accounts","userDefaultFields","check","String","hashedToken","_hashLoginToken","currentUser","users","findOne","fields","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","grapherDirectives","directives","directiveDefinitions","Match","setupDataFetching","setupMutations","MaybeBoolOrFunction","Maybe","OneOf","Boolean","Function","getConfig","object","type","collection","update","insert","remove","newObject","subscription","exposedNames","morph","config","name","includes","Error","push","singleConfig","modules","exposeSingle","MutationType","Mutation","QueryType","Query","getFields","_","mutator","topLevelFields","each","params","op","keys","field","contains","specificPositionFieldMatch","exec","slice","index","indexOf","split","EJSON","Subscription","SubscriptionType","resolveSelectors","ctx","ast","astToQueryOptions","filters","call","undefined","$filters","$options","fn","payload","parse","astToQuery","fetch","count","args","result","document","docId","selector","modifier","modifiedFields","modifiedTopLevelFields","GraphQLScalarType","Kind","description","parseValue","value","serialize","toISOString","parseLiteral","kind","STRING","time","date","Scalars","DateResolver","GraphQLJSON","directiveTypeDefs","SubscriptionEventType","AUTH_TOKEN_LOCALSTORAGE","GRAPHQL_SUBSCRIPTION_PATH","GRAPHQL_SUBSCRIPTION_ENDPOINT","GRAPHQL_ENDPOINT","absoluteUrl","replace"],"mappings":"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","file":"/packages/cultofcoders_apollo.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport { load } from 'graphql-load';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport getRenderer from './ssr';\n\nimport './scalars';\nimport './types';\nexport { default as Config } from './config';\nexport { getUserForContext } from './core/users';\nexport { default as initialize } from './initialize';\nexport { default as expose } from './morpher/expose';\n\nexport { load, db, getRenderer };\n\ncheckNpmVersions({\n  'apollo-server-express': '2.x.x',\n  graphql: '0.13.x',\n  'graphql-load': '0.1.x',\n  'graphql-type-json': '0.2.x',\n  'graphql-tools': '3.x.x',\n});\n","let Config = {\n  userFields: {\n    _id: 1,\n    username: 1,\n    emails: 1,\n    roles: 1,\n  },\n  middlewares: [],\n};\n\nexport default Config;\n","import { Meteor } from 'meteor/meteor';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { WebApp } from 'meteor/webapp';\nimport { ApolloServer } from 'apollo-server-express';\nimport { getSchema } from 'graphql-load';\nimport { AUTH_TOKEN_KEY } from '../constants';\nimport defaultSchemaDirectives from './directives';\nimport { getUserForContext } from './core/users';\n\n/**\n *\n * @param {*} apolloConfig Options https://www.apollographql.com/docs/apollo-server/api/apollo-server.html#constructor-options-lt-ApolloServer-gt\n * @param {MeteorApolloConfig} meteorApolloConfig\n */\nexport default function initialize(apolloConfig = {}, meteorApolloConfig = {}) {\n  meteorApolloConfig = Object.assign(\n    {\n      gui: Meteor.isDevelopment,\n      middlewares: [],\n      userFields: {\n        _id: 1,\n        roles: 1,\n        username: 1,\n        emails: 1,\n      },\n    },\n    meteorApolloConfig\n  );\n\n  const { typeDefs, resolvers } = getSchema();\n\n  const initialApolloConfig = Object.assign({}, apolloConfig);\n  apolloConfig = {\n    introspection: Meteor.isDevelopment,\n    debug: Meteor.isDevelopment,\n    path: '/graphql',\n    formatError: e => ({\n      message: e.message,\n      locations: e.locations,\n      path: e.path,\n    }),\n    ...initialApolloConfig,\n    typeDefs,\n    resolvers,\n    schemaDirectives: {\n      ...defaultSchemaDirectives,\n      ...(initialApolloConfig.schemaDirectives\n        ? initialApolloConfig.schemaDirectives\n        : []),\n    },\n    context: getContextCreator(meteorApolloConfig, initialApolloConfig.context),\n    subscriptions: getSubscriptionConfig(meteorApolloConfig),\n  };\n\n  const server = new ApolloServer(apolloConfig);\n\n  server.applyMiddleware({\n    app: WebApp.connectHandlers,\n    gui: meteorApolloConfig.gui,\n  });\n\n  server.installSubscriptionHandlers(WebApp.httpServer);\n\n  meteorApolloConfig.middlewares.forEach(middleware => {\n    WebApp.connectHandlers.use('/graphql', middleware);\n  });\n\n  // We are doing this work-around because Playground sets headers and WebApp also sets headers\n  // Resulting into a conflict and a server side exception of \"Headers already sent\"\n  WebApp.connectHandlers.use('/graphql', (req, res) => {\n    if (req.method === 'GET') {\n      res.end();\n    }\n  });\n\n  return {\n    server,\n  };\n}\n\nfunction getContextCreator(meteorApolloConfig, defaultContextResolver) {\n  return async function getContext({ req, connection }) {\n    const defaultContext = defaultContextResolver\n      ? await defaultContextResolver()\n      : {};\n\n    Object.assign(defaultContext, { db });\n\n    if (connection) {\n      return {\n        ...defaultContext,\n        ...connection.context,\n      };\n    } else {\n      let userContext = {};\n      if (Package['accounts-base']) {\n        const loginToken =\n          req.headers['meteor-login-token'] ||\n          req.cookies['meteor-login-token'];\n        userContext = await getUserForContext(\n          loginToken,\n          meteorApolloConfig.userFields\n        );\n      }\n\n      return {\n        ...defaultContext,\n        ...userContext,\n      };\n    }\n  };\n}\n\nfunction getSubscriptionConfig(meteorApolloConfig) {\n  return {\n    onConnect: async (connectionParams, webSocket, context) => {\n      const loginToken = connectionParams[AUTH_TOKEN_KEY];\n\n      return new Promise((resolve, reject) => {\n        if (loginToken) {\n          const userContext = getUserForContext(\n            loginToken,\n            meteorApolloConfig.userFields\n          ).then(userContext => {\n            resolve(userContext);\n          });\n        } else {\n          resolve({});\n        }\n      });\n    },\n  };\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n/**\n * @param {() => React.Element} options.app\n * @param {String} options.root The id of element we're gonna render in\n * @param {ApolloServer} options.server The id of element we're gonna render in\n * @param {Function} options.handler Perform additional operations\n * @param {Function} options.getLink Perform additional operations\n */\nexport default function getRenderer(options) {\n  import React from 'react';\n  import { renderToString } from 'react-dom/server';\n  import { getDataFromTree, ApolloProvider } from 'react-apollo';\n  import { SchemaLink } from 'apollo-link-schema';\n\n  const render = async sink => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: await options.server.context({ req: sink.request }),\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache(),\n    });\n\n    const context = {};\n    const WrappedApp = (\n      <ApolloProvider client={client}>{options.app(sink)}</ApolloProvider>\n    );\n\n    options.handler && (await options.handler(sink));\n\n    // load all data from local server;\n    await getDataFromTree(WrappedApp);\n\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  };\n\n  return render;\n}\n","import { Meteor } from 'meteor/meteor';\n\nlet Accounts;\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nexport const getUserForContext = async (loginToken, userDefaultFields) => {\n  if (!Accounts) {\n    return {};\n  }\n\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = Meteor.users.findOne(\n      {\n        'services.resume.loginTokens.hashedToken': hashedToken,\n      },\n      {\n        fields: {\n          ...userDefaultFields,\n          'services.resume.loginTokens': 1,\n        },\n      }\n    );\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null,\n  };\n};\n","import { directives as grapherDirectives } from 'meteor/cultofcoders:grapher-schema-directives';\nimport { directiveDefinitions } from 'meteor/cultofcoders:grapher-schema-directives';\n\nexport const typeDefs = [directiveDefinitions];\n\nexport default {\n  ...grapherDirectives,\n};\n","import { check, Match } from 'meteor/check';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { load } from 'meteor/cultofcoders:apollo';\nimport setupDataFetching from './setupDataFetching';\nimport setupMutations from './setupMutations';\n\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction,\n  });\n\n  const newObject = Object.assign(\n    {\n      subscription: true,\n    },\n    object\n  );\n\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(\n        `You have already exposed ${name} somewhere else. Please make sure they do not collide.`\n      );\n    }\n    exposedNames.push(name);\n\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const { collection, type } = config;\n\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let { MutationType, Mutation } = setupMutations(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    MutationType = `type Mutation { ${MutationType} }`;\n\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: { Mutation },\n    });\n  }\n\n  if (config.find) {\n    let { QueryType, Query } = setupDataFetching(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    QueryType = `type Query { ${QueryType} }`;\n\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: { Query },\n    });\n  }\n\n  return modules;\n}\n\nexport default morph;\n","import { _ } from 'meteor/underscore';\n\n/**\n * @param mutator\n */\nexport default function getFields(mutator) {\n  // compute modified fields\n  var fields = [];\n  var topLevelFields = [];\n\n  _.each(mutator, function(params, op) {\n    if (op[0] == '$') {\n      _.each(_.keys(params), function(field) {\n        // record the field we are trying to change\n        if (!_.contains(fields, field)) {\n          // fields.push(field);\n          // topLevelFields.push(field.split('.')[0]);\n\n          // like { $set: { 'array.1.xx' } }\n          const specificPositionFieldMatch = /\\.[\\d]+(\\.)?/.exec(field);\n          if (specificPositionFieldMatch) {\n            fields.push(field.slice(0, specificPositionFieldMatch.index));\n          } else {\n            if (field.indexOf('.$') !== -1) {\n              if (field.indexOf('.$.') !== -1) {\n                fields.push(field.split('.$.')[0]);\n              } else {\n                fields.push(field.split('.$')[0]);\n              }\n            } else {\n              fields.push(field);\n            }\n          }\n\n          topLevelFields.push(field.split('.')[0]);\n        }\n      });\n    } else {\n      fields.push(op);\n    }\n  });\n\n  return { fields, topLevelFields };\n}\n","import { EJSON } from 'meteor/ejson';\n\nexport default function setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n\n  QueryType += `\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${name}Single(payload: String!): ${type}\n  `;\n\n  // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, { params }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign(\n        {\n          filters: {},\n          options: {},\n        },\n        params\n      );\n\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {},\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, { payload }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n    return collection()\n      .astToQuery(ast, astToQueryOptions)\n      .fetch();\n  };\n\n  Query = {\n    [name]: fn,\n    [name + 'Count'](_, { payload }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n      return collection()\n        .find(astToQueryOptions.$filters || {})\n        .count();\n    },\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    },\n  };\n\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n\n          if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n\n          const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return { QueryType, SubscriptionType, Query, Subscription };\n}\n","import getFields from './getFields';\nimport { EJSON } from 'meteor/ejson';\nimport { check } from 'meteor/check';\n\nexport default function setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `${name}Insert(payload: String!): ${type}\\n`;\n\n    Mutation[`${name}Insert`] = (_, { payload }, ctx) => {\n      const { document } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, { document });\n      }\n\n      const docId = collection().insert(document);\n\n      return {\n        _id: docId,\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `${name}Update(payload: String!): String\\n`;\n\n    Mutation[`${name}Update`] = (_, { payload }, ctx) => {\n      const { selector, modifier } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const { topLevelFields, fields } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields,\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `${name}Remove(payload: String!): String\\n`;\n\n    Mutation[`${name}Remove`] = (_, { payload }, ctx) => {\n      const { selector } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, { selector });\n      }\n\n      collection().remove(selector);\n\n      return 'ok';\n    };\n  }\n\n  return { MutationType, Mutation };\n}\n","import { GraphQLScalarType } from 'graphql';\nimport { Kind } from 'graphql/language';\n\nexport default new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n  parseValue(value) {\n    return new Date(Date.parse(value));\n  },\n  serialize(value) {\n    return value.toISOString();\n  },\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      const time = Date.parse(ast.value);\n      const date = new Date(time);\n\n      return date;\n    }\n    return null;\n  },\n});\n","import Scalars from './scalars';\nimport DateResolver from './Date';\nimport GraphQLJSON from 'graphql-type-json';\nimport { load } from 'graphql-load';\n\nconst typeDefs = [Scalars];\nconst resolvers = [\n  {\n    Date: DateResolver,\n    JSON: GraphQLJSON,\n  },\n];\n\nload({\n  typeDefs,\n  resolvers,\n});\n","export default `\n  scalar Date\n  scalar JSON\n`;\n","export default `\n  type SubscriptionEvent {\n    event: String\n    doc: JSON\n  }\n`;\n","import { load } from 'graphql-load';\nimport { typeDefs as directiveTypeDefs } from '../directives';\nimport SubscriptionEventType from './SubscriptionEventType';\n\nload({\n  typeDefs: [...directiveTypeDefs, SubscriptionEventType],\n});\n","import { Meteor } from 'meteor/meteor';\n\nexport const AUTH_TOKEN_KEY = 'meteor-login-token';\nexport const AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\n\nexport const GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nexport const GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(\n  GRAPHQL_SUBSCRIPTION_PATH\n).replace(/http/, 'ws');\n\nexport const GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n"]}}]