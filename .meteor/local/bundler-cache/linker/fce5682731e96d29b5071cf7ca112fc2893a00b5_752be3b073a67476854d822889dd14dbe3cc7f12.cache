[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"db\":{\"contacts\":{\"collection.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/db/contacts/collection.js                                            //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet ContactsSchema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    ContactsSchema = v;\n  }\n\n}, 1);\nlet Contacts = new Mongo.Collection(\"contacts\");\nContacts.attachSchema(ContactsSchema);\nmodule.exportDefault(Contacts);\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/db/contacts/schema.js                                                //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nmodule.exportDefault(new SimpleSchema({\n  _id: String,\n  emailAddresses: {\n    type: Array,\n    defaultValue: []\n  },\n  'emailAddresses.$': {\n    type: Object,\n    blackbox: true\n  },\n  company: String,\n  familyName: String,\n  givenName: String,\n  jobTitle: String,\n  middleName: String,\n  phoneNumbers: {\n    type: Array,\n    defaultValue: []\n  },\n  'phoneNumbers.$': {\n    type: Object,\n    blackbox: true\n  },\n  hasThumbnail: Boolean,\n  thumbnailPath: String,\n  postalAddresses: {\n    type: Array,\n    defaultValue: []\n  },\n  'postalAddresses.$': {\n    type: Object,\n    blackbox: true\n  },\n  birthday: {\n    type: Object,\n    blackbox: true\n  },\n  tags: {\n    type: Array,\n    defaultValue: []\n  },\n  'tags.$': {\n    type: String,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  }\n}, {\n  requiredByDefault: false\n}));\n//////////////////////////////////////////////////////////////////////////////////\n\n}},\"recommandations\":{\"collection.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/db/recommandations/collection.js                                     //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet RecommandationSchema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    RecommandationSchema = v;\n  }\n\n}, 1);\nlet Recommandations = new Mongo.Collection(\"recommandations\");\nRecommandations.attachSchema(RecommandationSchema);\nmodule.exportDefault(Recommandations);\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/db/recommandations/schema.js                                         //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nmodule.exportDefault(new SimpleSchema({\n  _id: String,\n  tags: {\n    type: Array,\n    defaultValue: []\n  },\n  'tags.$': {\n    type: String,\n    blackbox: true\n  },\n  text: String,\n  commentIds: {\n    type: Array\n  },\n  'commentIds.$': {\n    type: String,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  }\n}, {\n  requiredByDefault: false\n}));\n//////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/db/index.js                                                          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.watch(require(\"./contacts/collection\"));\nmodule.watch(require(\"./recommandations/collection\"));\n//////////////////////////////////////////////////////////////////////////////////\n\n}},\"startup\":{\"server\":{\"graphql.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/startup/server/graphql.js                                            //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.watch(require(\"../../api/load\"));\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/startup/server/index.js                                              //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet initialize;\nmodule.watch(require(\"meteor/cultofcoders:apollo\"), {\n  initialize(v) {\n    initialize = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./graphql\"));\nmodule.watch(require(\"../../db\"));\ninitialize();\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},\"api\":{\"User.gql\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/api/User.gql                                                         //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.watch(require(\"./User.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"User.gql.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/api/User.gql.js                                                      //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"users\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":79}};\n    doc.loc.source = {\"body\":\"type User {\\n    id: ID\\n    name: String\\n}\\n\\ntype Query {\\n    users: [User]    \\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"User.resolver.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/api/User.resolver.js                                                 //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet sequelize;\nmodule.watch(require(\"./connectors\"), {\n  sequelize(v) {\n    sequelize = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    users(_, args, ctx) {\n      const usersQuery = 'select id, name from userx'; //return User.findAll();\n\n      return [{\n        \"id\": \"1\",\n        \"name\": \"A\"\n      }, {\n        \"id\": \"2\",\n        \"name\": \"B\"\n      }];\n    }\n\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////\n\n},\"load.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/api/load.js                                                          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet load;\nmodule.watch(require(\"graphql-load\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 0);\nlet UserType;\nmodule.watch(require(\"./User\"), {\n  default(v) {\n    UserType = v;\n  }\n\n}, 1);\nlet UserResolver;\nmodule.watch(require(\"./User.resolver\"), {\n  default(v) {\n    UserResolver = v;\n  }\n\n}, 2);\nload({\n  typeDefs: [UserType],\n  resolvers: [UserResolver]\n});\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// server/main.js                                                               //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.watch(require(\"../imports/startup/server\"));\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".gql\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/db/contacts/collection.js","imports/db/contacts/schema.js","imports/db/recommandations/collection.js","imports/db/recommandations/schema.js","imports/db/index.js","imports/startup/server/graphql.js","imports/startup/server/index.js","imports/api/User.resolver.js","imports/api/load.js","server/main.js"],"names":["Mongo","module","watch","require","v","ContactsSchema","default","Contacts","Collection","attachSchema","exportDefault","SimpleSchema","_id","String","emailAddresses","type","Array","defaultValue","Object","blackbox","company","familyName","givenName","jobTitle","middleName","phoneNumbers","hasThumbnail","Boolean","thumbnailPath","postalAddresses","birthday","tags","createdAt","Date","autoValue","isInsert","requiredByDefault","RecommandationSchema","Recommandations","text","commentIds","initialize","sequelize","Query","users","_","args","ctx","usersQuery","load","UserType","UserResolver","typeDefs","resolvers"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\nimport ContactsSchema from './schema';\n\nlet Contacts = new Mongo.Collection(\"contacts\");\n\nContacts.attachSchema(ContactsSchema);\n\nexport default Contacts;","import SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: String,\n    emailAddresses: {\n        type: Array,\n        defaultValue: []\n    },\n    'emailAddresses.$': {\n        type: Object,\n        blackbox: true\n    },\n    company: String,\n    familyName: String,\n    givenName: String,\n    jobTitle: String,\n    middleName: String,\n    phoneNumbers: {\n        type: Array,\n        defaultValue: []\n    },\n    'phoneNumbers.$': {\n        type: Object,\n        blackbox: true\n    },\n    hasThumbnail: Boolean,\n    thumbnailPath: String,\n    postalAddresses: {\n        type: Array,\n        defaultValue: []\n    },\n    'postalAddresses.$': {\n        type: Object,\n        blackbox: true\n    },\n    birthday: {\n        type: Object,\n        blackbox: true\n    },\n    tags: {\n        type: Array,\n        defaultValue: []\n    },\n    'tags.$': {\n        type: String,\n        blackbox: true\n    },\n    createdAt: {\n        type: Date,\n        autoValue: function() {\n            if ( this.isInsert ) {\n                return new Date;\n            }\n        }\n    }\n}, { requiredByDefault: false });","import { Mongo } from 'meteor/mongo';\nimport RecommandationSchema from './schema';\n\nlet Recommandations = new Mongo.Collection(\"recommandations\");\n\nRecommandations.attachSchema(RecommandationSchema);\n\nexport default Recommandations;","import SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: String,\n    tags: {\n        type: Array,\n        defaultValue: []\n    },\n    'tags.$': {\n        type: String,\n        blackbox: true\n    },\n    text: String,\n    commentIds: {\n        type: Array\n    },\n    'commentIds.$': {\n        type: String,\n        blackbox: true\n    },\n    createdAt: {\n        type: Date,\n        autoValue: function() {\n            if ( this.isInsert ) {\n                return new Date;\n            }\n        }\n    }\n}, { requiredByDefault: false });","\nimport './contacts/collection';\n// import './contacts/reducers';\nimport './recommandations/collection'","import '../../api/load';","import { initialize } from 'meteor/cultofcoders:apollo';\n\nimport './graphql';\nimport '../../db';\n\ninitialize();\n\n\n","import { sequelize } from './connectors';\n//import { User } from './connectors';\n\nexport default {\n    Query:{\n       \n       users(_, args, ctx) {\n            const usersQuery = 'select id, name from userx';\n            //return User.findAll();\n            return [{\"id\":\"1\", \"name\":\"A\"}, {\"id\":\"2\", \"name\":\"B\"}]\n          }\n\n    }\n}\n\n","import { load } from 'graphql-load';\nimport UserType from './User';\nimport UserResolver from './User.resolver';\n\nload({\n    typeDefs: [UserType],\n    resolvers: [UserResolver],\n\n});","import '../imports/startup/server';"]}}]