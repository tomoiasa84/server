[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nCollection2 = Package['aldeed:collection2-core'].Collection2;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"modules\":{\"comments\":{\"API.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/comments/API.gql                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./API.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/comments/API.gql.js                                                           //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Mutation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"commentRecomandationCreate\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Comment\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"commentRecomandationUpdate\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"commentRecomandationDelete\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":286}};\n    doc.loc.source = {\"body\":\"type Mutation {\\n  commentRecomandationCreate(\\n    recommandationId: String!,\\n    contactId: String!\\n  ): Comment\\n\\n  commentRecomandationUpdate(\\n  \\trecommandationId: String!,\\n    contactId: String!\\n  \\t): String!\\n\\n  commentRecomandationDelete(\\n   recommandationId: String!\\n   ): String!\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.resolvers.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/comments/API.resolvers.js                                                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.exportDefault({\n  Mutation: {\n    commentRecomandationCreate(_, {\n      recommandationId,\n      contactId\n    }, {\n      db\n    }) {\n      // const recommandationComment = db.comments.findOne({ contactId, recommandationId })\n      // if (recommandationComment) {\n      //     throw new Meteor.Error('Comment is already in database')\n      // }\n      const {\n        commentIds\n      } = db.recommandations.findOne(recommandationId);\n      console.log(commentIds[0]);\n      return db.comments.update(commentIds[0], {\n        $set: {\n          recommandationId,\n          contactId\n        }\n      });\n    }\n\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/comments/index.js                                                             //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet APIType;\nmodule.watch(require(\"./API\"), {\n  default(v) {\n    APIType = v;\n  }\n\n}, 0);\nlet APIResolvers;\nmodule.watch(require(\"./API.resolvers\"), {\n  default(v) {\n    APIResolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  typeDefs: [APIType],\n  resolvers: [APIResolvers]\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"contacts\":{\"API.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/contacts/API.gql                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./API.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/contacts/API.gql.js                                                           //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contacts\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"options\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]}],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Mutation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactCreate\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ContactCreateInput\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactUpdate\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactId\"},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ContactCreateInput\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"ContactCreateInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"familyName\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"middleName\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"givenName\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"phoneNumbers\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PhoneNumberInput\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"company\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"jobTitle\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"emailAddresses\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"EmailAddressesInput\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"hasThumbnail\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"thumbnailPath\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"postalAddresses\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PostalAddressesInput\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"birthday\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"BirthdayInput\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"tags\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"PhoneNumberInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"number\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"EmailAddressesInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"PostalAddressesInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"region\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"postCode\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"BirthdayInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"year\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"month\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"day\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":885}};\n    doc.loc.source = {\"body\":\"type Query {\\n  contacts(filters: JSON, options: JSON): [Contact]\\n}\\n\\ntype Mutation {\\n  contactCreate(data: ContactCreateInput): Contact\\n  contactUpdate(contactId: String!, data: ContactCreateInput): Contact\\n}\\n\\ninput ContactCreateInput {\\n  familyName: String\\n  middleName: String\\n  givenName: String\\n  phoneNumbers: [PhoneNumberInput]\\n  company: String\\n  jobTitle: String\\n  emailAddresses: [EmailAddressesInput]\\n  hasThumbnail: Boolean\\n  thumbnailPath: String\\n  postalAddresses: [PostalAddressesInput]\\n  birthday: BirthdayInput\\n  tags: [String]\\n}\\n\\ninput PhoneNumberInput {\\n  label: String\\n  number: String\\n}\\n\\ninput EmailAddressesInput {\\n  label: String\\n  email: String\\n}\\n\\ninput PostalAddressesInput {\\n  street: String\\n  city: String\\n  state: String\\n  region: String\\n  postCode: String\\n  country: String\\n  label: String\\n}\\n\\ninput BirthdayInput {\\n  year: Float\\n  month: Float\\n  day: Float\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.resolvers.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/contacts/API.resolvers.js                                                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nmodule.exportDefault({\n  Query: {\n    contacts(_, {\n      filters,\n      options\n    }, {\n      userId,\n      db\n    }, ast) {\n      console.log(userId);\n      $filters = filters;\n      $options = options;\n      const users = db.contacts.astToQuery(ast, {\n        $filters,\n        $options\n      }).fetch();\n      return users;\n    }\n\n  },\n  Mutation: {\n    contactCreate: (_, {\n      data\n    }, {\n      db\n    }) => {\n      console.log(data);\n      data.createdAt = new Date();\n      const contactId = db.contacts.insert((0, _objectSpread2.default)({}, data));\n      return db.contacts.findOne(contactId);\n    },\n\n    contactUpdate(_, {\n      contactId,\n      data\n    }, {\n      db\n    }) {\n      const contact = db.contacts.createQuery({\n        $filters: {\n          _id: contactId\n        }\n      }).fetchOne();\n\n      if (contact._id === contactId) {\n        return db.contacts.update(contactId, {\n          $set: (0, _objectSpread2.default)({}, data)\n        });\n      } else throw new Meteor.Error(\"no rights to update this contact\");\n    }\n\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/contacts/index.js                                                             //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet APIType;\nmodule.watch(require(\"./API\"), {\n  default(v) {\n    APIType = v;\n  }\n\n}, 0);\nlet APIResolvers;\nmodule.watch(require(\"./API.resolvers\"), {\n  default(v) {\n    APIResolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  typeDefs: [APIType],\n  resolvers: [APIResolvers]\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"recommandations\":{\"API.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/recommandations/API.gql                                                       //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./API.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/recommandations/API.gql.js                                                    //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Query\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandations\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"filters\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"options\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"JSON\"}},\"directives\":[]}],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"}}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Mutation\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationCreate\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RecommandationCreateInput\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationEdit\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RecommandationCreateInput\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationDelete\"},\"arguments\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Subscription\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandations\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"RecommandationEvent\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"RecommandationEvent\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"event\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"doc\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"}},\"directives\":[]}]},{\"kind\":\"InputObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"RecommandationCreateInput\"},\"directives\":[],\"fields\":[{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"tags\"},\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"InputValueDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":525}};\n    doc.loc.source = {\"body\":\"type Query {\\n  recommandations(filters: JSON, options: JSON): [Recommandation]\\n}\\n\\ntype Mutation {\\n  recommandationCreate(data: RecommandationCreateInput): Recommandation\\n  recommandationEdit(recommandationId: String, data: RecommandationCreateInput): Recommandation\\n  recommandationDelete(recommandationId: String): String\\n}\\n\\ntype Subscription {\\n  recommandations: RecommandationEvent\\n}\\n\\ntype RecommandationEvent {\\n  event: String,\\n  doc: Recommandation\\n}\\n\\ninput RecommandationCreateInput {\\n  tags: [String],\\n  text: String\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"API.resolvers.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/recommandations/API.resolvers.js                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nlet asyncIterator;\nmodule.watch(require(\"apollo-live-server\"), {\n  asyncIterator(v) {\n    asyncIterator = v;\n  }\n\n}, 0);\nmodule.exportDefault({\n  Query: {\n    recommandations(_, {\n      filters,\n      options\n    }, {\n      db\n    }, ast) {\n      $filters = filters;\n      $options = options;\n      const recommand = db.recommandations.astToQuery(ast, {\n        $filters,\n        $options\n      }).fetch();\n      return recommand;\n    }\n\n  },\n  Mutation: {\n    recommandationCreate(_, {\n      data\n    }, {\n      db\n    }) {\n      data.createdAt = new Date();\n      const commentIds = db.comments.insert({});\n      const recommandationId = db.recommandations.insert((0, _objectSpread2.default)({\n        commentIds\n      }, data));\n      return db.recommandations.findOne(recommandationId);\n    },\n\n    recommandationEdit(_, {\n      recommandationId,\n      data\n    }, {\n      db\n    }) {\n      db.recommandations.update(recommandationId, {\n        $set: (0, _objectSpread2.default)({}, data)\n      });\n      return db.recommandations.findOne(recommandationId);\n    },\n\n    recommandationDelete(_, {\n      recommandationId\n    }, {\n      db\n    }) {\n      return db.recommandations.remove(recommandationId);\n    }\n\n  },\n  Subscription: {\n    recommandations: {\n      resolve: payload => {\n        return payload;\n      },\n\n      subscribe(_, args, {\n        db\n      }, ast) {\n        const observer = db.recommandations.find();\n        return asyncIterator(observer);\n      }\n\n    }\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/modules/recommandations/index.js                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet APIType;\nmodule.watch(require(\"./API\"), {\n  default(v) {\n    APIType = v;\n  }\n\n}, 0);\nlet APIResolvers;\nmodule.watch(require(\"./API.resolvers\"), {\n  default(v) {\n    APIResolvers = v;\n  }\n\n}, 1);\nmodule.exportDefault({\n  typeDefs: [APIType],\n  resolvers: [APIResolvers]\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"entities\":{\"Comment.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Comment.gql                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./Comment.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Comment.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Comment.gql.js                                                               //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Comment\"},\"interfaces\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"mongo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"comments\",\"block\":false}}]}],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"_id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandationId\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contactId\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"comment\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"contactId\",\"block\":false}}]}]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":175}};\n    doc.loc.source = {\"body\":\"type Comment @mongo(name: \\\"comments\\\") {\\n  _id: String!,\\n  recommandationId: String!,\\n  contactId: String!,\\n  comment: Contact @link(field: \\\"contactId\\\"),\\n  createdAt: String!\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Contact.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Contact.gql                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./Contact.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Contact.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Contact.gql.js                                                               //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"},\"interfaces\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"mongo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"contacts\",\"block\":false}}]}],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"_id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"userId\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"userId\",\"block\":false}}]}]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"emailAddresses\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"EmailAddresses\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"company\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"familyName\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"givenName\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"jobTitle\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"middleName\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"phoneNumbers\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PhoneNumber\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"hasThumbnail\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Boolean\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"thumbnailPath\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"postalAddresses\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"PostalAddresses\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"birthday\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Birthday\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"tags\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"createdAt\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Date\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"PhoneNumber\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"number\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"EmailAddresses\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"email\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"PostalAddresses\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"street\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"city\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"state\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"region\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"postCode\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"country\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"label\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Birthday\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"year\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"month\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"day\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Float\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":747}};\n    doc.loc.source = {\"body\":\"type Contact @mongo(name: \\\"contacts\\\") {\\n  _id: String!,\\n  userId: String,\\n  user: User @link(field: \\\"userId\\\"),\\n  emailAddresses: [EmailAddresses],\\n  company: String,\\n  familyName: String,\\n  givenName: String,\\n  jobTitle: String,\\n  middleName: String,\\n  phoneNumbers: [PhoneNumber],\\n  hasThumbnail: Boolean,\\n  thumbnailPath: String,\\n  postalAddresses: [PostalAddresses],\\n  birthday: Birthday,\\n  tags: [String],\\n  createdAt: Date \\n}\\n\\ntype PhoneNumber {\\n  label: String\\n  number: String\\n}\\n\\ntype EmailAddresses {\\n  label: String\\n  email: String\\n}\\n\\ntype PostalAddresses {\\n  street: String\\n  city: String\\n  state: String\\n  region: String\\n  postCode: String\\n  country: String\\n  label: String\\n}\\n\\ntype Birthday {\\n  year: Float\\n  month: Float\\n  day: Float\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Recommandation.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Recommandation.gql                                                           //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./Recommandation.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Recommandation.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Recommandation.gql.js                                                        //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"},\"interfaces\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"mongo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"recommandations\",\"block\":false}}]}],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"_id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"tags\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"text\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"commentIds\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"userId\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"user\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"userId\",\"block\":false}}]}]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"comments\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Comment\"}}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"field\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"commentIds\",\"block\":false}}]}]}]}],\"loc\":{\"start\":0,\"end\":233}};\n    doc.loc.source = {\"body\":\"type Recommandation @mongo(name: \\\"recommandations\\\") {\\n  _id: String!,\\n  tags: [String],\\n  text: String,\\n  commentIds: [String],\\n  userId: String,\\n  user: User @link(field: \\\"userId\\\"),\\n  comments: [Comment] @link(field: \\\"commentIds\\\")\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"User.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/User.gql                                                                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./User.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"User.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/User.gql.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"User\"},\"interfaces\":[],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"mongo\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"users\",\"block\":false}}]}],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"_id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"profile\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"UserProfile\"}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"contacts\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Contact\"}}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"to\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"user\",\"block\":false}}]}]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"recommandations\"},\"arguments\":[],\"type\":{\"kind\":\"ListType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Recommandation\"}}},\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"link\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"to\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"user\",\"block\":false}}]}]}]},{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"UserProfile\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":222}};\n    doc.loc.source = {\"body\":\"type User @mongo(name: \\\"users\\\") {\\n  _id: String!\\n  username: String\\n  profile: UserProfile\\n  contacts: [Contact] @link(to: \\\"user\\\")\\n  recommandations: [Recommandation] @link(to: \\\"user\\\")\\n}\\n\\ntype UserProfile {\\n name: String\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Userx.gql\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Userx.gql                                                                    //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./Userx.gql.js\"), {\n  \"*\": module.makeNsSetter(true)\n});\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Userx.gql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/Userx.gql.js                                                                 //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"ObjectTypeDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"Userx\"},\"interfaces\":[],\"directives\":[],\"fields\":[{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"ID\"}}},\"directives\":[]},{\"kind\":\"FieldDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}]}],\"loc\":{\"start\":0,\"end\":43}};\n    doc.loc.source = {\"body\":\"type Userx {\\n    id: ID!\\n    name: String\\n}\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n      module.exports = doc;\n    \n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/entities/index.js                                                                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet ContactType;\nmodule.watch(require(\"./Contact\"), {\n  default(v) {\n    ContactType = v;\n  }\n\n}, 0);\nlet RecommandationType;\nmodule.watch(require(\"./Recommandation\"), {\n  default(v) {\n    RecommandationType = v;\n  }\n\n}, 1);\nlet CommentType;\nmodule.watch(require(\"./Comment\"), {\n  default(v) {\n    CommentType = v;\n  }\n\n}, 2);\nlet UserType;\nmodule.watch(require(\"./User\"), {\n  default(v) {\n    UserType = v;\n  }\n\n}, 3);\nlet UserxType;\nmodule.watch(require(\"./Userx\"), {\n  default(v) {\n    UserxType = v;\n  }\n\n}, 4);\nmodule.exportDefault({\n  typeDefs: [ContactType, RecommandationType, CommentType, UserType, UserxType]\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"load.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/api/load.js                                                                               //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet load;\nmodule.watch(require(\"graphql-load\"), {\n  load(v) {\n    load = v;\n  }\n\n}, 0);\nlet Entities;\nmodule.watch(require(\"./entities\"), {\n  default(v) {\n    Entities = v;\n  }\n\n}, 1);\nlet ContactsModule;\nmodule.watch(require(\"./modules/contacts\"), {\n  default(v) {\n    ContactsModule = v;\n  }\n\n}, 2);\nlet RecomandationsModule;\nmodule.watch(require(\"./modules/recommandations\"), {\n  default(v) {\n    RecomandationsModule = v;\n  }\n\n}, 3);\nlet CommentsModule;\nmodule.watch(require(\"./modules/comments\"), {\n  default(v) {\n    CommentsModule = v;\n  }\n\n}, 4);\nload([Entities]);\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"db\":{\"contacts\":{\"collection.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/db/contacts/collection.js                                                                 //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet ContactsSchema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    ContactsSchema = v;\n  }\n\n}, 1);\nlet Contacts = new Mongo.Collection(\"contacts\");\nContacts.attachSchema(ContactsSchema);\nmodule.exportDefault(Contacts);\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/db/contacts/schema.js                                                                     //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nmodule.exportDefault(new SimpleSchema({\n  _id: String,\n  emailAddresses: {\n    type: Array,\n    defaultValue: []\n  },\n  'emailAddresses.$': {\n    type: Object,\n    blackbox: true\n  },\n  company: String,\n  familyName: String,\n  givenName: String,\n  jobTitle: String,\n  middleName: String,\n  phoneNumbers: {\n    type: Array,\n    defaultValue: []\n  },\n  'phoneNumbers.$': {\n    type: Object,\n    blackbox: true\n  },\n  hasThumbnail: Boolean,\n  thumbnailPath: String,\n  postalAddresses: {\n    type: Array,\n    defaultValue: []\n  },\n  'postalAddresses.$': {\n    type: Object,\n    blackbox: true\n  },\n  birthday: {\n    type: Object,\n    blackbox: true\n  },\n  tags: {\n    type: Array,\n    defaultValue: []\n  },\n  'tags.$': {\n    type: String,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  }\n}, {\n  requiredByDefault: false\n}));\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"recommandations\":{\"collection.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/db/recommandations/collection.js                                                          //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet RecommandationSchema;\nmodule.watch(require(\"./schema\"), {\n  default(v) {\n    RecommandationSchema = v;\n  }\n\n}, 1);\nlet Recommandations = new Mongo.Collection(\"recommandations\");\nRecommandations.attachSchema(RecommandationSchema);\nmodule.exportDefault(Recommandations);\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/db/recommandations/schema.js                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet SimpleSchema;\nmodule.watch(require(\"simpl-schema\"), {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nmodule.exportDefault(new SimpleSchema({\n  _id: String,\n  tags: {\n    type: Array,\n    defaultValue: []\n  },\n  'tags.$': {\n    type: String,\n    blackbox: true\n  },\n  text: String,\n  commentIds: {\n    type: Array\n  },\n  'commentIds.$': {\n    type: String,\n    blackbox: true\n  },\n  createdAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      }\n    }\n  }\n}, {\n  requiredByDefault: false\n}));\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/db/index.js                                                                               //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"./contacts/collection\"));\nmodule.watch(require(\"./recommandations/collection\"));\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"startup\":{\"server\":{\"graphql.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/startup/server/graphql.js                                                                 //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"../../api/load\"));\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// imports/startup/server/index.js                                                                   //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nlet initialize;\nmodule.watch(require(\"meteor/cultofcoders:apollo\"), {\n  initialize(v) {\n    initialize = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./graphql\"));\nmodule.watch(require(\"../../db\"));\ninitialize();\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// server/main.js                                                                                    //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nmodule.watch(require(\"../imports/startup/server\"));\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".gql\"\n  ]\n});\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/modules/comments/API.resolvers.js","imports/api/modules/comments/index.js","imports/api/modules/contacts/API.resolvers.js","imports/api/modules/contacts/index.js","imports/api/modules/recommandations/API.resolvers.js","imports/api/modules/recommandations/index.js","imports/api/entities/index.js","imports/api/load.js","imports/db/contacts/collection.js","imports/db/contacts/schema.js","imports/db/recommandations/collection.js","imports/db/recommandations/schema.js","imports/db/index.js","imports/startup/server/graphql.js","imports/startup/server/index.js","server/main.js"],"names":["module","exportDefault","Mutation","commentRecomandationCreate","_","recommandationId","contactId","db","commentIds","recommandations","findOne","console","log","comments","update","$set","APIType","watch","require","default","v","APIResolvers","typeDefs","resolvers","Query","contacts","filters","options","userId","ast","$filters","$options","users","astToQuery","fetch","contactCreate","data","createdAt","Date","insert","contactUpdate","contact","createQuery","_id","fetchOne","Meteor","Error","asyncIterator","recommand","recommandationCreate","recommandationEdit","recommandationDelete","remove","Subscription","resolve","payload","subscribe","args","observer","find","ContactType","RecommandationType","CommentType","UserType","UserxType","load","Entities","ContactsModule","RecomandationsModule","CommentsModule","Mongo","ContactsSchema","Contacts","Collection","attachSchema","SimpleSchema","String","emailAddresses","type","Array","defaultValue","Object","blackbox","company","familyName","givenName","jobTitle","middleName","phoneNumbers","hasThumbnail","Boolean","thumbnailPath","postalAddresses","birthday","tags","autoValue","isInsert","requiredByDefault","RecommandationSchema","Recommandations","text","initialize"],"mappings":"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","file":"/app.js","sourcesContent":["export default {\n    Mutation: {\n        commentRecomandationCreate(_, { recommandationId, contactId }, { db }) {\n            // const recommandationComment = db.comments.findOne({ contactId, recommandationId })\n            // if (recommandationComment) {\n            //     throw new Meteor.Error('Comment is already in database')\n            // }\n            \n            const { commentIds } = db.recommandations.findOne(recommandationId);\n            console.log(commentIds[0])\n            return db.comments.update( commentIds[0], {\n                    $set: {\n                        recommandationId,\n                        contactId\n                    }\n                });\n\n        },\n\n        // commentRecomandationDelete(_, { optionId }, { db }){\n        //     return db.decisionOptions.remove(optionId);\n        // },\n\n        // commentRecomandationUpdate(_, { optionId, data }, { db }){\n        //     return db.decisionOptions.update( optionId ,{\n        //         $set: {...data}\n        //     });\n        // },\n    }\n}","import APIType from './API';\nimport APIResolvers from './API.resolvers';\n\nexport default {\n    typeDefs: [APIType],\n    resolvers: [APIResolvers]\n}","export default {\n    Query: {\n        contacts(_, { filters, options }, { userId, db }, ast) {\n            console.log(userId)\n            $filters = filters\n            $options = options\n            const users = db.contacts.astToQuery(ast, {\n                $filters,\n                $options\n            }).fetch()\n            return users\n        }\n\n    },\n    Mutation: {\n        contactCreate: (_, {data}, {db}) => {\n            console.log(data)\n            data.createdAt = new Date();\n            const contactId = db.contacts.insert({\n                ...data\n            });\n            return db.contacts.findOne(contactId);\n        },\n\n        contactUpdate(_, { contactId, data }, { db }){\n            const contact = db.contacts.createQuery({\n                $filters: {_id: contactId},\n            }).fetchOne();\n\n            if(contact._id === contactId){\n                return db.contacts.update(contactId, {\n                    $set: {...data}\n                });\n            }\n            else\n                throw new Meteor.Error(\"no rights to update this contact\");\n        },\n    }\n}","import APIType from './API';\nimport APIResolvers from './API.resolvers';\n\nexport default {\n    typeDefs: [APIType],\n    resolvers: [APIResolvers]\n}","import { asyncIterator } from \"apollo-live-server\";\n\nexport default {\n  Query: {\n    recommandations(_, { filters, options }, { db }, ast) {\n      $filters = filters\n      $options = options\n      const recommand = db.recommandations\n        .astToQuery(ast, {\n          $filters,\n          $options\n        })\n        .fetch();\n      return recommand;\n    }\n  },\n  Mutation: {\n    recommandationCreate(_, { data }, { db }) {\n      data.createdAt = new Date();\n      const commentIds = db.comments.insert({});\n      const recommandationId = db.recommandations.insert({\n        commentIds,\n        ...data\n      });\n      return db.recommandations.findOne(recommandationId);\n    },\n    recommandationEdit(_, {recommandationId, data }, { db }) {\n      db.recommandations.update(recommandationId, {\n        $set: {...data}\n      });\n      return db.recommandations.findOne(recommandationId)\n    },\n    recommandationDelete(_, { recommandationId }, { db }) {\n      return db.recommandations.remove(recommandationId);\n    }\n  },\n  Subscription: {\n    recommandations: {\n      resolve: payload => {\n        return payload;\n      },\n      subscribe(_, args, { db }, ast) {\n        const observer = db.recommandations.find();\n        return asyncIterator(observer);\n      }\n    }\n  }\n};\n","import APIType from './API';\nimport APIResolvers from './API.resolvers';\n\nexport default {\n    typeDefs: [APIType],\n    resolvers: [APIResolvers]\n}","import ContactType from './Contact';\nimport RecommandationType from './Recommandation';\nimport CommentType from './Comment'\nimport UserType from './User'\nimport UserxType from './Userx'\n\nexport default {\n    typeDefs: [ContactType, RecommandationType, CommentType, UserType, UserxType ]\n}","import { load } from 'graphql-load';\nimport Entities from './entities';\nimport ContactsModule from './modules/contacts';\nimport RecomandationsModule from './modules/recommandations'\nimport CommentsModule from './modules/comments';\n\nload([\n    Entities\n]);","import { Mongo } from 'meteor/mongo';\nimport ContactsSchema from './schema';\n\nlet Contacts = new Mongo.Collection(\"contacts\");\n\nContacts.attachSchema(ContactsSchema);\n\nexport default Contacts;","import SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: String,\n    emailAddresses: {\n        type: Array,\n        defaultValue: []\n    },\n    'emailAddresses.$': {\n        type: Object,\n        blackbox: true\n    },\n    company: String,\n    familyName: String,\n    givenName: String,\n    jobTitle: String,\n    middleName: String,\n    phoneNumbers: {\n        type: Array,\n        defaultValue: []\n    },\n    'phoneNumbers.$': {\n        type: Object,\n        blackbox: true\n    },\n    hasThumbnail: Boolean,\n    thumbnailPath: String,\n    postalAddresses: {\n        type: Array,\n        defaultValue: []\n    },\n    'postalAddresses.$': {\n        type: Object,\n        blackbox: true\n    },\n    birthday: {\n        type: Object,\n        blackbox: true\n    },\n    tags: {\n        type: Array,\n        defaultValue: []\n    },\n    'tags.$': {\n        type: String,\n        blackbox: true\n    },\n    createdAt: {\n        type: Date,\n        autoValue: function() {\n            if ( this.isInsert ) {\n                return new Date;\n            }\n        }\n    }\n}, { requiredByDefault: false });","import { Mongo } from 'meteor/mongo';\nimport RecommandationSchema from './schema';\n\nlet Recommandations = new Mongo.Collection(\"recommandations\");\n\nRecommandations.attachSchema(RecommandationSchema);\n\nexport default Recommandations;","import SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: String,\n    tags: {\n        type: Array,\n        defaultValue: []\n    },\n    'tags.$': {\n        type: String,\n        blackbox: true\n    },\n    text: String,\n    commentIds: {\n        type: Array\n    },\n    'commentIds.$': {\n        type: String,\n        blackbox: true\n    },\n    createdAt: {\n        type: Date,\n        autoValue: function() {\n            if ( this.isInsert ) {\n                return new Date;\n            }\n        }\n    }\n}, { requiredByDefault: false });","\nimport './contacts/collection';\n// import './contacts/reducers';\nimport './recommandations/collection'","import '../../api/load';","import { initialize } from 'meteor/cultofcoders:apollo';\n\nimport './graphql';\nimport '../../db';\n\ninitialize();","import '../imports/startup/server';"]}}]