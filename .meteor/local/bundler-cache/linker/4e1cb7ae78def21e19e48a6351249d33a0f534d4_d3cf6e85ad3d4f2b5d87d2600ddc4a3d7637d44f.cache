[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar wsLink;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:apollo\":{\"client\":{\"index.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/index.js                                                            //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  initialize: () => initialize,\n  Config: () => Config,\n  meteorAccountsLink: () => meteorAccountsLink\n});\nlet ApolloClient;\nmodule.link(\"apollo-client\", {\n  default(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet WebSocketLink;\nmodule.link(\"apollo-link-ws\", {\n  WebSocketLink(v) {\n    WebSocketLink = v;\n  }\n\n}, 1);\nlet HttpLink;\nmodule.link(\"apollo-link-http\", {\n  HttpLink(v) {\n    HttpLink = v;\n  }\n\n}, 2);\nlet ApolloLink;\nmodule.link(\"apollo-link\", {\n  default(v) {\n    ApolloLink = v;\n  }\n\n}, 3);\nlet InMemoryCache;\nmodule.link(\"apollo-cache-inmemory\", {\n  InMemoryCache(v) {\n    InMemoryCache = v;\n  }\n\n}, 4);\nlet getMainDefinition;\nmodule.link(\"apollo-utilities\", {\n  getMainDefinition(v) {\n    getMainDefinition = v;\n  }\n\n}, 5);\nlet meteorAccountsLink;\nmodule.link(\"./meteorAccountsLink\", {\n  meteorAccountsLink(v) {\n    meteorAccountsLink = v;\n  }\n\n}, 6);\nlet createUploadLink;\nmodule.link(\"apollo-upload-client\", {\n  createUploadLink(v) {\n    createUploadLink = v;\n  }\n\n}, 7);\nlet Config;\nmodule.link(\"./config\", {\n  default(v) {\n    Config = v;\n  }\n\n}, 8);\nlet checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 9);\nlet GRAPHQL_SUBSCRIPTION_ENDPOINT, GRAPHQL_ENDPOINT, AUTH_TOKEN_KEY;\nmodule.link(\"../constants\", {\n  GRAPHQL_SUBSCRIPTION_ENDPOINT(v) {\n    GRAPHQL_SUBSCRIPTION_ENDPOINT = v;\n  },\n\n  GRAPHQL_ENDPOINT(v) {\n    GRAPHQL_ENDPOINT = v;\n  },\n\n  AUTH_TOKEN_KEY(v) {\n    AUTH_TOKEN_KEY = v;\n  }\n\n}, 10);\ncheckNpmVersions({\n  'subscriptions-transport-ws': '0.9.x',\n  'apollo-upload-client': 'x.x.x',\n  'apollo-client': '2.x.x',\n  'apollo-cache-inmemory': '1.x.x',\n  'apollo-link': '1.x.x',\n  'apollo-link-http': '1.x.x',\n  'apollo-link-ws': '1.x.x' // 'apollo-live-client': '0.2.x',\n  // 'apollo-morpher': '0.2.x',\n\n});\n\nfunction initialize() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Object.assign(Config, config);\n  Object.freeze(Config);\n  const uploadLink = createUploadLink();\n  let terminatingLink; // We define the HTTP Link\n\n  const httpLink = new HttpLink((0, _objectSpread2.default)({\n    uri: GRAPHQL_ENDPOINT\n  }, config.httpLinkOptions || {}));\n\n  if (meteorAccountsLink) {\n    terminatingLink = ApolloLink.concat(meteorAccountsLink, uploadLink, httpLink);\n  } else {\n    terminatingLink = ApolloLink.concat(uploadLink, httpLink);\n  } // A chance to add change the links\n\n\n  terminatingLink = Config.getLink(terminatingLink);\n\n  if (!config.disableWebsockets) {\n    wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTION_ENDPOINT,\n      options: {\n        reconnect: true,\n        connectionParams: () => ({\n          [AUTH_TOKEN_KEY]: localStorage.getItem('Meteor.loginToken')\n        })\n      }\n    }); // If it's subscription it goes through wsLink otherwise through terminatingLink\n\n    terminatingLink = ApolloLink.split((_ref) => {\n      let {\n        query\n      } = _ref;\n      const {\n        kind,\n        operation\n      } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    }, wsLink, terminatingLink);\n  }\n\n  const client = new ApolloClient({\n    link: terminatingLink,\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object._id || null\n    }).restore(window.__APOLLO_STATE__ || {})\n  });\n  return {\n    client\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"config.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/config.js                                                           //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.exportDefault({\n  disableWebsockets: false,\n  getLink: link => link,\n  httpLinkOptions: {}\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"meteorAccountsLink.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/client/meteorAccountsLink.js                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.export({\n  meteorAccountsLink: () => meteorAccountsLink\n});\nlet ApolloClient;\nmodule.link(\"apollo-client\", {\n  ApolloClient(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet ApolloLink;\nmodule.link(\"apollo-link\", {\n  ApolloLink(v) {\n    ApolloLink = v;\n  }\n\n}, 1);\nlet meteorAccountsLink; // We have a weak dependency on this package, and if we import it without it being added, it will crash\n\nif (Package['accounts-base']) {\n  let Accounts;\n  module.link(\"meteor/accounts-base\", {\n    Accounts(v) {\n      Accounts = v;\n    }\n\n  }, 2);\n  module.runSetters(meteorAccountsLink = new ApolloLink((operation, forward) => {\n    const token = Accounts._storedLoginToken();\n\n    operation.setContext(() => ({\n      headers: {\n        'meteor-login-token': token\n      }\n    }));\n    return forward(operation);\n  }));\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"constants.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/cultofcoders_apollo/constants.js                                                               //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nmodule.export({\n  AUTH_TOKEN_KEY: () => AUTH_TOKEN_KEY,\n  AUTH_TOKEN_LOCALSTORAGE: () => AUTH_TOKEN_LOCALSTORAGE,\n  GRAPHQL_SUBSCRIPTION_PATH: () => GRAPHQL_SUBSCRIPTION_PATH,\n  GRAPHQL_SUBSCRIPTION_ENDPOINT: () => GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT: () => GRAPHQL_ENDPOINT\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nconst AUTH_TOKEN_KEY = 'meteor-login-token';\nconst AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\nconst GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nconst GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(GRAPHQL_SUBSCRIPTION_PATH).replace(/http/, 'ws');\nconst GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/cultofcoders:apollo/client/index.js\");\n\n/* Exports */\nPackage._define(\"cultofcoders:apollo\", exports);\n\n})();\n","servePath":"/packages/cultofcoders_apollo.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:apollo/client/index.js","packages/cultofcoders:apollo/client/config.js","packages/cultofcoders:apollo/client/meteorAccountsLink.js","packages/cultofcoders:apollo/constants.js"],"names":["module","export","initialize","Config","meteorAccountsLink","ApolloClient","link","default","v","WebSocketLink","HttpLink","ApolloLink","InMemoryCache","getMainDefinition","createUploadLink","checkNpmVersions","GRAPHQL_SUBSCRIPTION_ENDPOINT","GRAPHQL_ENDPOINT","AUTH_TOKEN_KEY","config","Object","assign","freeze","uploadLink","terminatingLink","httpLink","uri","httpLinkOptions","concat","getLink","disableWebsockets","wsLink","options","reconnect","connectionParams","localStorage","getItem","split","query","kind","operation","client","cache","dataIdFromObject","object","_id","restore","window","__APOLLO_STATE__","exportDefault","Package","Accounts","forward","token","_storedLoginToken","setContext","headers","AUTH_TOKEN_LOCALSTORAGE","GRAPHQL_SUBSCRIPTION_PATH","Meteor","absoluteUrl","replace"],"mappings":"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","file":"/packages/cultofcoders_apollo.js","sourcesContent":["import ApolloClient from 'apollo-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { HttpLink } from 'apollo-link-http';\nimport ApolloLink from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { meteorAccountsLink } from './meteorAccountsLink';\nimport { createUploadLink } from 'apollo-upload-client';\nimport Config from './config';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({\n  'subscriptions-transport-ws': '0.9.x',\n  'apollo-upload-client': 'x.x.x',\n  'apollo-client': '2.x.x',\n  'apollo-cache-inmemory': '1.x.x',\n  'apollo-link': '1.x.x',\n  'apollo-link-http': '1.x.x',\n  'apollo-link-ws': '1.x.x',\n  // 'apollo-live-client': '0.2.x',\n  // 'apollo-morpher': '0.2.x',\n});\n\nimport {\n  GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT,\n  AUTH_TOKEN_KEY,\n} from '../constants';\n\nexport function initialize(config = {}) {\n  Object.assign(Config, config);\n  Object.freeze(Config);\n\n  const uploadLink = createUploadLink();\n\n  let terminatingLink;\n\n  // We define the HTTP Link\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_ENDPOINT,\n    ...(config.httpLinkOptions || {}),\n  });\n\n  if (meteorAccountsLink) {\n    terminatingLink = ApolloLink.concat(meteorAccountsLink, uploadLink, httpLink);\n  } else {\n    terminatingLink = ApolloLink.concat(uploadLink, httpLink);\n  }\n\n  // A chance to add change the links\n  terminatingLink = Config.getLink(terminatingLink);\n\n  if (!config.disableWebsockets) {\n    wsLink = new WebSocketLink({\n      uri: GRAPHQL_SUBSCRIPTION_ENDPOINT,\n      options: {\n        reconnect: true,\n        connectionParams: () => ({\n          [AUTH_TOKEN_KEY]: localStorage.getItem('Meteor.loginToken'),\n        }),\n      },\n    });\n\n    // If it's subscription it goes through wsLink otherwise through terminatingLink\n    terminatingLink = ApolloLink.split(\n      ({ query }) => {\n        const { kind, operation } = getMainDefinition(query);\n        return kind === 'OperationDefinition' && operation === 'subscription';\n      },\n      wsLink,\n      terminatingLink\n    );\n  }\n\n  const client = new ApolloClient({\n    link: terminatingLink,\n    cache: new InMemoryCache({\n      dataIdFromObject: object => object._id || null,\n    }).restore(window.__APOLLO_STATE__ || {}),\n  });\n\n  return {\n    client,\n  };\n}\n\nexport { Config, meteorAccountsLink };\n","export default {\n  disableWebsockets: false,\n  getLink: link => link,\n  httpLinkOptions: {},\n};\n","import { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\n\nlet meteorAccountsLink;\n\n// We have a weak dependency on this package, and if we import it without it being added, it will crash\nif (Package['accounts-base']) {\n  import { Accounts } from 'meteor/accounts-base';\n  \n  meteorAccountsLink = new ApolloLink((operation, forward) => {\n    const token = Accounts._storedLoginToken();\n  \n    operation.setContext(() => ({\n      headers: {\n        'meteor-login-token': token,\n      },\n    }));\n  \n    return forward(operation);\n  });\n}\n\nexport {\n  meteorAccountsLink\n}\n","import { Meteor } from 'meteor/meteor';\n\nexport const AUTH_TOKEN_KEY = 'meteor-login-token';\nexport const AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\n\nexport const GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nexport const GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(\n  GRAPHQL_SUBSCRIPTION_PATH\n).replace(/http/, 'ws');\n\nexport const GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n"]}}]