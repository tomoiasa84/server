[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:grapher-schema-directives\":{\"index.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cultofcoders_grapher-schema-directives/index.js                                             //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({\n  directives: () => directives,\n  directiveDefinitions: () => directiveDefinitions,\n  LinkDirective: () => LinkDirective,\n  MapToDirective: () => MapToDirective,\n  MongoDirective: () => MongoDirective\n});\nlet directiveDefinitions;\nmodule.link(\"./directiveDefinitions\", {\n  default(v) {\n    directiveDefinitions = v;\n  }\n\n}, 0);\nlet LinkDirective;\nmodule.link(\"./LinkDirective\", {\n  default(v) {\n    LinkDirective = v;\n  }\n\n}, 1);\nlet MapToDirective;\nmodule.link(\"./MapToDirective\", {\n  default(v) {\n    MapToDirective = v;\n  }\n\n}, 2);\nlet MongoDirective;\nmodule.link(\"./MongoDirective\", {\n  default(v) {\n    MongoDirective = v;\n  }\n\n}, 3);\nconst directives = {\n  mongo: MongoDirective,\n  link: LinkDirective,\n  map: MapToDirective\n};\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"LinkDirective.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cultofcoders_grapher-schema-directives/LinkDirective.js                                     //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  default: () => LinkDirective\n});\nlet SchemaDirectiveVisitor;\nmodule.link(\"graphql-tools\", {\n  SchemaDirectiveVisitor(v) {\n    SchemaDirectiveVisitor = v;\n  }\n\n}, 0);\nlet GraphQLList, GraphQLObjectType, GraphQLNonNull;\nmodule.link(\"graphql/type\", {\n  GraphQLList(v) {\n    GraphQLList = v;\n  },\n\n  GraphQLObjectType(v) {\n    GraphQLObjectType = v;\n  },\n\n  GraphQLNonNull(v) {\n    GraphQLNonNull = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet setupMongoDirective;\nmodule.link(\"./MongoDirective\", {\n  setupMongoDirective(v) {\n    setupMongoDirective = v;\n  }\n\n}, 3);\n\nclass LinkDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const {\n      objectType\n    } = details;\n    const {\n      args\n    } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error('collection-not-found', `You are trying to set the link: ${field.name} but your object type does not have @mongo directive set-up`);\n    }\n\n    const isArrayField = field.type instanceof GraphQLList;\n    let referencedType;\n\n    if (isArrayField) {\n      referencedType = field.type.ofType;\n    } else {\n      referencedType = field.type;\n    }\n\n    if (referencedType instanceof GraphQLNonNull) {\n      referencedType = referencedType.ofType;\n    } else {\n      if (!(referencedType instanceof GraphQLObjectType)) {\n        throw new Meteor.Error('invalid-type', `You are trying to attach a link on a invalid type. @link directive only works with GraphQLObjectType `);\n      }\n    }\n\n    let referencedCollectionName = referencedType._mongoCollectionName;\n\n    if (!referencedCollectionName) {\n      const objectNodeDirectives = referencedType.astNode.directives;\n      const mongoDirective = objectNodeDirectives.find(directive => {\n        return directive.name.value === 'mongo';\n      });\n\n      if (mongoDirective) {\n        const nameArgument = mongoDirective.arguments.find(argument => argument.name.value === 'name');\n        setupMongoDirective(referencedType, {\n          name: nameArgument.value.value\n        });\n        referencedCollectionName = nameArgument.value.value;\n      } else {\n        throw new Meteor.Error('invalid-collection', `The referenced type does not have a collection setup using @mongo directive`);\n      }\n    }\n\n    const thisCollectionName = objectType._mongoCollectionName;\n    const referencedCollection = Mongo.Collection.get(referencedCollectionName);\n    const thisCollection = Mongo.Collection.get(thisCollectionName);\n    let config = {};\n\n    if (args.to) {\n      config = Object.assign({}, args);\n      config.inversedBy = args.to;\n      delete config.to;\n    } else {\n      if (args.field) {\n        config = Object.assign({\n          type: isArrayField ? 'many' : 'one',\n          field: args.field,\n          index: true\n        }, args);\n      } else {\n        throw new Meteor.Error(`invalid-args`, `You have provided invalid arguments for this link in ${thisCollectionName}. The \"field\" property is missing.`);\n      }\n    }\n\n    thisCollection.addLinks({\n      [field.name]: (0, _objectSpread2.default)({\n        collection: referencedCollection\n      }, config)\n    });\n  }\n\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MapToDirective.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cultofcoders_grapher-schema-directives/MapToDirective.js                                    //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({\n  default: () => MapToDirective\n});\nlet SchemaDirectiveVisitor;\nmodule.link(\"graphql-tools\", {\n  SchemaDirectiveVisitor(v) {\n    SchemaDirectiveVisitor = v;\n  }\n\n}, 0);\nlet GraphQLScalarType, GraphQLObjectType;\nmodule.link(\"graphql/type\", {\n  GraphQLScalarType(v) {\n    GraphQLScalarType = v;\n  },\n\n  GraphQLObjectType(v) {\n    GraphQLObjectType = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\n\nfunction resolve(path, obj) {\n  return path.split('.').reduce(function (prev, curr) {\n    return prev ? prev[curr] : undefined;\n  }, obj || self);\n}\n\nclass MapToDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const {\n      objectType\n    } = details;\n    const {\n      args\n    } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error('collection-not-found', `You are trying to set mapTo: ${field.name} but your object type does not have @mongo directive set-up`);\n    }\n\n    const isScalar = field.type instanceof GraphQLScalarType;\n\n    if (!isScalar) {\n      throw new Meteor.Error('collection-not-found', `You are trying to set the mapTo directive on a non-scalar on field ${field.name}`);\n    }\n\n    const collection = Mongo.Collection.get(objectType._mongoCollectionName);\n    collection.addReducers({\n      [field.name]: {\n        body: {\n          [args.to]: 1\n        },\n\n        reduce(obj) {\n          return resolve(args.to, obj);\n        }\n\n      }\n    });\n  }\n\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"MongoDirective.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cultofcoders_grapher-schema-directives/MongoDirective.js                                    //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.export({\n  default: () => MongoDirective,\n  setupMongoDirective: () => setupMongoDirective\n});\nlet SchemaDirectiveVisitor;\nmodule.link(\"graphql-tools\", {\n  SchemaDirectiveVisitor(v) {\n    SchemaDirectiveVisitor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\n\nclass MongoDirective extends SchemaDirectiveVisitor {\n  /**\n   * @param {GraphQLObjectType} type\n   */\n  visitObject(type) {\n    if (type._mongoCollectionName) {\n      // it has already been setup by a link directive somewhere\n      return;\n    }\n\n    setupMongoDirective(type, this.args);\n  }\n\n  visitFieldDefinition() {}\n\n}\n\nfunction setupMongoDirective(type, args) {\n  const {\n    name\n  } = args;\n  type._mongoCollectionName = name;\n  let collection = Mongo.Collection.get(name);\n\n  if (!collection) {\n    collection = new Mongo.Collection(name);\n  }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"directiveDefinitions.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cultofcoders_grapher-schema-directives/directiveDefinitions.js                              //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\nmodule.exportDefault(`\n  directive @mongo(\n    name: String!\n  ) on OBJECT | FIELD_DEFINITION\n\n  directive @link(\n    field: String\n    to: String\n    metadata: Boolean\n    unique: Boolean\n    autoremove: Boolean\n  ) on FIELD_DEFINITION\n\n  directive @map(\n    to: String\n  ) on FIELD_DEFINITION\n`);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/cultofcoders:grapher-schema-directives/index.js\");\n\n/* Exports */\nPackage._define(\"cultofcoders:grapher-schema-directives\", exports);\n\n})();\n","servePath":"/packages/cultofcoders_grapher-schema-directives.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:grapher-schema-directives/index.js","packages/cultofcoders:grapher-schema-directives/LinkDirective.js","packages/cultofcoders:grapher-schema-directives/MapToDirective.js","packages/cultofcoders:grapher-schema-directives/MongoDirective.js","packages/cultofcoders:grapher-schema-directives/directiveDefinitions.js"],"names":["module","export","directives","directiveDefinitions","LinkDirective","MapToDirective","MongoDirective","link","default","v","mongo","map","SchemaDirectiveVisitor","GraphQLList","GraphQLObjectType","GraphQLNonNull","Mongo","setupMongoDirective","visitFieldDefinition","field","details","objectType","args","_mongoCollectionName","Meteor","Error","name","isArrayField","type","referencedType","ofType","referencedCollectionName","objectNodeDirectives","astNode","mongoDirective","find","directive","value","nameArgument","arguments","argument","thisCollectionName","referencedCollection","Collection","get","thisCollection","config","to","Object","assign","inversedBy","index","addLinks","collection","GraphQLScalarType","resolve","path","obj","split","reduce","prev","curr","undefined","self","isScalar","addReducers","body","visitObject","exportDefault"],"mappings":"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","file":"/packages/cultofcoders_grapher-schema-directives.js","sourcesContent":["import directiveDefinitions from './directiveDefinitions';\nimport LinkDirective from './LinkDirective';\nimport MapToDirective from './MapToDirective';\nimport MongoDirective from './MongoDirective';\n\nconst directives = {\n  mongo: MongoDirective,\n  link: LinkDirective,\n  map: MapToDirective,\n};\n\nexport {\n  directives,\n  directiveDefinitions,\n  LinkDirective,\n  MapToDirective,\n  MongoDirective,\n};\n","import { SchemaDirectiveVisitor } from 'graphql-tools';\nimport { GraphQLList, GraphQLObjectType, GraphQLNonNull } from 'graphql/type';\nimport { Mongo } from 'meteor/mongo';\nimport { setupMongoDirective } from './MongoDirective';\n\nexport default class LinkDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const { objectType } = details;\n    const { args } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error(\n        'collection-not-found',\n        `You are trying to set the link: ${\n          field.name\n        } but your object type does not have @mongo directive set-up`\n      );\n    }\n\n    const isArrayField = field.type instanceof GraphQLList;\n    let referencedType;\n\n    if (isArrayField) {\n      referencedType = field.type.ofType;\n    } else {\n      referencedType = field.type;\n    }\n\n    if (referencedType instanceof GraphQLNonNull) {\n      referencedType = referencedType.ofType;\n    } else {\n      if (!(referencedType instanceof GraphQLObjectType)) {\n        throw new Meteor.Error(\n          'invalid-type',\n          `You are trying to attach a link on a invalid type. @link directive only works with GraphQLObjectType `\n        );\n      }\n    }\n\n    let referencedCollectionName = referencedType._mongoCollectionName;\n    if (!referencedCollectionName) {\n      const objectNodeDirectives = referencedType.astNode.directives;\n      const mongoDirective = objectNodeDirectives.find(directive => {\n        return directive.name.value === 'mongo';\n      });\n\n      if (mongoDirective) {\n        const nameArgument = mongoDirective.arguments.find(\n          argument => argument.name.value === 'name'\n        );\n\n        setupMongoDirective(referencedType, {\n          name: nameArgument.value.value,\n        });\n\n        referencedCollectionName = nameArgument.value.value;\n      } else {\n        throw new Meteor.Error(\n          'invalid-collection',\n          `The referenced type does not have a collection setup using @mongo directive`\n        );\n      }\n    }\n\n    const thisCollectionName = objectType._mongoCollectionName;\n\n    const referencedCollection = Mongo.Collection.get(referencedCollectionName);\n    const thisCollection = Mongo.Collection.get(thisCollectionName);\n\n    let config = {};\n    if (args.to) {\n      config = Object.assign({}, args);\n      config.inversedBy = args.to;\n      delete config.to;\n    } else {\n      if (args.field) {\n        config = Object.assign(\n          {\n            type: isArrayField ? 'many' : 'one',\n            field: args.field,\n            index: true,\n          },\n          args\n        );\n      } else {\n        throw new Meteor.Error(\n          `invalid-args`,\n          `You have provided invalid arguments for this link in ${thisCollectionName}. The \"field\" property is missing.`\n        );\n      }\n    }\n\n    thisCollection.addLinks({\n      [field.name]: {\n        collection: referencedCollection,\n        ...config,\n      },\n    });\n  }\n}\n","import { SchemaDirectiveVisitor } from 'graphql-tools';\nimport { GraphQLScalarType, GraphQLObjectType } from 'graphql/type';\nimport { Mongo } from 'meteor/mongo';\n\nfunction resolve(path, obj) {\n  return path.split('.').reduce(function(prev, curr) {\n    return prev ? prev[curr] : undefined;\n  }, obj || self);\n}\nexport default class MapToDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field, details) {\n    const { objectType } = details;\n    const { args } = this;\n\n    if (!objectType._mongoCollectionName) {\n      throw new Meteor.Error(\n        'collection-not-found',\n        `You are trying to set mapTo: ${\n          field.name\n        } but your object type does not have @mongo directive set-up`\n      );\n    }\n\n    const isScalar = field.type instanceof GraphQLScalarType;\n    if (!isScalar) {\n      throw new Meteor.Error(\n        'collection-not-found',\n        `You are trying to set the mapTo directive on a non-scalar on field ${\n          field.name\n        }`\n      );\n    }\n\n    const collection = Mongo.Collection.get(objectType._mongoCollectionName);\n\n    collection.addReducers({\n      [field.name]: {\n        body: {\n          [args.to]: 1,\n        },\n        reduce(obj) {\n          return resolve(args.to, obj);\n        },\n      },\n    });\n  }\n}\n","import { SchemaDirectiveVisitor } from 'graphql-tools';\nimport { Mongo } from 'meteor/mongo';\n\nexport default class MongoDirective extends SchemaDirectiveVisitor {\n  /**\n   * @param {GraphQLObjectType} type\n   */\n  visitObject(type) {\n    if (type._mongoCollectionName) {\n      // it has already been setup by a link directive somewhere\n      return;\n    }\n\n    setupMongoDirective(type, this.args);\n  }\n\n  visitFieldDefinition() {}\n}\n\nexport function setupMongoDirective(type, args) {\n  const { name } = args;\n\n  type._mongoCollectionName = name;\n\n  let collection = Mongo.Collection.get(name);\n  if (!collection) {\n    collection = new Mongo.Collection(name);\n  }\n}\n","export default `\n  directive @mongo(\n    name: String!\n  ) on OBJECT | FIELD_DEFINITION\n\n  directive @link(\n    field: String\n    to: String\n    metadata: Boolean\n    unique: Boolean\n    autoremove: Boolean\n  ) on FIELD_DEFINITION\n\n  directive @map(\n    to: String\n  ) on FIELD_DEFINITION\n`;\n"]}}]