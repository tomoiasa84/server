[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar name;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"cultofcoders:apollo\":{\"server\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/index.js                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  load: () => load,\n  db: () => db,\n  getRenderer: () => getRenderer\n});\nlet checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 0);\nlet load;\nmodule.link(\"graphql-load\", {\n  load(v) {\n    load = v;\n  }\n\n}, 1);\nlet db;\nmodule.link(\"meteor/cultofcoders:grapher\", {\n  db(v) {\n    db = v;\n  }\n\n}, 2);\nlet getRenderer;\nmodule.link(\"./ssr\", {\n  default(v) {\n    getRenderer = v;\n  }\n\n}, 3);\nmodule.link(\"./scalars\");\nmodule.link(\"./types\");\nmodule.link(\"./config\", {\n  default: \"Config\"\n}, 4);\nmodule.link(\"./core/users\", {\n  getUserForContext: \"getUserForContext\"\n}, 5);\nmodule.link(\"./initialize\", {\n  default: \"initialize\"\n}, 6);\nmodule.link(\"./morpher/expose\", {\n  default: \"expose\"\n}, 7);\ncheckNpmVersions({\n  'apollo-server-express': '2.x.x',\n  graphql: '14.x.x',\n  'graphql-load': '0.1.x',\n  'graphql-type-json': '0.2.x',\n  'graphql-tools': '4.x.x'\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"config.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/config.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Config = {\n  userFields: {\n    _id: 1,\n    username: 1,\n    emails: 1,\n    roles: 1\n  },\n  middlewares: []\n};\nmodule.exportDefault(Config);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"initialize.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/initialize.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  default: () => initialize\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet db;\nmodule.link(\"meteor/cultofcoders:grapher\", {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet WebApp;\nmodule.link(\"meteor/webapp\", {\n  WebApp(v) {\n    WebApp = v;\n  }\n\n}, 2);\nlet ApolloServer;\nmodule.link(\"apollo-server-express\", {\n  ApolloServer(v) {\n    ApolloServer = v;\n  }\n\n}, 3);\nlet getSchema;\nmodule.link(\"graphql-load\", {\n  getSchema(v) {\n    getSchema = v;\n  }\n\n}, 4);\nlet AUTH_TOKEN_KEY;\nmodule.link(\"../constants\", {\n  AUTH_TOKEN_KEY(v) {\n    AUTH_TOKEN_KEY = v;\n  }\n\n}, 5);\nlet defaultSchemaDirectives;\nmodule.link(\"./directives\", {\n  default(v) {\n    defaultSchemaDirectives = v;\n  }\n\n}, 6);\nlet getUserForContext;\nmodule.link(\"./core/users\", {\n  getUserForContext(v) {\n    getUserForContext = v;\n  }\n\n}, 7);\n\nfunction initialize(apolloConfig = {}, meteorApolloConfig = {}) {\n  meteorApolloConfig = Object.assign({\n    gui: Meteor.isDevelopment,\n    middlewares: [],\n    userFields: {\n      _id: 1,\n      roles: 1,\n      username: 1,\n      emails: 1\n    }\n  }, meteorApolloConfig);\n  const {\n    typeDefs,\n    resolvers\n  } = getSchema();\n  const initialApolloConfig = Object.assign({}, apolloConfig);\n  apolloConfig = (0, _objectSpread2.default)({\n    introspection: Meteor.isDevelopment,\n    debug: Meteor.isDevelopment,\n    path: '/graphql',\n    formatError: e => {\n      console.error(e);\n      return {\n        message: e.message,\n        locations: e.locations,\n        path: e.path\n      };\n    }\n  }, initialApolloConfig, {\n    typeDefs,\n    resolvers,\n    schemaDirectives: (0, _objectSpread2.default)({}, defaultSchemaDirectives, initialApolloConfig.schemaDirectives ? initialApolloConfig.schemaDirectives : []),\n    context: getContextCreator(meteorApolloConfig, initialApolloConfig.context),\n    subscriptions: getSubscriptionConfig(meteorApolloConfig)\n  });\n  const server = new ApolloServer(apolloConfig);\n  server.applyMiddleware({\n    app: WebApp.connectHandlers,\n    gui: meteorApolloConfig.gui\n  });\n  server.installSubscriptionHandlers(WebApp.httpServer);\n  meteorApolloConfig.middlewares.forEach(middleware => {\n    WebApp.connectHandlers.use('/graphql', middleware);\n  }); // We are doing this work-around because Playground sets headers and WebApp also sets headers\n  // Resulting into a conflict and a server side exception of \"Headers already sent\"\n\n  WebApp.connectHandlers.use('/graphql', (req, res) => {\n    if (req.method === 'GET') {\n      res.end();\n    }\n  });\n  return {\n    server\n  };\n}\n\nfunction getContextCreator(meteorApolloConfig, defaultContextResolver) {\n  return function getContext({\n    req,\n    connection\n  }) {\n    return Promise.asyncApply(() => {\n      const defaultContext = defaultContextResolver ? Promise.await(defaultContextResolver({\n        req,\n        connection\n      })) : {};\n      Object.assign(defaultContext, {\n        db\n      });\n\n      if (connection) {\n        return (0, _objectSpread2.default)({}, defaultContext, connection.context);\n      } else {\n        let userContext = {};\n\n        if (Package['accounts-base']) {\n          const loginToken = req.headers['meteor-login-token'] || req.cookies['meteor-login-token'];\n          userContext = Promise.await(getUserForContext(loginToken, meteorApolloConfig.userFields));\n        }\n\n        return (0, _objectSpread2.default)({}, defaultContext, userContext);\n      }\n    });\n  };\n}\n\nfunction getSubscriptionConfig(meteorApolloConfig) {\n  return {\n    onConnect: (connectionParams, webSocket, context) => Promise.asyncApply(() => {\n      const loginToken = connectionParams[AUTH_TOKEN_KEY];\n      return new Promise((resolve, reject) => {\n        if (loginToken) {\n          const userContext = getUserForContext(loginToken, meteorApolloConfig.userFields).then(userContext => {\n            resolve(userContext);\n          });\n        } else {\n          resolve({});\n        }\n      });\n    })\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"ssr.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/ssr.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => getRenderer\n});\nlet ApolloClient;\nmodule.link(\"apollo-client\", {\n  ApolloClient(v) {\n    ApolloClient = v;\n  }\n\n}, 0);\nlet InMemoryCache;\nmodule.link(\"apollo-cache-inmemory\", {\n  InMemoryCache(v) {\n    InMemoryCache = v;\n  }\n\n}, 1);\n\nfunction getRenderer(options) {\n  let React;\n  module.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 2);\n  let renderToString;\n  module.link(\"react-dom/server\", {\n    renderToString(v) {\n      renderToString = v;\n    }\n\n  }, 3);\n  let getDataFromTree, ApolloProvider;\n  module.link(\"react-apollo\", {\n    getDataFromTree(v) {\n      getDataFromTree = v;\n    },\n\n    ApolloProvider(v) {\n      ApolloProvider = v;\n    }\n\n  }, 4);\n  let SchemaLink;\n  module.link(\"apollo-link-schema\", {\n    SchemaLink(v) {\n      SchemaLink = v;\n    }\n\n  }, 5);\n\n  const render = sink => Promise.asyncApply(() => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: Promise.await(options.server.context({\n        req: sink.request\n      }))\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache()\n    });\n    const context = {};\n    const WrappedApp = React.createElement(ApolloProvider, {\n      client: client\n    }, options.app(sink));\n    options.handler && Promise.await(options.handler(sink, client)); // load all data from local server;\n\n    Promise.await(getDataFromTree(WrappedApp));\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  });\n\n  return render;\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core\":{\"users.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/core/users.js                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  getUserForContext: () => getUserForContext\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\n\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nconst getUserForContext = (loginToken, userDefaultFields) => Promise.asyncApply(() => {\n  if (!Accounts) {\n    return {};\n  } // there is a possible current user connected!\n\n\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String); // the hashed token is the key to find the possible current user in the db\n\n    const hashedToken = Accounts._hashLoginToken(loginToken); // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n\n\n    const currentUser = Meteor.users.findOne({\n      'services.resume.loginTokens.hashedToken': hashedToken\n    }, {\n      fields: (0, _objectSpread2.default)({}, userDefaultFields, {\n        'services.resume.loginTokens': 1\n      })\n    }); // the current user exists\n\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(tokenInfo => tokenInfo.hashedToken === hashedToken); // get an exploitable token expiration date\n\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when); // true if the token is expired\n\n\n      const isExpired = expiresAt < new Date(); // if the token is still valid, give access to the current user\n      // information in the resolvers context\n\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null\n  };\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"directives\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/directives/index.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  typeDefs: () => typeDefs\n});\nlet grapherDirectives;\nmodule.link(\"meteor/cultofcoders:grapher-schema-directives\", {\n  directives(v) {\n    grapherDirectives = v;\n  }\n\n}, 0);\nlet directiveDefinitions;\nmodule.link(\"meteor/cultofcoders:grapher-schema-directives\", {\n  directiveDefinitions(v) {\n    directiveDefinitions = v;\n  }\n\n}, 1);\nconst typeDefs = [directiveDefinitions];\nmodule.exportDefault((0, _objectSpread2.default)({}, grapherDirectives));\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"morpher\":{\"docs.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/morpher/docs.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  APOLLO_MORPHER_COMPATIBLE: () => APOLLO_MORPHER_COMPATIBLE,\n  DOCUMENTATION_FETCH: () => DOCUMENTATION_FETCH,\n  DOCUMENTATION_INSERT: () => DOCUMENTATION_INSERT,\n  DOCUMENTATION_UPDATE: () => DOCUMENTATION_UPDATE,\n  DOCUMENTATION_REMOVE: () => DOCUMENTATION_REMOVE\n});\nconst APOLLO_MORPHER_COMPATIBLE = `[**apollo-morpher**](https://www.npmjs.com/package/apollo-morpher) compatible.`;\nconst DOCUMENTATION_FETCH = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"filters\", \"options\" and other keys that are passed as params to Grapher.\n\nExample of payload:\\n\n\"{\\\\\\\\\"filters\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\", \\\\\\\\\"options\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\nconst DOCUMENTATION_INSERT = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts the full document\n\nExample of payload:\\n\n\"{\\\\\\\\\"field\\\\\\\\\": \\\\\\\\\"value\\\\\\\\\" }\"\n\"\"\"\n`;\nconst DOCUMENTATION_UPDATE = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"selector\" and \"modifier\" as keys.\n\nExample of payload:\\n\n\"{\\\\\\\\\"selector\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\", \\\\\\\\\"modifier\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\nconst DOCUMENTATION_REMOVE = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"selector\" key.\n\nExample of payload:\\n\n\"{\\\\\\\\\"selector\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"expose.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/morpher/expose.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet db;\nmodule.link(\"meteor/cultofcoders:grapher\", {\n  db(v) {\n    db = v;\n  }\n\n}, 1);\nlet load;\nmodule.link(\"meteor/cultofcoders:apollo\", {\n  load(v) {\n    load = v;\n  }\n\n}, 2);\nlet setupDataFetching;\nmodule.link(\"./setupDataFetching\", {\n  default(v) {\n    setupDataFetching = v;\n  }\n\n}, 3);\nlet setupMutations;\nmodule.link(\"./setupMutations\", {\n  default(v) {\n    setupMutations = v;\n  }\n\n}, 4);\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction\n  });\n  const newObject = Object.assign({\n    subscription: true\n  }, object);\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(`You have already exposed ${name} somewhere else. Please make sure they do not collide.`);\n    }\n\n    exposedNames.push(name);\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const {\n    collection,\n    type\n  } = config;\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let {\n      MutationType,\n      Mutation\n    } = setupMutations(config, name, type, collection);\n    MutationType = `type Mutation { ${MutationType} }`;\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: {\n        Mutation\n      }\n    });\n  }\n\n  if (config.find) {\n    let {\n      QueryType,\n      Query\n    } = setupDataFetching(config, name, type, collection);\n    QueryType = `type Query { ${QueryType} }`;\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: {\n        Query\n      }\n    });\n  }\n\n  return modules;\n}\n\nmodule.exportDefault(morph);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"getFields.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/morpher/getFields.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => getFields\n});\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\n\nfunction getFields(mutator) {\n  // compute modified fields\n  var fields = [];\n  var topLevelFields = [];\n\n  _.each(mutator, function (params, op) {\n    if (op[0] == '$') {\n      _.each(_.keys(params), function (field) {\n        // record the field we are trying to change\n        if (!_.contains(fields, field)) {\n          // fields.push(field);\n          // topLevelFields.push(field.split('.')[0]);\n          // like { $set: { 'array.1.xx' } }\n          const specificPositionFieldMatch = /\\.[\\d]+(\\.)?/.exec(field);\n\n          if (specificPositionFieldMatch) {\n            fields.push(field.slice(0, specificPositionFieldMatch.index));\n          } else {\n            if (field.indexOf('.$') !== -1) {\n              if (field.indexOf('.$.') !== -1) {\n                fields.push(field.split('.$.')[0]);\n              } else {\n                fields.push(field.split('.$')[0]);\n              }\n            } else {\n              fields.push(field);\n            }\n          }\n\n          topLevelFields.push(field.split('.')[0]);\n        }\n      });\n    } else {\n      fields.push(op);\n    }\n  });\n\n  return {\n    fields,\n    topLevelFields\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupDataFetching.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/morpher/setupDataFetching.js                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => setupDataFetching\n});\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 0);\nlet DOCUMENTATION_FETCH;\nmodule.link(\"./docs\", {\n  DOCUMENTATION_FETCH(v) {\n    DOCUMENTATION_FETCH = v;\n  }\n\n}, 1);\n\nfunction setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}Single(payload: String!): ${type}\n  `; // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, {\n    params\n  }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign({\n        filters: {},\n        options: {}\n      }, params);\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {}\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, {\n    payload\n  }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, {\n      params\n    }, ctx, ast);\n    return collection().astToQuery(ast, astToQueryOptions).fetch();\n  };\n\n  Query = {\n    [name]: fn,\n\n    [name + 'Count'](_, {\n      payload\n    }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, {\n        params\n      }, ctx, ast);\n      return collection().find(astToQueryOptions.$filters || {}).count();\n    },\n\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    }\n\n  };\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n           if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n           const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return {\n    QueryType,\n    SubscriptionType,\n    Query,\n    Subscription\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"setupMutations.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/morpher/setupMutations.js                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  default: () => setupMutations\n});\nlet getFields;\nmodule.link(\"./getFields\", {\n  default(v) {\n    getFields = v;\n  }\n\n}, 0);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 2);\nlet DOCUMENTATION_INSERT, DOCUMENTATION_REMOVE, DOCUMENTATION_UPDATE;\nmodule.link(\"./docs\", {\n  DOCUMENTATION_INSERT(v) {\n    DOCUMENTATION_INSERT = v;\n  },\n\n  DOCUMENTATION_REMOVE(v) {\n    DOCUMENTATION_REMOVE = v;\n  },\n\n  DOCUMENTATION_UPDATE(v) {\n    DOCUMENTATION_UPDATE = v;\n  }\n\n}, 3);\n\nfunction setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `\n      ${DOCUMENTATION_INSERT}\n      ${name}Insert(payload: String!): ${type}\\n\n    `;\n\n    Mutation[`${name}Insert`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        document\n      } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, {\n          document\n        });\n      }\n\n      const docId = collection().insert(document);\n      return {\n        _id: docId\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `\n      ${DOCUMENTATION_UPDATE}\n      ${name}Update(payload: String!): String\\n\n    `;\n\n    Mutation[`${name}Update`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector,\n        modifier\n      } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const {\n          topLevelFields,\n          fields\n        } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `\n      ${DOCUMENTATION_REMOVE}\n      ${name}Remove(payload: String!): String\\n\n    `;\n\n    Mutation[`${name}Remove`] = (_, {\n      payload\n    }, ctx) => {\n      const {\n        selector\n      } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, {\n          selector\n        });\n      }\n\n      collection().remove(selector);\n      return 'ok';\n    };\n  }\n\n  return {\n    MutationType,\n    Mutation\n  };\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"scalars\":{\"Date.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/scalars/Date.js                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet GraphQLScalarType;\nmodule.link(\"graphql\", {\n  GraphQLScalarType(v) {\n    GraphQLScalarType = v;\n  }\n\n}, 0);\nlet Kind;\nmodule.link(\"graphql/language\", {\n  Kind(v) {\n    Kind = v;\n  }\n\n}, 1);\nmodule.exportDefault(new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n\n  parseValue(value) {\n    return new Date(Date.parse(value));\n  },\n\n  serialize(value) {\n    return value.toISOString();\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      const time = Date.parse(ast.value);\n      const date = new Date(time);\n      return date;\n    }\n\n    return null;\n  }\n\n}));\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"EJSON.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/scalars/EJSON.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet GraphQLScalarType;\nmodule.link(\"graphql\", {\n  GraphQLScalarType(v) {\n    GraphQLScalarType = v;\n  }\n\n}, 0);\nlet Kind;\nmodule.link(\"graphql/language\", {\n  Kind(v) {\n    Kind = v;\n  }\n\n}, 1);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 2);\nmodule.exportDefault(new GraphQLScalarType({\n  name: 'EJSON',\n  description: 'EJSON custom scalar type',\n\n  parseValue(value) {\n    return EJSON.parse(value);\n  },\n\n  serialize(value) {\n    return EJSON.stringify(value);\n  },\n\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      return EJSON.stringify(value);\n    }\n\n    return null;\n  }\n\n}));\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/scalars/index.js                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet Scalars;\nmodule.link(\"./scalars\", {\n  default(v) {\n    Scalars = v;\n  }\n\n}, 0);\nlet DateResolver;\nmodule.link(\"./Date\", {\n  default(v) {\n    DateResolver = v;\n  }\n\n}, 1);\nlet GraphQLJSON;\nmodule.link(\"graphql-type-json\", {\n  default(v) {\n    GraphQLJSON = v;\n  }\n\n}, 2);\nlet EJSON;\nmodule.link(\"./EJSON\", {\n  default(v) {\n    EJSON = v;\n  }\n\n}, 3);\nlet load;\nmodule.link(\"graphql-load\", {\n  load(v) {\n    load = v;\n  }\n\n}, 4);\nconst typeDefs = [Scalars];\nconst resolvers = [{\n  Date: DateResolver,\n  JSON: GraphQLJSON,\n  EJSON\n}];\nload({\n  typeDefs,\n  resolvers\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scalars.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/scalars/scalars.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.exportDefault(`\n  scalar Date\n  scalar JSON\n  scalar EJSON\n`);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"types\":{\"SubscriptionEventType.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/types/SubscriptionEventType.js                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.exportDefault(`\n  type SubscriptionEvent {\n    event: String\n    doc: JSON\n  }\n`);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/server/types/index.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nlet load;\nmodule.link(\"graphql-load\", {\n  load(v) {\n    load = v;\n  }\n\n}, 0);\nlet directiveTypeDefs;\nmodule.link(\"../directives\", {\n  typeDefs(v) {\n    directiveTypeDefs = v;\n  }\n\n}, 1);\nlet SubscriptionEventType;\nmodule.link(\"./SubscriptionEventType\", {\n  default(v) {\n    SubscriptionEventType = v;\n  }\n\n}, 2);\nload({\n  typeDefs: [...directiveTypeDefs, SubscriptionEventType]\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"constants.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cultofcoders_apollo/constants.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({\n  AUTH_TOKEN_KEY: () => AUTH_TOKEN_KEY,\n  AUTH_TOKEN_LOCALSTORAGE: () => AUTH_TOKEN_LOCALSTORAGE,\n  GRAPHQL_SUBSCRIPTION_PATH: () => GRAPHQL_SUBSCRIPTION_PATH,\n  GRAPHQL_SUBSCRIPTION_ENDPOINT: () => GRAPHQL_SUBSCRIPTION_ENDPOINT,\n  GRAPHQL_ENDPOINT: () => GRAPHQL_ENDPOINT\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nconst AUTH_TOKEN_KEY = 'meteor-login-token';\nconst AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\nconst GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nconst GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(GRAPHQL_SUBSCRIPTION_PATH).replace(/http/, 'ws');\nconst GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/cultofcoders:apollo/server/index.js\");\n\n/* Exports */\nPackage._define(\"cultofcoders:apollo\", exports);\n\n})();\n","servePath":"/packages/cultofcoders_apollo.js","sourceMap":{"version":3,"sources":["packages/cultofcoders:apollo/server/index.js","packages/cultofcoders:apollo/server/config.js","packages/cultofcoders:apollo/server/initialize.js","packages/cultofcoders:apollo/server/ssr.js","packages/cultofcoders:apollo/server/core/users.js","packages/cultofcoders:apollo/server/directives/index.js","packages/cultofcoders:apollo/server/morpher/docs.js","packages/cultofcoders:apollo/server/morpher/expose.js","packages/cultofcoders:apollo/server/morpher/getFields.js","packages/cultofcoders:apollo/server/morpher/setupDataFetching.js","packages/cultofcoders:apollo/server/morpher/setupMutations.js","packages/cultofcoders:apollo/server/scalars/Date.js","packages/cultofcoders:apollo/server/scalars/EJSON.js","packages/cultofcoders:apollo/server/scalars/index.js","packages/cultofcoders:apollo/server/scalars/scalars.js","packages/cultofcoders:apollo/server/types/SubscriptionEventType.js","packages/cultofcoders:apollo/server/types/index.js","packages/cultofcoders:apollo/constants.js"],"names":["module","export","load","db","getRenderer","checkNpmVersions","link","v","default","getUserForContext","graphql","Config","userFields","_id","username","emails","roles","middlewares","exportDefault","initialize","Meteor","WebApp","ApolloServer","getSchema","AUTH_TOKEN_KEY","defaultSchemaDirectives","apolloConfig","meteorApolloConfig","Object","assign","gui","isDevelopment","typeDefs","resolvers","initialApolloConfig","introspection","debug","path","formatError","e","console","error","message","locations","schemaDirectives","context","getContextCreator","subscriptions","getSubscriptionConfig","server","applyMiddleware","app","connectHandlers","installSubscriptionHandlers","httpServer","forEach","middleware","use","req","res","method","end","defaultContextResolver","getContext","connection","defaultContext","userContext","Package","loginToken","headers","cookies","onConnect","connectionParams","webSocket","Promise","resolve","reject","then","ApolloClient","InMemoryCache","options","React","renderToString","getDataFromTree","ApolloProvider","SchemaLink","render","sink","schema","request","getLink","client","ssrMode","cache","WrappedApp","handler","body","renderIntoElementById","root","initialState","extract","appendToBody","JSON","stringify","Accounts","userDefaultFields","check","String","hashedToken","_hashLoginToken","currentUser","users","findOne","fields","tokenInformation","services","resume","loginTokens","find","tokenInfo","expiresAt","_tokenExpiration","when","isExpired","Date","user","userId","grapherDirectives","directives","directiveDefinitions","APOLLO_MORPHER_COMPATIBLE","DOCUMENTATION_FETCH","DOCUMENTATION_INSERT","DOCUMENTATION_UPDATE","DOCUMENTATION_REMOVE","Match","setupDataFetching","setupMutations","MaybeBoolOrFunction","Maybe","OneOf","Boolean","Function","getConfig","object","type","collection","update","insert","remove","newObject","subscription","exposedNames","morph","config","name","includes","Error","push","singleConfig","modules","exposeSingle","MutationType","Mutation","QueryType","Query","getFields","_","mutator","topLevelFields","each","params","op","keys","field","contains","specificPositionFieldMatch","exec","slice","index","indexOf","split","EJSON","Subscription","SubscriptionType","resolveSelectors","ctx","ast","astToQueryOptions","filters","call","undefined","$filters","$options","fn","payload","parse","astToQuery","fetch","count","args","result","document","docId","selector","modifier","modifiedFields","modifiedTopLevelFields","GraphQLScalarType","Kind","description","parseValue","value","serialize","toISOString","parseLiteral","kind","STRING","time","date","Scalars","DateResolver","GraphQLJSON","directiveTypeDefs","SubscriptionEventType","AUTH_TOKEN_LOCALSTORAGE","GRAPHQL_SUBSCRIPTION_PATH","GRAPHQL_SUBSCRIPTION_ENDPOINT","GRAPHQL_ENDPOINT","absoluteUrl","replace"],"mappings":"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","file":"/packages/cultofcoders_apollo.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport { load } from 'graphql-load';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport getRenderer from './ssr';\n\nimport './scalars';\nimport './types';\nexport { default as Config } from './config';\nexport { getUserForContext } from './core/users';\nexport { default as initialize } from './initialize';\nexport { default as expose } from './morpher/expose';\n\nexport { load, db, getRenderer };\n\ncheckNpmVersions({\n  'apollo-server-express': '2.x.x',\n  graphql: '14.x.x',\n  'graphql-load': '0.1.x',\n  'graphql-type-json': '0.2.x',\n  'graphql-tools': '4.x.x',\n});\n","let Config = {\n  userFields: {\n    _id: 1,\n    username: 1,\n    emails: 1,\n    roles: 1,\n  },\n  middlewares: [],\n};\n\nexport default Config;\n","import { Meteor } from 'meteor/meteor';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { WebApp } from 'meteor/webapp';\nimport { ApolloServer } from 'apollo-server-express';\nimport { getSchema } from 'graphql-load';\nimport { AUTH_TOKEN_KEY } from '../constants';\nimport defaultSchemaDirectives from './directives';\nimport { getUserForContext } from './core/users';\n\n/**\n *\n * @param {*} apolloConfig Options https://www.apollographql.com/docs/apollo-server/api/apollo-server.html#constructor-options-lt-ApolloServer-gt\n * @param {MeteorApolloConfig} meteorApolloConfig\n */\nexport default function initialize(apolloConfig = {}, meteorApolloConfig = {}) {\n  meteorApolloConfig = Object.assign(\n    {\n      gui: Meteor.isDevelopment,\n      middlewares: [],\n      userFields: {\n        _id: 1,\n        roles: 1,\n        username: 1,\n        emails: 1,\n      },\n    },\n    meteorApolloConfig\n  );\n\n  const { typeDefs, resolvers } = getSchema();\n\n  const initialApolloConfig = Object.assign({}, apolloConfig);\n  apolloConfig = {\n    introspection: Meteor.isDevelopment,\n    debug: Meteor.isDevelopment,\n    path: '/graphql',\n    formatError: e => {\n      console.error(e);\n\n      return {\n        message: e.message,\n        locations: e.locations,\n        path: e.path,\n      };\n    },\n    ...initialApolloConfig,\n    typeDefs,\n    resolvers,\n    schemaDirectives: {\n      ...defaultSchemaDirectives,\n      ...(initialApolloConfig.schemaDirectives\n        ? initialApolloConfig.schemaDirectives\n        : []),\n    },\n    context: getContextCreator(meteorApolloConfig, initialApolloConfig.context),\n    subscriptions: getSubscriptionConfig(meteorApolloConfig),\n  };\n\n  const server = new ApolloServer(apolloConfig);\n\n  server.applyMiddleware({\n    app: WebApp.connectHandlers,\n    gui: meteorApolloConfig.gui,\n  });\n\n  server.installSubscriptionHandlers(WebApp.httpServer);\n\n  meteorApolloConfig.middlewares.forEach(middleware => {\n    WebApp.connectHandlers.use('/graphql', middleware);\n  });\n\n  // We are doing this work-around because Playground sets headers and WebApp also sets headers\n  // Resulting into a conflict and a server side exception of \"Headers already sent\"\n  WebApp.connectHandlers.use('/graphql', (req, res) => {\n    if (req.method === 'GET') {\n      res.end();\n    }\n  });\n\n  return {\n    server,\n  };\n}\n\nfunction getContextCreator(meteorApolloConfig, defaultContextResolver) {\n  return async function getContext({ req, connection }) {\n    const defaultContext = defaultContextResolver\n      ? await defaultContextResolver({ req, connection })\n      : {};\n\n    Object.assign(defaultContext, { db });\n\n    if (connection) {\n      return {\n        ...defaultContext,\n        ...connection.context,\n      };\n    } else {\n      let userContext = {};\n      if (Package['accounts-base']) {\n        const loginToken =\n          req.headers['meteor-login-token'] || req.cookies['meteor-login-token'];\n        userContext = await getUserForContext(loginToken, meteorApolloConfig.userFields);\n      }\n\n      return {\n        ...defaultContext,\n        ...userContext,\n      };\n    }\n  };\n}\n\nfunction getSubscriptionConfig(meteorApolloConfig) {\n  return {\n    onConnect: async (connectionParams, webSocket, context) => {\n      const loginToken = connectionParams[AUTH_TOKEN_KEY];\n\n      return new Promise((resolve, reject) => {\n        if (loginToken) {\n          const userContext = getUserForContext(\n            loginToken,\n            meteorApolloConfig.userFields\n          ).then(userContext => {\n            resolve(userContext);\n          });\n        } else {\n          resolve({});\n        }\n      });\n    },\n  };\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n/**\n * @param {() => React.Element} options.app\n * @param {String} options.root The id of element we're gonna render in\n * @param {ApolloServer} options.server The id of element we're gonna render in\n * @param {Function} options.handler Perform additional operations\n * @param {Function} options.getLink Perform additional operations\n */\nexport default function getRenderer(options) {\n  // We weirdly do it here so the package doesn't force you to have these packages added.\n  import React from 'react';\n  import { renderToString } from 'react-dom/server';\n  import { getDataFromTree, ApolloProvider } from 'react-apollo';\n  import { SchemaLink } from 'apollo-link-schema';\n\n  const render = async sink => {\n    const link = new SchemaLink({\n      schema: options.server.schema,\n      context: await options.server.context({ req: sink.request }),\n    });\n\n    if (options.getLink) {\n      link = options.getLink(link);\n    }\n\n    const client = new ApolloClient({\n      ssrMode: true,\n      link,\n      cache: new InMemoryCache(),\n    });\n\n    const context = {};\n    const WrappedApp = (\n      <ApolloProvider client={client}>{options.app(sink)}</ApolloProvider>\n    );\n\n    options.handler && (await options.handler(sink, client));\n\n    // load all data from local server;\n    await getDataFromTree(WrappedApp);\n\n    const body = renderToString(WrappedApp);\n    sink.renderIntoElementById(options.root || 'react-root', body);\n\n    const initialState = client.extract();\n    sink.appendToBody(`\n      <script>window.__APOLLO_STATE__=${JSON.stringify(initialState)};</script>\n    `);\n  };\n\n  return render;\n}\n","import { Meteor } from 'meteor/meteor';\n\nlet Accounts;\nif (Package['accounts-base']) {\n  Accounts = Package['accounts-base'].Accounts;\n}\n\nexport const getUserForContext = async (loginToken, userDefaultFields) => {\n  if (!Accounts) {\n    return {};\n  }\n\n  // there is a possible current user connected!\n  if (loginToken) {\n    // throw an error if the token is not a string\n    check(loginToken, String);\n\n    // the hashed token is the key to find the possible current user in the db\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    // get the possible current user from the database\n    // note: no need of a fiber aware findOne + a fiber aware call break tests\n    // runned with practicalmeteor:mocha if eslint is enabled\n    const currentUser = Meteor.users.findOne(\n      {\n        'services.resume.loginTokens.hashedToken': hashedToken,\n      },\n      {\n        fields: {\n          ...userDefaultFields,\n          'services.resume.loginTokens': 1,\n        },\n      }\n    );\n\n    // the current user exists\n    if (currentUser) {\n      // find the right login token corresponding, the current user may have\n      // several sessions logged on different browsers / computers\n      const tokenInformation = currentUser.services.resume.loginTokens.find(\n        tokenInfo => tokenInfo.hashedToken === hashedToken\n      );\n\n      // get an exploitable token expiration date\n      const expiresAt = Accounts._tokenExpiration(tokenInformation.when);\n\n      // true if the token is expired\n      const isExpired = expiresAt < new Date();\n\n      // if the token is still valid, give access to the current user\n      // information in the resolvers context\n      if (!isExpired) {\n        // return a new context object with the current user & her id\n        return {\n          user: currentUser,\n          userId: currentUser._id,\n        };\n      }\n    }\n  }\n\n  return {\n    user: {},\n    userId: null,\n  };\n};\n","import { directives as grapherDirectives } from 'meteor/cultofcoders:grapher-schema-directives';\nimport { directiveDefinitions } from 'meteor/cultofcoders:grapher-schema-directives';\n\nexport const typeDefs = [directiveDefinitions];\n\nexport default {\n  ...grapherDirectives,\n};\n","export const APOLLO_MORPHER_COMPATIBLE = `[**apollo-morpher**](https://www.npmjs.com/package/apollo-morpher) compatible.`;\n\nexport const DOCUMENTATION_FETCH = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"filters\", \"options\" and other keys that are passed as params to Grapher.\n\nExample of payload:\\n\n\"{\\\\\\\\\"filters\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\", \\\\\\\\\"options\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\n\nexport const DOCUMENTATION_INSERT = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts the full document\n\nExample of payload:\\n\n\"{\\\\\\\\\"field\\\\\\\\\": \\\\\\\\\"value\\\\\\\\\" }\"\n\"\"\"\n`;\n\nexport const DOCUMENTATION_UPDATE = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"selector\" and \"modifier\" as keys.\n\nExample of payload:\\n\n\"{\\\\\\\\\"selector\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\", \\\\\\\\\"modifier\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\n\nexport const DOCUMENTATION_REMOVE = `\n\"\"\"\n${APOLLO_MORPHER_COMPATIBLE}\n\nThe payload is an EJSON string that accepts \"selector\" key.\n\nExample of payload:\\n\n\"{\\\\\\\\\"selector\\\\\\\\\": \\\\\\\\\"{}\\\\\\\\\" }\"\n\"\"\"\n`;\n","import { check, Match } from 'meteor/check';\nimport { db } from 'meteor/cultofcoders:grapher';\nimport { load } from 'meteor/cultofcoders:apollo';\nimport setupDataFetching from './setupDataFetching';\nimport setupMutations from './setupMutations';\n\nconst MaybeBoolOrFunction = Match.Maybe(Match.OneOf(Boolean, Function));\n\nconst getConfig = object => {\n  check(object, {\n    type: String,\n    collection: Function,\n    update: MaybeBoolOrFunction,\n    insert: MaybeBoolOrFunction,\n    remove: MaybeBoolOrFunction,\n    find: MaybeBoolOrFunction,\n  });\n\n  const newObject = Object.assign(\n    {\n      subscription: true,\n    },\n    object\n  );\n\n  return newObject;\n};\n\nlet exposedNames = [];\n\nconst morph = config => {\n  for (name in config) {\n    if (exposedNames.includes(name)) {\n      throw new Error(\n        `You have already exposed ${name} somewhere else. Please make sure they do not collide.`\n      );\n    }\n    exposedNames.push(name);\n\n    let singleConfig = getConfig(config[name]);\n    let modules = exposeSingle(name, singleConfig);\n\n    load(modules);\n  }\n};\n\nfunction exposeSingle(name, config) {\n  const { collection, type } = config;\n\n  let modules = [];\n\n  if (config.insert || config.update || config.remove) {\n    let { MutationType, Mutation } = setupMutations(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    MutationType = `type Mutation { ${MutationType} }`;\n\n    modules.push({\n      typeDefs: MutationType,\n      resolvers: { Mutation },\n    });\n  }\n\n  if (config.find) {\n    let { QueryType, Query } = setupDataFetching(\n      config,\n      name,\n      type,\n      collection\n    );\n\n    QueryType = `type Query { ${QueryType} }`;\n\n    modules.push({\n      typeDefs: [QueryType],\n      resolvers: { Query },\n    });\n  }\n\n  return modules;\n}\n\nexport default morph;\n","import { _ } from 'meteor/underscore';\n\n/**\n * @param mutator\n */\nexport default function getFields(mutator) {\n  // compute modified fields\n  var fields = [];\n  var topLevelFields = [];\n\n  _.each(mutator, function(params, op) {\n    if (op[0] == '$') {\n      _.each(_.keys(params), function(field) {\n        // record the field we are trying to change\n        if (!_.contains(fields, field)) {\n          // fields.push(field);\n          // topLevelFields.push(field.split('.')[0]);\n\n          // like { $set: { 'array.1.xx' } }\n          const specificPositionFieldMatch = /\\.[\\d]+(\\.)?/.exec(field);\n          if (specificPositionFieldMatch) {\n            fields.push(field.slice(0, specificPositionFieldMatch.index));\n          } else {\n            if (field.indexOf('.$') !== -1) {\n              if (field.indexOf('.$.') !== -1) {\n                fields.push(field.split('.$.')[0]);\n              } else {\n                fields.push(field.split('.$')[0]);\n              }\n            } else {\n              fields.push(field);\n            }\n          }\n\n          topLevelFields.push(field.split('.')[0]);\n        }\n      });\n    } else {\n      fields.push(op);\n    }\n  });\n\n  return { fields, topLevelFields };\n}\n","import { EJSON } from 'meteor/ejson';\nimport { DOCUMENTATION_FETCH } from './docs';\n\nexport default function setupDataFetching(config, name, type, collection) {\n  let Query = {};\n  let QueryType = ``;\n  let Subscription = {};\n  let SubscriptionType = ``;\n\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}(payload: String!): [${type}]!\n  `;\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}Count(payload: String!): Int!\n  `;\n  QueryType += `\n    ${DOCUMENTATION_FETCH}\n    ${name}Single(payload: String!): ${type}\n  `;\n\n  // We are creating the function here because we are re-using it for Single ones\n\n  const resolveSelectors = (_, { params }, ctx, ast) => {\n    let astToQueryOptions;\n\n    if (typeof config.find === 'function') {\n      params = Object.assign(\n        {\n          filters: {},\n          options: {},\n        },\n        params\n      );\n\n      let astToQueryOptions = config.find.call(null, ctx, params, ast);\n      if (astToQueryOptions === false) {\n        throw new Error('Unauthorized');\n      }\n    }\n\n    if (astToQueryOptions === undefined || astToQueryOptions === true) {\n      astToQueryOptions = {\n        $filters: params.filters || {},\n        $options: params.options || {},\n      };\n    }\n\n    return astToQueryOptions;\n  };\n\n  const fn = (_, { payload }, ctx, ast) => {\n    const params = EJSON.parse(payload);\n    const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n    return collection()\n      .astToQuery(ast, astToQueryOptions)\n      .fetch();\n  };\n\n  Query = {\n    [name]: fn,\n    [name + 'Count'](_, { payload }, ctx, ast) {\n      const params = EJSON.parse(payload);\n      const astToQueryOptions = resolveSelectors(_, { params }, ctx, ast);\n\n      return collection()\n        .find(astToQueryOptions.$filters || {})\n        .count();\n    },\n    [name + 'Single'](_, args, ctx, ast) {\n      const result = fn.call(null, _, args, ctx, ast);\n      return result[0] || null;\n    },\n  };\n\n  /**\n   * This will not be in the current release\n   * \n  if (config.subscription) {\n    SubscriptionType = `${name}(params: JSON!): SubscriptionEvent`;\n    Subscription = {\n      [name]: {\n        resolve: payload => {\n          if (config.subscriptionResolver) {\n            return config.subscriptionResolver.call(null, payload);\n          }\n          return payload;\n        },\n        subscribe(_, { params }, ctx, ast) {\n          const fields = astToFields(ast)[doc];\n\n          if (typeof config.subscription === 'function') {\n            config.subscription.call(null, ctx, fields);\n          }\n\n          const observable = collection().find({}, { fields });\n          return asyncIterator(observable);\n        },\n      },\n    };\n  }\n  */\n\n  return { QueryType, SubscriptionType, Query, Subscription };\n}\n","import getFields from './getFields';\nimport { EJSON } from 'meteor/ejson';\nimport { check } from 'meteor/check';\nimport { DOCUMENTATION_INSERT, DOCUMENTATION_REMOVE, DOCUMENTATION_UPDATE } from './docs';\n\nexport default function setupMutations(config, name, type, collection) {\n  let Mutation = {};\n  let MutationType = ``;\n\n  if (config.insert) {\n    MutationType += `\n      ${DOCUMENTATION_INSERT}\n      ${name}Insert(payload: String!): ${type}\\n\n    `;\n\n    Mutation[`${name}Insert`] = (_, { payload }, ctx) => {\n      const { document } = EJSON.parse(payload);\n      check(document, Object);\n\n      if (typeof config.insert === 'function') {\n        config.insert.call(null, ctx, { document });\n      }\n\n      const docId = collection().insert(document);\n\n      return {\n        _id: docId,\n      };\n    };\n  }\n\n  if (config.update) {\n    MutationType += `\n      ${DOCUMENTATION_UPDATE}\n      ${name}Update(payload: String!): String\\n\n    `;\n\n    Mutation[`${name}Update`] = (_, { payload }, ctx) => {\n      const { selector, modifier } = EJSON.parse(payload);\n      check(selector, Object);\n      check(modifier, Object);\n\n      if (typeof config.update === 'function') {\n        const { topLevelFields, fields } = getFields(modifier);\n        config.update.call(null, ctx, {\n          selector,\n          modifier,\n          modifiedFields: fields,\n          modifiedTopLevelFields: topLevelFields,\n        });\n      }\n\n      const docId = collection().update(selector, modifier);\n\n      return 'ok';\n    };\n  }\n\n  if (config.remove) {\n    MutationType += `\n      ${DOCUMENTATION_REMOVE}\n      ${name}Remove(payload: String!): String\\n\n    `;\n\n    Mutation[`${name}Remove`] = (_, { payload }, ctx) => {\n      const { selector } = EJSON.parse(payload);\n      check(selector, Object);\n\n      if (typeof config.insert === 'function') {\n        config.remove.call(null, ctx, { selector });\n      }\n\n      collection().remove(selector);\n\n      return 'ok';\n    };\n  }\n\n  return { MutationType, Mutation };\n}\n","import { GraphQLScalarType } from 'graphql';\nimport { Kind } from 'graphql/language';\n\nexport default new GraphQLScalarType({\n  name: 'Date',\n  description: 'Date custom scalar type',\n  parseValue(value) {\n    return new Date(Date.parse(value));\n  },\n  serialize(value) {\n    return value.toISOString();\n  },\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      const time = Date.parse(ast.value);\n      const date = new Date(time);\n\n      return date;\n    }\n    return null;\n  },\n});\n","import { GraphQLScalarType } from 'graphql';\nimport { Kind } from 'graphql/language';\nimport { EJSON } from 'meteor/ejson';\n\nexport default new GraphQLScalarType({\n  name: 'EJSON',\n  description: 'EJSON custom scalar type',\n  parseValue(value) {\n    return EJSON.parse(value);\n  },\n  serialize(value) {\n    return EJSON.stringify(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind == Kind.STRING) {\n      return EJSON.stringify(value);\n    }\n\n    return null;\n  },\n});\n","import Scalars from './scalars';\nimport DateResolver from './Date';\nimport GraphQLJSON from 'graphql-type-json';\nimport EJSON from './EJSON';\nimport { load } from 'graphql-load';\n\nconst typeDefs = [Scalars];\nconst resolvers = [\n  {\n    Date: DateResolver,\n    JSON: GraphQLJSON,\n    EJSON,\n  },\n];\n\nload({\n  typeDefs,\n  resolvers,\n});\n","export default `\n  scalar Date\n  scalar JSON\n  scalar EJSON\n`;\n","export default `\n  type SubscriptionEvent {\n    event: String\n    doc: JSON\n  }\n`;\n","import { load } from 'graphql-load';\nimport { typeDefs as directiveTypeDefs } from '../directives';\nimport SubscriptionEventType from './SubscriptionEventType';\n\nload({\n  typeDefs: [...directiveTypeDefs, SubscriptionEventType],\n});\n","import { Meteor } from 'meteor/meteor';\n\nexport const AUTH_TOKEN_KEY = 'meteor-login-token';\nexport const AUTH_TOKEN_LOCALSTORAGE = 'Meteor.loginToken';\n\nexport const GRAPHQL_SUBSCRIPTION_PATH = 'graphql';\nexport const GRAPHQL_SUBSCRIPTION_ENDPOINT = Meteor.absoluteUrl(\n  GRAPHQL_SUBSCRIPTION_PATH\n).replace(/http/, 'ws');\n\nexport const GRAPHQL_ENDPOINT = Meteor.absoluteUrl('graphql');\n"]}}]